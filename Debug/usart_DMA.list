
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08005420  08005420  00015420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800575c  0800575c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800575c  0800575c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800575c  0800575c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000068  080057cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080057cc  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007991  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001987  00000000  00000000  00027a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  000293b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00029aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000413a  00000000  00000000  0002a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cf2  00000000  00000000  0002e212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000735b5  00000000  00000000  00033f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a74b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  000a750c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005404 	.word	0x08005404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005404 	.word	0x08005404

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa93 f3a3 	rbit	r3, r3
 8000b86:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	fab3 f383 	clz	r3, r3
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2103      	movs	r1, #3
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa93 f3a3 	rbit	r3, r3
 8000ba4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b085      	sub	sp, #20
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401a      	ands	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	fb01 f303 	mul.w	r3, r1, r3
 8000be4:	431a      	orrs	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	605a      	str	r2, [r3, #4]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b089      	sub	sp, #36	; 0x24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	613b      	str	r3, [r7, #16]
  return(result);
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	fab3 f383 	clz	r3, r3
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fab3 f383 	clz	r3, r3
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c44:	bf00      	nop
 8000c46:	3724      	adds	r7, #36	; 0x24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	613b      	str	r3, [r7, #16]
  return(result);
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2103      	movs	r1, #3
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	fab3 f383 	clz	r3, r3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	60da      	str	r2, [r3, #12]
}
 8000c9e:	bf00      	nop
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b089      	sub	sp, #36	; 0x24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6a1a      	ldr	r2, [r3, #32]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	613b      	str	r3, [r7, #16]
  return(result);
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	210f      	movs	r1, #15
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000cf8:	bf00      	nop
 8000cfa:	3724      	adds	r7, #36	; 0x24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	613b      	str	r3, [r7, #16]
  return(result);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	0a1b      	lsrs	r3, r3, #8
 8000d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa93 f3a3 	rbit	r3, r3
 8000d40:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	431a      	orrs	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d56:	bf00      	nop
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b088      	sub	sp, #32
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	613b      	str	r3, [r7, #16]
  return(result);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	fab3 f383 	clz	r3, r3
 8000d88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d8a:	e048      	b.n	8000e1e <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03a      	beq.n	8000e18 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	461a      	mov	r2, r3
 8000da8:	69b9      	ldr	r1, [r7, #24]
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fede 	bl	8000b6c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d003      	beq.n	8000dc0 <LL_GPIO_Init+0x5e>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d106      	bne.n	8000dce <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	69b9      	ldr	r1, [r7, #24]
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff14 	bl	8000bf6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff3a 	bl	8000c50 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d119      	bne.n	8000e18 <LL_GPIO_Init+0xb6>
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8000df0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000df2:	fab3 f383 	clz	r3, r3
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	d807      	bhi.n	8000e0a <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	69b9      	ldr	r1, [r7, #24]
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff51 	bl	8000caa <LL_GPIO_SetAFPin_0_7>
 8000e08:	e006      	b.n	8000e18 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff76 	bl	8000d04 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1af      	bne.n	8000d8c <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d003      	beq.n	8000e3c <LL_GPIO_Init+0xda>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d107      	bne.n	8000e4c <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6819      	ldr	r1, [r3, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	461a      	mov	r2, r3
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff febd 	bl	8000bc6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <LL_RCC_HSI_IsReady+0x20>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <LL_RCC_LSE_IsReady+0x20>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2301      	moveq	r3, #1
 8000e8e:	2300      	movne	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <LL_RCC_GetSysClkSource+0x18>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <LL_RCC_GetAHBPrescaler+0x18>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <LL_RCC_GetAPB2Prescaler+0x18>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <LL_RCC_GetUSARTClockSource+0x28>)
 8000f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	061b      	lsls	r3, r3, #24
 8000f2a:	4313      	orrs	r3, r2
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000

08000f3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <LL_RCC_PLL_GetMainSource+0x18>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <LL_RCC_PLL_GetPrediv+0x18>)
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	f003 030f 	and.w	r3, r3, #15
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000f98:	f000 f864 	bl	8001064 <RCC_GetSystemClockFreq>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f882 	bl	80010b0 <RCC_GetHCLKClockFreq>
 8000fac:	4602      	mov	r2, r0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f890 	bl	80010dc <RCC_GetPCLK1ClockFreq>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f89c 	bl	8001104 <RCC_GetPCLK2ClockFreq>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60da      	str	r2, [r3, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d12d      	bne.n	800104a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff8e 	bl	8000f10 <LL_RCC_GetUSARTClockSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d00a      	beq.n	8001010 <LL_RCC_GetUSARTClockFreq+0x34>
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d819      	bhi.n	8001032 <LL_RCC_GetUSARTClockFreq+0x56>
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d002      	beq.n	8001008 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001002:	2b02      	cmp	r3, #2
 8001004:	d00c      	beq.n	8001020 <LL_RCC_GetUSARTClockFreq+0x44>
 8001006:	e014      	b.n	8001032 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001008:	f000 f82c 	bl	8001064 <RCC_GetSystemClockFreq>
 800100c:	60f8      	str	r0, [r7, #12]
        break;
 800100e:	e021      	b.n	8001054 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001010:	f7ff ff22 	bl	8000e58 <LL_RCC_HSI_IsReady>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d019      	beq.n	800104e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <LL_RCC_GetUSARTClockFreq+0x84>)
 800101c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800101e:	e016      	b.n	800104e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001020:	f7ff ff2c 	bl	8000e7c <LL_RCC_LSE_IsReady>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d013      	beq.n	8001052 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800102a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800102e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001030:	e00f      	b.n	8001052 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001032:	f000 f817 	bl	8001064 <RCC_GetSystemClockFreq>
 8001036:	4603      	mov	r3, r0
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f839 	bl	80010b0 <RCC_GetHCLKClockFreq>
 800103e:	4603      	mov	r3, r0
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f84b 	bl	80010dc <RCC_GetPCLK1ClockFreq>
 8001046:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001048:	e004      	b.n	8001054 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800104a:	bf00      	nop
 800104c:	e002      	b.n	8001054 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800104e:	bf00      	nop
 8001050:	e000      	b.n	8001054 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001052:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001054:	68fb      	ldr	r3, [r7, #12]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	007a1200 	.word	0x007a1200

08001064 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800106e:	f7ff ff17 	bl	8000ea0 <LL_RCC_GetSysClkSource>
 8001072:	4603      	mov	r3, r0
 8001074:	2b08      	cmp	r3, #8
 8001076:	d00c      	beq.n	8001092 <RCC_GetSystemClockFreq+0x2e>
 8001078:	2b08      	cmp	r3, #8
 800107a:	d80e      	bhi.n	800109a <RCC_GetSystemClockFreq+0x36>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <RCC_GetSystemClockFreq+0x22>
 8001080:	2b04      	cmp	r3, #4
 8001082:	d003      	beq.n	800108c <RCC_GetSystemClockFreq+0x28>
 8001084:	e009      	b.n	800109a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <RCC_GetSystemClockFreq+0x48>)
 8001088:	607b      	str	r3, [r7, #4]
      break;
 800108a:	e009      	b.n	80010a0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <RCC_GetSystemClockFreq+0x48>)
 800108e:	607b      	str	r3, [r7, #4]
      break;
 8001090:	e006      	b.n	80010a0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001092:	f000 f84b 	bl	800112c <RCC_PLL_GetFreqDomain_SYS>
 8001096:	6078      	str	r0, [r7, #4]
      break;
 8001098:	e002      	b.n	80010a0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <RCC_GetSystemClockFreq+0x48>)
 800109c:	607b      	str	r3, [r7, #4]
      break;
 800109e:	bf00      	nop
  }

  return frequency;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	007a1200 	.word	0x007a1200

080010b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80010b8:	f7ff ff00 	bl	8000ebc <LL_RCC_GetAHBPrescaler>
 80010bc:	4603      	mov	r3, r0
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <RCC_GetHCLKClockFreq+0x28>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	40d3      	lsrs	r3, r2
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	08005474 	.word	0x08005474

080010dc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80010e4:	f7ff fef8 	bl	8000ed8 <LL_RCC_GetAPB1Prescaler>
 80010e8:	4603      	mov	r3, r0
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <RCC_GetPCLK1ClockFreq+0x24>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	461a      	mov	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	40d3      	lsrs	r3, r2
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08005484 	.word	0x08005484

08001104 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800110c:	f7ff fef2 	bl	8000ef4 <LL_RCC_GetAPB2Prescaler>
 8001110:	4603      	mov	r3, r0
 8001112:	0adb      	lsrs	r3, r3, #11
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <RCC_GetPCLK2ClockFreq+0x24>)
 8001116:	5cd3      	ldrb	r3, [r2, r3]
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	40d3      	lsrs	r3, r2
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08005484 	.word	0x08005484

0800112c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800113a:	f7ff feff 	bl	8000f3c <LL_RCC_PLL_GetMainSource>
 800113e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d003      	beq.n	8001156 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800114e:	e005      	b.n	800115c <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001152:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001154:	e005      	b.n	8001162 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001158:	60fb      	str	r3, [r7, #12]
      break;
 800115a:	e002      	b.n	8001162 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800115e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001160:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001162:	f7ff ff07 	bl	8000f74 <LL_RCC_PLL_GetPrediv>
 8001166:	4603      	mov	r3, r0
 8001168:	3301      	adds	r3, #1
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	fbb2 f4f3 	udiv	r4, r2, r3
 8001170:	f7ff fef2 	bl	8000f58 <LL_RCC_PLL_GetMultiplicator>
 8001174:	4603      	mov	r3, r0
 8001176:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800117a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800117e:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	fa92 f2a2 	rbit	r2, r2
 8001186:	603a      	str	r2, [r7, #0]
  return(result);
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	fab2 f282 	clz	r2, r2
 800118e:	40d3      	lsrs	r3, r2
 8001190:	3302      	adds	r3, #2
 8001192:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	bf00      	nop
 80011a0:	003d0900 	.word	0x003d0900
 80011a4:	007a1200 	.word	0x007a1200

080011a8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	605a      	str	r2, [r3, #4]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800121a:	b4b0      	push	{r4, r5, r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001228:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 800122a:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001232:	d114      	bne.n	800125e <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	005a      	lsls	r2, r3, #1
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	441a      	add	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	b29b      	uxth	r3, r3
 8001246:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001248:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800124c:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800124e:	086b      	lsrs	r3, r5, #1
 8001250:	b29b      	uxth	r3, r3
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 800125c:	e00a      	b.n	8001274 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	085a      	lsrs	r2, r3, #1
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	441a      	add	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	fbb2 f3f3 	udiv	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	60da      	str	r2, [r3, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bcb0      	pop	{r4, r5, r7}
 800127c:	4770      	bx	lr
	...

08001280 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff88 	bl	80011a8 <LL_USART_IsEnabled>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d14e      	bne.n	800133c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <LL_USART_Init+0xc8>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	6851      	ldr	r1, [r2, #4]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	68d2      	ldr	r2, [r2, #12]
 80012ae:	4311      	orrs	r1, r2
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	6912      	ldr	r2, [r2, #16]
 80012b4:	4311      	orrs	r1, r2
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	6992      	ldr	r2, [r2, #24]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4619      	mov	r1, r3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff80 	bl	80011ce <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4619      	mov	r1, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff8d 	bl	80011f4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <LL_USART_Init+0xcc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d104      	bne.n	80012ec <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff fe7a 	bl	8000fdc <LL_RCC_GetUSARTClockFreq>
 80012e8:	61b8      	str	r0, [r7, #24]
 80012ea:	e016      	b.n	800131a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <LL_USART_Init+0xd0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d107      	bne.n	8001304 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe49 	bl	8000f90 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	e00a      	b.n	800131a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <LL_USART_Init+0xd4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d106      	bne.n	800131a <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe3d 	bl	8000f90 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00d      	beq.n	800133c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001328:	2300      	movs	r3, #0
 800132a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	699a      	ldr	r2, [r3, #24]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	69b9      	ldr	r1, [r7, #24]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff6f 	bl	800121a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800133c:	7ffb      	ldrb	r3, [r7, #31]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	efff69f3 	.word	0xefff69f3
 800134c:	40013800 	.word	0x40013800
 8001350:	40004400 	.word	0x40004400
 8001354:	40004800 	.word	0x40004800

08001358 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4a07      	ldr	r2, [pc, #28]	; (8001388 <LL_InitTick+0x30>)
 800136c:	3b01      	subs	r3, #1
 800136e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <LL_InitTick+0x30>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <LL_InitTick+0x30>)
 8001378:	2205      	movs	r2, #5
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e010 	.word	0xe000e010

0800138c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001394:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffdd 	bl	8001358 <LL_InitTick>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <LL_mDelay+0x48>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80013b6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	d00c      	beq.n	80013da <LL_mDelay+0x32>
  {
    Delay++;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80013c6:	e008      	b.n	80013da <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <LL_mDelay+0x48>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <LL_mDelay+0x32>
    {
      Delay--;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
  while (Delay)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f3      	bne.n	80013c8 <LL_mDelay+0x20>
    }
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <LL_SetSystemCoreClock+0x1c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000000 	.word	0x20000000

08001414 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <NVIC_EnableIRQ+0x30>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0b      	bge.n	8001474 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <NVIC_SetPriority+0x4c>)
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	3b04      	subs	r3, #4
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001472:	e009      	b.n	8001488 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <NVIC_SetPriority+0x50>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	e000e100 	.word	0xe000e100

0800149c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4013      	ands	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000

080014cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7ff ffe3 	bl	800149c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80014d6:	2100      	movs	r1, #0
 80014d8:	2010      	movs	r0, #16
 80014da:	f7ff ffb5 	bl	8001448 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80014de:	2010      	movs	r0, #16
 80014e0:	f7ff ff98 	bl	8001414 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80014e4:	2100      	movs	r1, #0
 80014e6:	2011      	movs	r0, #17
 80014e8:	f7ff ffae 	bl	8001448 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014ec:	2011      	movs	r0, #17
 80014ee:	f7ff ff91 	bl	8001414 <NVIC_EnableIRQ>

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <LL_AHB1_GRP1_EnableClock>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000

08001528 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800155a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800155e:	f7ff ffcb 	bl	80014f8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001562:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001566:	f7ff ffc7 	bl	80014f8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 800156a:	2108      	movs	r1, #8
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <MX_GPIO_Init+0x54>)
 800156e:	f7ff ffdb 	bl	8001528 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001572:	2308      	movs	r3, #8
 8001574:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001576:	2301      	movs	r3, #1
 8001578:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <MX_GPIO_Init+0x54>)
 800158c:	f7ff fbe9 	bl	8000d62 <LL_GPIO_Init>

}
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	48000400 	.word	0x48000400

0800159c <NVIC_SetPriorityGrouping>:
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <LL_RCC_HSI_Enable>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <LL_RCC_HSI_Enable+0x1c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <LL_RCC_HSI_Enable+0x1c>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <LL_RCC_HSI_IsReady>:
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <LL_RCC_HSI_IsReady+0x20>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b02      	cmp	r3, #2
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000

08001628 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4904      	ldr	r1, [pc, #16]	; (8001650 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <LL_RCC_SetSysClkSource>:
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <LL_RCC_SetSysClkSource+0x24>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 0203 	bic.w	r2, r3, #3
 8001664:	4904      	ldr	r1, [pc, #16]	; (8001678 <LL_RCC_SetSysClkSource+0x24>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000

0800167c <LL_RCC_GetSysClkSource>:
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <LL_RCC_GetSysClkSource+0x18>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <LL_RCC_SetAHBPrescaler>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <LL_RCC_SetAHBPrescaler+0x24>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	4904      	ldr	r1, [pc, #16]	; (80016bc <LL_RCC_SetAHBPrescaler+0x24>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000

080016c0 <LL_RCC_SetAPB1Prescaler>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016d0:	4904      	ldr	r1, [pc, #16]	; (80016e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_RCC_SetAPB2Prescaler>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <LL_RCC_SetAPB2Prescaler+0x24>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016f8:	4904      	ldr	r1, [pc, #16]	; (800170c <LL_RCC_SetAPB2Prescaler+0x24>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <LL_APB1_GRP1_EnableClock+0x2c>)
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <LL_APB1_GRP1_EnableClock+0x2c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000

08001740 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <LL_APB2_GRP1_EnableClock+0x2c>)
 800174a:	699a      	ldr	r2, [r3, #24]
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <LL_APB2_GRP1_EnableClock+0x2c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001756:	699a      	ldr	r2, [r3, #24]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4013      	ands	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000

08001770 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <LL_FLASH_SetLatency+0x24>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 0207 	bic.w	r2, r3, #7
 8001780:	4904      	ldr	r1, [pc, #16]	; (8001794 <LL_FLASH_SetLatency+0x24>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40022000 	.word	0x40022000

08001798 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <LL_FLASH_GetLatency+0x18>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40022000 	.word	0x40022000

080017b4 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d106      	bne.n	80017d0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <LL_SYSTICK_SetClkSource+0x34>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <LL_SYSTICK_SetClkSource+0x34>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80017ce:	e005      	b.n	80017dc <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <LL_SYSTICK_SetClkSource+0x34>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <LL_SYSTICK_SetClkSource+0x34>)
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e010 	.word	0xe000e010

080017ec <main>:
	int lowL = 0;



int main(void)
{
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 80017f2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff ffa3 	bl	8001740 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80017fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80017fe:	f7ff ff87 	bl	8001710 <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001802:	2003      	movs	r0, #3
 8001804:	f7ff feca 	bl	800159c <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 8001808:	f000 f8a6 	bl	8001958 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180c:	f7ff fe9a 	bl	8001544 <MX_GPIO_Init>
  MX_DMA_Init();
 8001810:	f7ff fe5c 	bl	80014cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001814:	f000 feee 	bl	80025f4 <MX_USART2_UART_Init>

  /* Space for your local variables, callback registration ...*/


  uint8_t tx_data[1000];
  uint8_t tx_data1[] = "Buffer capacity: ";
 8001818:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800181c:	4a46      	ldr	r2, [pc, #280]	; (8001938 <main+0x14c>)
 800181e:	461c      	mov	r4, r3
 8001820:	4615      	mov	r5, r2
 8001822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	8023      	strh	r3, [r4, #0]
  uint8_t tx_data2[] = " bytes, occupied memory: ";
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4a43      	ldr	r2, [pc, #268]	; (800193c <main+0x150>)
 8001830:	461c      	mov	r4, r3
 8001832:	4615      	mov	r5, r2
 8001834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001838:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800183c:	c403      	stmia	r4!, {r0, r1}
 800183e:	8022      	strh	r2, [r4, #0]

  uint8_t tx_data3[] = " bytes, load [in %]: ";
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <main+0x154>)
 8001846:	461c      	mov	r4, r3
 8001848:	4615      	mov	r5, r2
 800184a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001852:	6020      	str	r0, [r4, #0]
 8001854:	3404      	adds	r4, #4
 8001856:	8021      	strh	r1, [r4, #0]

  uint8_t tx_data4[] = "%\r\n";
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4a39      	ldr	r2, [pc, #228]	; (8001944 <main+0x158>)
 800185e:	601a      	str	r2, [r3, #0]

  char buffer_size_string[4];
  char used_memory_string[4];
  char load_string[3];
  int buffer_size_int = DMA_USART2_BUFFER_SIZE;
 8001860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001864:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
  sprintf(buffer_size_string, "%d", buffer_size_int);
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8001870:	4935      	ldr	r1, [pc, #212]	; (8001948 <main+0x15c>)
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f8cc 	bl	8002a10 <siprintf>


  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 8001878:	4834      	ldr	r0, [pc, #208]	; (800194c <main+0x160>)
 800187a:	f000 fea9 	bl	80025d0 <USART2_RegisterCallback>

  	  	  	  //type your code here:



		sprintf(used_memory_string, "%d", occupied_memory);
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <main+0x164>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	492f      	ldr	r1, [pc, #188]	; (8001948 <main+0x15c>)
 800188a:	4618      	mov	r0, r3
 800188c:	f001 f8c0 	bl	8002a10 <siprintf>

		gcvt(load, 4, load_string);
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <main+0x168>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe4f 	bl	8000538 <__aeabi_f2d>
 800189a:	4604      	mov	r4, r0
 800189c:	460d      	mov	r5, r1
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	2004      	movs	r0, #4
 80018a4:	ec45 4b10 	vmov	d0, r4, r5
 80018a8:	f001 f85c 	bl	8002964 <gcvt>

	    USART2_PutBuffer(tx_data1, sizeof(tx_data1));
 80018ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018b0:	2112      	movs	r1, #18
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 ff80 	bl	80027b8 <USART2_PutBuffer>
		LL_mDelay(500);
 80018b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018bc:	f7ff fd74 	bl	80013a8 <LL_mDelay>
		USART2_PutBuffer(buffer_size_string, sizeof(buffer_size_string));
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2104      	movs	r1, #4
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 ff76 	bl	80027b8 <USART2_PutBuffer>
		LL_mDelay(500);
 80018cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d0:	f7ff fd6a 	bl	80013a8 <LL_mDelay>
		USART2_PutBuffer(tx_data2, sizeof(tx_data2));
 80018d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d8:	211a      	movs	r1, #26
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 ff6c 	bl	80027b8 <USART2_PutBuffer>
		LL_mDelay(500);
 80018e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e4:	f7ff fd60 	bl	80013a8 <LL_mDelay>
		USART2_PutBuffer(used_memory_string, sizeof(used_memory_string));
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	2104      	movs	r1, #4
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 ff62 	bl	80027b8 <USART2_PutBuffer>
		LL_mDelay(500);
 80018f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f8:	f7ff fd56 	bl	80013a8 <LL_mDelay>
		USART2_PutBuffer(tx_data3, sizeof(tx_data3));
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2116      	movs	r1, #22
 8001902:	4618      	mov	r0, r3
 8001904:	f000 ff58 	bl	80027b8 <USART2_PutBuffer>
		LL_mDelay(500);
 8001908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190c:	f7ff fd4c 	bl	80013a8 <LL_mDelay>
		USART2_PutBuffer(load_string, sizeof(load_string));
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2103      	movs	r1, #3
 8001914:	4618      	mov	r0, r3
 8001916:	f000 ff4f 	bl	80027b8 <USART2_PutBuffer>
		LL_mDelay(500);
 800191a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800191e:	f7ff fd43 	bl	80013a8 <LL_mDelay>
		USART2_PutBuffer(tx_data4, sizeof(tx_data4));
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	2104      	movs	r1, #4
 8001928:	4618      	mov	r0, r3
 800192a:	f000 ff45 	bl	80027b8 <USART2_PutBuffer>
		LL_mDelay(500);
 800192e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001932:	f7ff fd39 	bl	80013a8 <LL_mDelay>
  {
 8001936:	e7a2      	b.n	800187e <main+0x92>
 8001938:	08005424 	.word	0x08005424
 800193c:	08005438 	.word	0x08005438
 8001940:	08005454 	.word	0x08005454
 8001944:	000a0d25 	.word	0x000a0d25
 8001948:	08005420 	.word	0x08005420
 800194c:	080019c5 	.word	0x080019c5
 8001950:	200000a8 	.word	0x200000a8
 8001954:	200000ac 	.word	0x200000ac

08001958 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ff07 	bl	8001770 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001962:	f7ff ff19 	bl	8001798 <LL_FLASH_GetLatency>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 800196c:	f000 f8a2 	bl	8001ab4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001970:	f7ff fe38 	bl	80015e4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001974:	bf00      	nop
 8001976:	f7ff fe45 	bl	8001604 <LL_RCC_HSI_IsReady>
 800197a:	4603      	mov	r3, r0
 800197c:	2b01      	cmp	r3, #1
 800197e:	d1fa      	bne.n	8001976 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001980:	2010      	movs	r0, #16
 8001982:	f7ff fe51 	bl	8001628 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fe86 	bl	8001698 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fe97 	bl	80016c0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fea8 	bl	80016e8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fe5b 	bl	8001654 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800199e:	bf00      	nop
 80019a0:	f7ff fe6c 	bl	800167c <LL_RCC_GetSysClkSource>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1fa      	bne.n	80019a0 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <SystemClock_Config+0x68>)
 80019ac:	f7ff fcee 	bl	800138c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80019b0:	2004      	movs	r0, #4
 80019b2:	f7ff feff 	bl	80017b4 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80019b6:	4802      	ldr	r0, [pc, #8]	; (80019c0 <SystemClock_Config+0x68>)
 80019b8:	f7ff fd1c 	bl	80013f4 <LL_SetSystemCoreClock>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	007a1200 	.word	0x007a1200

080019c4 <proccesDmaData>:

/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(const uint8_t* data, uint16_t len)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
	/* Process received data */

		// type your algorithm here:

	for(uint8_t i = 0; i < len; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e05a      	b.n	8001a8c <proccesDmaData+0xc8>
	{
		if(*(data+i) == '#')
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b23      	cmp	r3, #35	; 0x23
 80019e0:	d103      	bne.n	80019ea <proccesDmaData+0x26>
		{
			start = 1;
 80019e2:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <proccesDmaData+0xe0>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e011      	b.n	8001a0e <proccesDmaData+0x4a>
		}
		else if(*(data+i) == '$')
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b24      	cmp	r3, #36	; 0x24
 80019f4:	d10b      	bne.n	8001a0e <proccesDmaData+0x4a>
		{
			start = 0;
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <proccesDmaData+0xe0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
			count = 0;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <proccesDmaData+0xe4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
			lowL = 0;
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <proccesDmaData+0xe8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
		    capL = 0;
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <proccesDmaData+0xec>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
		}

		if(start == 1)
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <proccesDmaData+0xe0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d137      	bne.n	8001a86 <proccesDmaData+0xc2>
		{
			count++;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <proccesDmaData+0xe4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <proccesDmaData+0xe4>)
 8001a1e:	6013      	str	r3, [r2, #0]
			if(count >= 34)
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <proccesDmaData+0xe4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b21      	cmp	r3, #33	; 0x21
 8001a26:	dd0c      	ble.n	8001a42 <proccesDmaData+0x7e>
			{
				start = 0;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <proccesDmaData+0xe0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
				count = 0;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <proccesDmaData+0xe4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
				lowL = 0;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <proccesDmaData+0xe8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
				capL = 0;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <proccesDmaData+0xec>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e021      	b.n	8001a86 <proccesDmaData+0xc2>
			}
			else
			{
				if(*(data+i) > 96 && *(data+i) < 123)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b60      	cmp	r3, #96	; 0x60
 8001a4c:	d90a      	bls.n	8001a64 <proccesDmaData+0xa0>
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b7a      	cmp	r3, #122	; 0x7a
 8001a58:	d804      	bhi.n	8001a64 <proccesDmaData+0xa0>
				{
					lowL++;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <proccesDmaData+0xe8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <proccesDmaData+0xe8>)
 8001a62:	6013      	str	r3, [r2, #0]
				}
				if(*(data+i) > 64 && *(data+i) < 91)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b40      	cmp	r3, #64	; 0x40
 8001a6e:	d90a      	bls.n	8001a86 <proccesDmaData+0xc2>
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b5a      	cmp	r3, #90	; 0x5a
 8001a7a:	d804      	bhi.n	8001a86 <proccesDmaData+0xc2>
				{
					capL++;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <proccesDmaData+0xec>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <proccesDmaData+0xec>)
 8001a84:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < len; i++)
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	887a      	ldrh	r2, [r7, #2]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d89f      	bhi.n	80019d6 <proccesDmaData+0x12>

		}


	}
}
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000084 	.word	0x20000084
 8001aa8:	20000088 	.word	0x20000088
 8001aac:	20000090 	.word	0x20000090
 8001ab0:	2000008c 	.word	0x2000008c

08001ab4 <Error_Handler>:


void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <LL_DMA_DisableChannel+0x3c>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	4907      	ldr	r1, [pc, #28]	; (8001b00 <LL_DMA_DisableChannel+0x3c>)
 8001ae4:	5c8a      	ldrb	r2, [r1, r2]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	440a      	add	r2, r1
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	0800546c 	.word	0x0800546c

08001b04 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b40:	bf0c      	ite	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	2300      	movne	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b8a:	605a      	str	r2, [r3, #4]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba6:	605a      	str	r2, [r3, #4]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bc2:	605a      	str	r2, [r3, #4]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c06:	2b40      	cmp	r3, #64	; 0x40
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2210      	movs	r2, #16
 8001c28:	621a      	str	r2, [r3, #32]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <HardFault_Handler+0x4>

08001c4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <MemManage_Handler+0x4>

08001c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <BusFault_Handler+0x4>

08001c56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <UsageFault_Handler+0x4>

08001c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <DMA1_Channel6_IRQHandler+0x38>)
 8001c9a:	f7ff ff33 	bl	8001b04 <LL_DMA_IsActiveFlag_TC6>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001ca4:	f000 fda8 	bl	80027f8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <DMA1_Channel6_IRQHandler+0x38>)
 8001caa:	f7ff ff67 	bl	8001b7c <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001cae:	e00a      	b.n	8001cc6 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001cb0:	4806      	ldr	r0, [pc, #24]	; (8001ccc <DMA1_Channel6_IRQHandler+0x38>)
 8001cb2:	f7ff ff4f 	bl	8001b54 <LL_DMA_IsActiveFlag_HT6>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d104      	bne.n	8001cc6 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001cbc:	f000 fd9c 	bl	80027f8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <DMA1_Channel6_IRQHandler+0x38>)
 8001cc2:	f7ff ff77 	bl	8001bb4 <LL_DMA_ClearFlag_HT6>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001cd4:	480a      	ldr	r0, [pc, #40]	; (8001d00 <DMA1_Channel7_IRQHandler+0x30>)
 8001cd6:	f7ff ff29 	bl	8001b2c <LL_DMA_IsActiveFlag_TC7>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d10d      	bne.n	8001cfc <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <DMA1_Channel7_IRQHandler+0x30>)
 8001ce2:	f7ff ff59 	bl	8001b98 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001ce6:	bf00      	nop
 8001ce8:	4806      	ldr	r0, [pc, #24]	; (8001d04 <DMA1_Channel7_IRQHandler+0x34>)
 8001cea:	f7ff ff84 	bl	8001bf6 <LL_USART_IsActiveFlag_TC>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f9      	beq.n	8001ce8 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001cf4:	2107      	movs	r1, #7
 8001cf6:	4802      	ldr	r0, [pc, #8]	; (8001d00 <DMA1_Channel7_IRQHandler+0x30>)
 8001cf8:	f7ff fee4 	bl	8001ac4 <LL_DMA_DisableChannel>
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40004400 	.word	0x40004400

08001d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001d0c:	4806      	ldr	r0, [pc, #24]	; (8001d28 <USART2_IRQHandler+0x20>)
 8001d0e:	f7ff ff5f 	bl	8001bd0 <LL_USART_IsActiveFlag_IDLE>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001d18:	f000 fd6e 	bl	80027f8 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <USART2_IRQHandler+0x20>)
 8001d1e:	f7ff ff7d 	bl	8001c1c <LL_USART_ClearFlag_IDLE>
	}
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40004400 	.word	0x40004400

08001d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	return 1;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_kill>:

int _kill(int pid, int sig)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d46:	f000 fe31 	bl	80029ac <__errno>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2216      	movs	r2, #22
 8001d4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_exit>:

void _exit (int status)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ffe7 	bl	8001d3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d6e:	e7fe      	b.n	8001d6e <_exit+0x12>

08001d70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e00a      	b.n	8001d98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d82:	f3af 8000 	nop.w
 8001d86:	4601      	mov	r1, r0
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	60ba      	str	r2, [r7, #8]
 8001d8e:	b2ca      	uxtb	r2, r1
 8001d90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbf0      	blt.n	8001d82 <_read+0x12>
	}

return len;
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e009      	b.n	8001dd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	60ba      	str	r2, [r7, #8]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbf1      	blt.n	8001dbc <_write+0x12>
	}
	return len;
 8001dd8:	687b      	ldr	r3, [r7, #4]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_close>:

int _close(int file)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_isatty>:

int _isatty(int file)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	return 1;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x50>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x16>
		heap_end = &end;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <_sbrk+0x50>)
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <_sbrk+0x54>)
 8001e60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <_sbrk+0x50>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <_sbrk+0x50>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	466a      	mov	r2, sp
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d907      	bls.n	8001e86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e76:	f000 fd99 	bl	80029ac <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	220c      	movs	r2, #12
 8001e7e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
 8001e84:	e006      	b.n	8001e94 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <_sbrk+0x50>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <_sbrk+0x50>)
 8001e90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000094 	.word	0x20000094
 8001ea0:	200001c0 	.word	0x200001c0

08001ea4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <SystemInit+0x84>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <SystemInit+0x84>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <SystemInit+0x88>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <SystemInit+0x88>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <SystemInit+0x88>)
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4918      	ldr	r1, [pc, #96]	; (8001f2c <SystemInit+0x88>)
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <SystemInit+0x8c>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <SystemInit+0x88>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <SystemInit+0x88>)
 8001ed6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <SystemInit+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <SystemInit+0x88>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <SystemInit+0x88>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <SystemInit+0x88>)
 8001ef2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ef6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <SystemInit+0x88>)
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <SystemInit+0x88>)
 8001efe:	f023 030f 	bic.w	r3, r3, #15
 8001f02:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <SystemInit+0x88>)
 8001f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f08:	4908      	ldr	r1, [pc, #32]	; (8001f2c <SystemInit+0x88>)
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <SystemInit+0x90>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x88>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SystemInit+0x84>)
 8001f18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f1c:	609a      	str	r2, [r3, #8]
#endif
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	f87fc00c 	.word	0xf87fc00c
 8001f34:	ff00fccc 	.word	0xff00fccc

08001f38 <NVIC_EnableIRQ>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <NVIC_EnableIRQ+0x30>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <NVIC_SetPriority>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	da0b      	bge.n	8001f98 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <NVIC_SetPriority+0x4c>)
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	3b04      	subs	r3, #4
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	761a      	strb	r2, [r3, #24]
}
 8001f96:	e009      	b.n	8001fac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <NVIC_SetPriority+0x50>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <LL_DMA_EnableChannel>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <LL_DMA_EnableChannel+0x3c>)
 8001fd0:	5cd3      	ldrb	r3, [r2, r3]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	3a01      	subs	r2, #1
 8001fde:	4907      	ldr	r1, [pc, #28]	; (8001ffc <LL_DMA_EnableChannel+0x3c>)
 8001fe0:	5c8a      	ldrb	r2, [r1, r2]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	440a      	add	r2, r1
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6013      	str	r3, [r2, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	0800548c 	.word	0x0800548c

08002000 <LL_DMA_DisableChannel>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <LL_DMA_DisableChannel+0x3c>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	461a      	mov	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	3a01      	subs	r2, #1
 800201e:	4907      	ldr	r1, [pc, #28]	; (800203c <LL_DMA_DisableChannel+0x3c>)
 8002020:	5c8a      	ldrb	r2, [r1, r2]
 8002022:	4611      	mov	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	440a      	add	r2, r1
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6013      	str	r3, [r2, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	0800548c 	.word	0x0800548c

08002040 <LL_DMA_SetDataTransferDirection>:
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3b01      	subs	r3, #1
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <LL_DMA_SetDataTransferDirection+0x48>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	461a      	mov	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002060:	f023 0310 	bic.w	r3, r3, #16
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	3a01      	subs	r2, #1
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <LL_DMA_SetDataTransferDirection+0x48>)
 800206a:	5c8a      	ldrb	r2, [r1, r2]
 800206c:	4611      	mov	r1, r2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	440a      	add	r2, r1
 8002072:	4611      	mov	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	0800548c 	.word	0x0800548c

0800208c <LL_DMA_GetDataTransferDirection>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3b01      	subs	r3, #1
 800209a:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <LL_DMA_GetDataTransferDirection+0x2c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	461a      	mov	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f244 0310 	movw	r3, #16400	; 0x4010
 80020aa:	4013      	ands	r3, r2
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	0800548c 	.word	0x0800548c

080020bc <LL_DMA_SetMode>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <LL_DMA_SetMode+0x44>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 0220 	bic.w	r2, r3, #32
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3b01      	subs	r3, #1
 80020e0:	4907      	ldr	r1, [pc, #28]	; (8002100 <LL_DMA_SetMode+0x44>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	4619      	mov	r1, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	440b      	add	r3, r1
 80020ea:	4619      	mov	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	0800548c 	.word	0x0800548c

08002104 <LL_DMA_SetPeriphIncMode>:
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	3b01      	subs	r3, #1
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <LL_DMA_SetPeriphIncMode+0x44>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3b01      	subs	r3, #1
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <LL_DMA_SetPeriphIncMode+0x44>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	4619      	mov	r1, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	440b      	add	r3, r1
 8002132:	4619      	mov	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	0800548c 	.word	0x0800548c

0800214c <LL_DMA_SetMemoryIncMode>:
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3b01      	subs	r3, #1
 800215c:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <LL_DMA_SetMemoryIncMode+0x44>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	461a      	mov	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3b01      	subs	r3, #1
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <LL_DMA_SetMemoryIncMode+0x44>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	4619      	mov	r1, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	440b      	add	r3, r1
 800217a:	4619      	mov	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	0800548c 	.word	0x0800548c

08002194 <LL_DMA_SetPeriphSize>:
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <LL_DMA_SetPeriphSize+0x44>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	461a      	mov	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4413      	add	r3, r2
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <LL_DMA_SetPeriphSize+0x44>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	4619      	mov	r1, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	440b      	add	r3, r1
 80021c2:	4619      	mov	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	0800548c 	.word	0x0800548c

080021dc <LL_DMA_SetMemorySize>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <LL_DMA_SetMemorySize+0x44>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	461a      	mov	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3b01      	subs	r3, #1
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <LL_DMA_SetMemorySize+0x44>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	4619      	mov	r1, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	440b      	add	r3, r1
 800220a:	4619      	mov	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	0800548c 	.word	0x0800548c

08002224 <LL_DMA_SetChannelPriorityLevel>:
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3b01      	subs	r3, #1
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	461a      	mov	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	3b01      	subs	r3, #1
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	4619      	mov	r1, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	440b      	add	r3, r1
 8002252:	4619      	mov	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	0800548c 	.word	0x0800548c

0800226c <LL_DMA_SetDataLength>:
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3b01      	subs	r3, #1
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <LL_DMA_SetDataLength+0x44>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	461a      	mov	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	3a01      	subs	r2, #1
 8002290:	4907      	ldr	r1, [pc, #28]	; (80022b0 <LL_DMA_SetDataLength+0x44>)
 8002292:	5c8a      	ldrb	r2, [r1, r2]
 8002294:	4611      	mov	r1, r2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	440a      	add	r2, r1
 800229a:	4611      	mov	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	0800548c 	.word	0x0800548c

080022b4 <LL_DMA_GetDataLength>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	4a06      	ldr	r2, [pc, #24]	; (80022dc <LL_DMA_GetDataLength+0x28>)
 80022c4:	5cd3      	ldrb	r3, [r2, r3]
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	b29b      	uxth	r3, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	0800548c 	.word	0x0800548c

080022e0 <LL_DMA_ConfigAddresses>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d114      	bne.n	800231e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <LL_DMA_ConfigAddresses+0x74>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	461a      	mov	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3b01      	subs	r3, #1
 800230c:	4a11      	ldr	r2, [pc, #68]	; (8002354 <LL_DMA_ConfigAddresses+0x74>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	461a      	mov	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	461a      	mov	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6093      	str	r3, [r2, #8]
}
 800231c:	e013      	b.n	8002346 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <LL_DMA_ConfigAddresses+0x74>)
 8002324:	5cd3      	ldrb	r3, [r2, r3]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	461a      	mov	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3b01      	subs	r3, #1
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <LL_DMA_ConfigAddresses+0x74>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	461a      	mov	r2, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	60d3      	str	r3, [r2, #12]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	0800548c 	.word	0x0800548c

08002358 <LL_DMA_SetMemoryAddress>:
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	3b01      	subs	r3, #1
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <LL_DMA_SetMemoryAddress+0x2c>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	461a      	mov	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	0800548c 	.word	0x0800548c

08002388 <LL_DMA_SetPeriphAddress>:
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	3b01      	subs	r3, #1
 8002398:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <LL_DMA_SetPeriphAddress+0x2c>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	461a      	mov	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6093      	str	r3, [r2, #8]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	0800548c 	.word	0x0800548c

080023b8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <LL_DMA_EnableIT_TC+0x3c>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	3a01      	subs	r2, #1
 80023d6:	4907      	ldr	r1, [pc, #28]	; (80023f4 <LL_DMA_EnableIT_TC+0x3c>)
 80023d8:	5c8a      	ldrb	r2, [r1, r2]
 80023da:	4611      	mov	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	440a      	add	r2, r1
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6013      	str	r3, [r2, #0]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	0800548c 	.word	0x0800548c

080023f8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	3b01      	subs	r3, #1
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <LL_DMA_EnableIT_HT+0x3c>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	3a01      	subs	r2, #1
 8002416:	4907      	ldr	r1, [pc, #28]	; (8002434 <LL_DMA_EnableIT_HT+0x3c>)
 8002418:	5c8a      	ldrb	r2, [r1, r2]
 800241a:	4611      	mov	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	440a      	add	r2, r1
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6013      	str	r3, [r2, #0]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	0800548c 	.word	0x0800548c

08002438 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3b01      	subs	r3, #1
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <LL_DMA_EnableIT_TE+0x3c>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	461a      	mov	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	3a01      	subs	r2, #1
 8002456:	4907      	ldr	r1, [pc, #28]	; (8002474 <LL_DMA_EnableIT_TE+0x3c>)
 8002458:	5c8a      	ldrb	r2, [r1, r2]
 800245a:	4611      	mov	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	440a      	add	r2, r1
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6013      	str	r3, [r2, #0]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	0800548c 	.word	0x0800548c

08002478 <LL_AHB1_GRP1_EnableClock>:
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000

080024a8 <LL_APB1_GRP1_EnableClock>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	4907      	ldr	r1, [pc, #28]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4013      	ands	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40021000 	.word	0x40021000

080024d8 <LL_USART_Enable>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	601a      	str	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_USART_ConfigAsyncMode>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	609a      	str	r2, [r3, #8]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f043 0210 	orr.w	r2, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	601a      	str	r2, [r3, #0]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	609a      	str	r2, [r3, #8]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80025a4:	b490      	push	{r4, r7}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 80025ae:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3328      	adds	r3, #40	; 0x28
 80025ba:	461c      	mov	r4, r3
 80025bc:	e002      	b.n	80025c4 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3324      	adds	r3, #36	; 0x24
 80025c2:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 80025c4:	4623      	mov	r3, r4
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc90      	pop	{r4, r7}
 80025ce:	4770      	bx	lr

080025d0 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <USART2_RegisterCallback+0x20>)
 80025e2:	6013      	str	r3, [r2, #0]
	}
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	20000098 	.word	0x20000098

080025f4 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b090      	sub	sp, #64	; 0x40
 80025f8:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]
 800260a:	615a      	str	r2, [r3, #20]
 800260c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
 800261c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800261e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002622:	f7ff ff41 	bl	80024a8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002626:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800262a:	f7ff ff25 	bl	8002478 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800262e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002632:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002634:	2302      	movs	r3, #2
 8002636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002638:	2303      	movs	r3, #3
 800263a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002644:	2307      	movs	r3, #7
 8002646:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	4619      	mov	r1, r3
 800264c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002650:	f7fe fb87 	bl	8000d62 <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002654:	2200      	movs	r2, #0
 8002656:	2106      	movs	r1, #6
 8002658:	4854      	ldr	r0, [pc, #336]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 800265a:	f7ff fcf1 	bl	8002040 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800265e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002662:	2106      	movs	r1, #6
 8002664:	4851      	ldr	r0, [pc, #324]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002666:	f7ff fddd 	bl	8002224 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800266a:	2200      	movs	r2, #0
 800266c:	2106      	movs	r1, #6
 800266e:	484f      	ldr	r0, [pc, #316]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002670:	f7ff fd24 	bl	80020bc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002674:	2200      	movs	r2, #0
 8002676:	2106      	movs	r1, #6
 8002678:	484c      	ldr	r0, [pc, #304]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 800267a:	f7ff fd43 	bl	8002104 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	2106      	movs	r1, #6
 8002682:	484a      	ldr	r0, [pc, #296]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002684:	f7ff fd62 	bl	800214c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002688:	2200      	movs	r2, #0
 800268a:	2106      	movs	r1, #6
 800268c:	4847      	ldr	r0, [pc, #284]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 800268e:	f7ff fd81 	bl	8002194 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002692:	2200      	movs	r2, #0
 8002694:	2106      	movs	r1, #6
 8002696:	4845      	ldr	r0, [pc, #276]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002698:	f7ff fda0 	bl	80021dc <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 800269c:	2101      	movs	r1, #1
 800269e:	4844      	ldr	r0, [pc, #272]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 80026a0:	f7ff ff80 	bl	80025a4 <LL_USART_DMA_GetRegAddr>
 80026a4:	4604      	mov	r4, r0
 80026a6:	4d43      	ldr	r5, [pc, #268]	; (80027b4 <MX_USART2_UART_Init+0x1c0>)
 80026a8:	2106      	movs	r1, #6
 80026aa:	4840      	ldr	r0, [pc, #256]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 80026ac:	f7ff fcee 	bl	800208c <LL_DMA_GetDataTransferDirection>
 80026b0:	4603      	mov	r3, r0
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	462b      	mov	r3, r5
 80026b6:	4622      	mov	r2, r4
 80026b8:	2106      	movs	r1, #6
 80026ba:	483c      	ldr	r0, [pc, #240]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 80026bc:	f7ff fe10 	bl	80022e0 <LL_DMA_ConfigAddresses>
  						 LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  						 (uint32_t)bufferUSART2dma,
  						 LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80026c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026c4:	2106      	movs	r1, #6
 80026c6:	4839      	ldr	r0, [pc, #228]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 80026c8:	f7ff fdd0 	bl	800226c <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80026cc:	2106      	movs	r1, #6
 80026ce:	4837      	ldr	r0, [pc, #220]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 80026d0:	f7ff fc76 	bl	8001fc0 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80026d4:	4836      	ldr	r0, [pc, #216]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 80026d6:	f7ff ff45 	bl	8002564 <LL_USART_EnableDMAReq_RX>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80026da:	2106      	movs	r1, #6
 80026dc:	4833      	ldr	r0, [pc, #204]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 80026de:	f7ff fe6b 	bl	80023b8 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80026e2:	2106      	movs	r1, #6
 80026e4:	4831      	ldr	r0, [pc, #196]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 80026e6:	f7ff fe87 	bl	80023f8 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80026ea:	2210      	movs	r2, #16
 80026ec:	2107      	movs	r1, #7
 80026ee:	482f      	ldr	r0, [pc, #188]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 80026f0:	f7ff fca6 	bl	8002040 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80026f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026f8:	2107      	movs	r1, #7
 80026fa:	482c      	ldr	r0, [pc, #176]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 80026fc:	f7ff fd92 	bl	8002224 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002700:	2200      	movs	r2, #0
 8002702:	2107      	movs	r1, #7
 8002704:	4829      	ldr	r0, [pc, #164]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002706:	f7ff fcd9 	bl	80020bc <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800270a:	2200      	movs	r2, #0
 800270c:	2107      	movs	r1, #7
 800270e:	4827      	ldr	r0, [pc, #156]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002710:	f7ff fcf8 	bl	8002104 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	2107      	movs	r1, #7
 8002718:	4824      	ldr	r0, [pc, #144]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 800271a:	f7ff fd17 	bl	800214c <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800271e:	2200      	movs	r2, #0
 8002720:	2107      	movs	r1, #7
 8002722:	4822      	ldr	r0, [pc, #136]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002724:	f7ff fd36 	bl	8002194 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002728:	2200      	movs	r2, #0
 800272a:	2107      	movs	r1, #7
 800272c:	481f      	ldr	r0, [pc, #124]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 800272e:	f7ff fd55 	bl	80021dc <LL_DMA_SetMemorySize>

    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002732:	2100      	movs	r1, #0
 8002734:	481e      	ldr	r0, [pc, #120]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 8002736:	f7ff ff35 	bl	80025a4 <LL_USART_DMA_GetRegAddr>
 800273a:	4603      	mov	r3, r0
 800273c:	461a      	mov	r2, r3
 800273e:	2107      	movs	r1, #7
 8002740:	481a      	ldr	r0, [pc, #104]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002742:	f7ff fe21 	bl	8002388 <LL_DMA_SetPeriphAddress>
    LL_USART_EnableDMAReq_TX(USART2);
 8002746:	481a      	ldr	r0, [pc, #104]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 8002748:	f7ff ff1c 	bl	8002584 <LL_USART_EnableDMAReq_TX>

    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800274c:	2107      	movs	r1, #7
 800274e:	4817      	ldr	r0, [pc, #92]	; (80027ac <MX_USART2_UART_Init+0x1b8>)
 8002750:	f7ff fe72 	bl	8002438 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002754:	2100      	movs	r1, #0
 8002756:	2026      	movs	r0, #38	; 0x26
 8002758:	f7ff fc08 	bl	8001f6c <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800275c:	2026      	movs	r0, #38	; 0x26
 800275e:	f7ff fbeb 	bl	8001f38 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002762:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002766:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002774:	230c      	movs	r3, #12
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	4619      	mov	r1, r3
 8002786:	480a      	ldr	r0, [pc, #40]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 8002788:	f7fe fd7a 	bl	8001280 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800278c:	4808      	ldr	r0, [pc, #32]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 800278e:	f7ff feb3 	bl	80024f8 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8002792:	4807      	ldr	r0, [pc, #28]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 8002794:	f7ff fed6 	bl	8002544 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/

  	  //type your code here:

  LL_USART_EnableIT_IDLE(USART2);
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 800279a:	f7ff fec3 	bl	8002524 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 800279e:	4804      	ldr	r0, [pc, #16]	; (80027b0 <MX_USART2_UART_Init+0x1bc>)
 80027a0:	f7ff fe9a 	bl	80024d8 <LL_USART_Enable>
}
 80027a4:	bf00      	nop
 80027a6:	3738      	adds	r7, #56	; 0x38
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bdb0      	pop	{r4, r5, r7, pc}
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40004400 	.word	0x40004400
 80027b4:	200000b0 	.word	0x200000b0

080027b8 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	461a      	mov	r2, r3
 80027c8:	2107      	movs	r1, #7
 80027ca:	480a      	ldr	r0, [pc, #40]	; (80027f4 <USART2_PutBuffer+0x3c>)
 80027cc:	f7ff fdc4 	bl	8002358 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	461a      	mov	r2, r3
 80027d4:	2107      	movs	r1, #7
 80027d6:	4807      	ldr	r0, [pc, #28]	; (80027f4 <USART2_PutBuffer+0x3c>)
 80027d8:	f7ff fd48 	bl	800226c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80027dc:	2107      	movs	r1, #7
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <USART2_PutBuffer+0x3c>)
 80027e0:	f7ff fdea 	bl	80023b8 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80027e4:	2107      	movs	r1, #7
 80027e6:	4803      	ldr	r0, [pc, #12]	; (80027f4 <USART2_PutBuffer+0x3c>)
 80027e8:	f7ff fbea 	bl	8001fc0 <LL_DMA_EnableChannel>
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40020000 	.word	0x40020000

080027f8 <USART2_CheckDmaReception>:
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */

void USART2_CheckDmaReception(void)
{
 80027f8:	b5b0      	push	{r4, r5, r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af02      	add	r7, sp, #8
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 80027fe:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <USART2_CheckDmaReception+0xf4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d06e      	beq.n	80028e4 <USART2_CheckDmaReception+0xec>

		static uint16_t old_pos = 0;

		uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002806:	2106      	movs	r1, #6
 8002808:	4839      	ldr	r0, [pc, #228]	; (80028f0 <USART2_CheckDmaReception+0xf8>)
 800280a:	f7ff fd53 	bl	80022b4 <LL_DMA_GetDataLength>
 800280e:	4603      	mov	r3, r0
 8002810:	b29b      	uxth	r3, r3
 8002812:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002816:	80fb      	strh	r3, [r7, #6]

		occupied_memory=pos;
 8002818:	4a36      	ldr	r2, [pc, #216]	; (80028f4 <USART2_CheckDmaReception+0xfc>)
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	8013      	strh	r3, [r2, #0]
		load=(float)(occupied_memory)/(float)(DMA_USART2_BUFFER_SIZE)*100.0;
 800281e:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <USART2_CheckDmaReception+0xfc>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800282a:	eddf 6a33 	vldr	s13, [pc, #204]	; 80028f8 <USART2_CheckDmaReception+0x100>
 800282e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002832:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80028fc <USART2_CheckDmaReception+0x104>
 8002836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283a:	4b31      	ldr	r3, [pc, #196]	; (8002900 <USART2_CheckDmaReception+0x108>)
 800283c:	edc3 7a00 	vstr	s15, [r3]

		if (pos != old_pos)
 8002840:	4b30      	ldr	r3, [pc, #192]	; (8002904 <USART2_CheckDmaReception+0x10c>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	429a      	cmp	r2, r3
 8002848:	d04d      	beq.n	80028e6 <USART2_CheckDmaReception+0xee>
		{
			if (pos < (DMA_USART2_BUFFER_SIZE-20))
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	2beb      	cmp	r3, #235	; 0xeb
 800284e:	d811      	bhi.n	8002874 <USART2_CheckDmaReception+0x7c>
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8002850:	4b26      	ldr	r3, [pc, #152]	; (80028ec <USART2_CheckDmaReception+0xf4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <USART2_CheckDmaReception+0x10c>)
 8002856:	8812      	ldrh	r2, [r2, #0]
 8002858:	4611      	mov	r1, r2
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <USART2_CheckDmaReception+0x110>)
 800285c:	1888      	adds	r0, r1, r2
 800285e:	4a29      	ldr	r2, [pc, #164]	; (8002904 <USART2_CheckDmaReception+0x10c>)
 8002860:	8812      	ldrh	r2, [r2, #0]
 8002862:	88f9      	ldrh	r1, [r7, #6]
 8002864:	1a8a      	subs	r2, r1, r2
 8002866:	b292      	uxth	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4798      	blx	r3
				old_pos = pos;
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <USART2_CheckDmaReception+0x10c>)
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	8013      	strh	r3, [r2, #0]
 8002872:	e038      	b.n	80028e6 <USART2_CheckDmaReception+0xee>
			}
			else
			{


				USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <USART2_CheckDmaReception+0xf4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a22      	ldr	r2, [pc, #136]	; (8002904 <USART2_CheckDmaReception+0x10c>)
 800287a:	8812      	ldrh	r2, [r2, #0]
 800287c:	4611      	mov	r1, r2
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <USART2_CheckDmaReception+0x110>)
 8002880:	1888      	adds	r0, r1, r2
 8002882:	4a20      	ldr	r2, [pc, #128]	; (8002904 <USART2_CheckDmaReception+0x10c>)
 8002884:	8812      	ldrh	r2, [r2, #0]
 8002886:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800288a:	b292      	uxth	r2, r2
 800288c:	4611      	mov	r1, r2
 800288e:	4798      	blx	r3
				//clear bufferUSART2dma
				memset(bufferUSART2dma, 0, DMA_USART2_BUFFER_SIZE);
 8002890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002894:	2100      	movs	r1, #0
 8002896:	481c      	ldr	r0, [pc, #112]	; (8002908 <USART2_CheckDmaReception+0x110>)
 8002898:	f000 f8b2 	bl	8002a00 <memset>

				// as was mentioned in datasheet first needs to be disabled
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 800289c:	2106      	movs	r1, #6
 800289e:	4814      	ldr	r0, [pc, #80]	; (80028f0 <USART2_CheckDmaReception+0xf8>)
 80028a0:	f7ff fbae 	bl	8002000 <LL_DMA_DisableChannel>

				// them reconfigure
				LL_DMA_ConfigAddresses(     DMA1, LL_DMA_CHANNEL_6,
 80028a4:	2101      	movs	r1, #1
 80028a6:	4819      	ldr	r0, [pc, #100]	; (800290c <USART2_CheckDmaReception+0x114>)
 80028a8:	f7ff fe7c 	bl	80025a4 <LL_USART_DMA_GetRegAddr>
 80028ac:	4604      	mov	r4, r0
 80028ae:	4d16      	ldr	r5, [pc, #88]	; (8002908 <USART2_CheckDmaReception+0x110>)
 80028b0:	2106      	movs	r1, #6
 80028b2:	480f      	ldr	r0, [pc, #60]	; (80028f0 <USART2_CheckDmaReception+0xf8>)
 80028b4:	f7ff fbea 	bl	800208c <LL_DMA_GetDataTransferDirection>
 80028b8:	4603      	mov	r3, r0
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	462b      	mov	r3, r5
 80028be:	4622      	mov	r2, r4
 80028c0:	2106      	movs	r1, #6
 80028c2:	480b      	ldr	r0, [pc, #44]	; (80028f0 <USART2_CheckDmaReception+0xf8>)
 80028c4:	f7ff fd0c 	bl	80022e0 <LL_DMA_ConfigAddresses>
											LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
											(uint32_t)bufferUSART2dma,
											LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
				LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80028c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028cc:	2106      	movs	r1, #6
 80028ce:	4808      	ldr	r0, [pc, #32]	; (80028f0 <USART2_CheckDmaReception+0xf8>)
 80028d0:	f7ff fccc 	bl	800226c <LL_DMA_SetDataLength>

				//lastly enabled
				LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80028d4:	2106      	movs	r1, #6
 80028d6:	4806      	ldr	r0, [pc, #24]	; (80028f0 <USART2_CheckDmaReception+0xf8>)
 80028d8:	f7ff fb72 	bl	8001fc0 <LL_DMA_EnableChannel>

				old_pos = 0;
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <USART2_CheckDmaReception+0x10c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	801a      	strh	r2, [r3, #0]
 80028e2:	e000      	b.n	80028e6 <USART2_CheckDmaReception+0xee>
	if(USART2_ProcessData == 0) return;
 80028e4:	bf00      	nop

			}
		}
}
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bdb0      	pop	{r4, r5, r7, pc}
 80028ec:	20000098 	.word	0x20000098
 80028f0:	40020000 	.word	0x40020000
 80028f4:	200000a8 	.word	0x200000a8
 80028f8:	43800000 	.word	0x43800000
 80028fc:	42c80000 	.word	0x42c80000
 8002900:	200000ac 	.word	0x200000ac
 8002904:	2000009c 	.word	0x2000009c
 8002908:	200000b0 	.word	0x200000b0
 800290c:	40004400 	.word	0x40004400

08002910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002948 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002914:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002916:	e003      	b.n	8002920 <LoopCopyDataInit>

08002918 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800291a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800291c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800291e:	3104      	adds	r1, #4

08002920 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002920:	480b      	ldr	r0, [pc, #44]	; (8002950 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002924:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002926:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002928:	d3f6      	bcc.n	8002918 <CopyDataInit>
	ldr	r2, =_sbss
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <LoopForever+0x12>)
	b	LoopFillZerobss
 800292c:	e002      	b.n	8002934 <LoopFillZerobss>

0800292e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800292e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002930:	f842 3b04 	str.w	r3, [r2], #4

08002934 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <LoopForever+0x16>)
	cmp	r2, r3
 8002936:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002938:	d3f9      	bcc.n	800292e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800293a:	f7ff fab3 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800293e:	f000 f83b 	bl	80029b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002942:	f7fe ff53 	bl	80017ec <main>

08002946 <LoopForever>:

LoopForever:
    b LoopForever
 8002946:	e7fe      	b.n	8002946 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002948:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800294c:	08005764 	.word	0x08005764
	ldr	r0, =_sdata
 8002950:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002954:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002958:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 800295c:	200001c0 	.word	0x200001c0

08002960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_2_IRQHandler>
	...

08002964 <gcvt>:
 8002964:	b530      	push	{r4, r5, lr}
 8002966:	2200      	movs	r2, #0
 8002968:	b085      	sub	sp, #20
 800296a:	460c      	mov	r4, r1
 800296c:	4605      	mov	r5, r0
 800296e:	2300      	movs	r3, #0
 8002970:	ec51 0b10 	vmov	r0, r1, d0
 8002974:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002978:	f7fe f8a8 	bl	8000acc <__aeabi_dcmplt>
 800297c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8002980:	4622      	mov	r2, r4
 8002982:	b118      	cbz	r0, 800298c <gcvt+0x28>
 8002984:	232d      	movs	r3, #45	; 0x2d
 8002986:	f802 3b01 	strb.w	r3, [r2], #1
 800298a:	3d01      	subs	r5, #1
 800298c:	2300      	movs	r3, #0
 800298e:	4806      	ldr	r0, [pc, #24]	; (80029a8 <gcvt+0x44>)
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	4629      	mov	r1, r5
 8002994:	2367      	movs	r3, #103	; 0x67
 8002996:	6800      	ldr	r0, [r0, #0]
 8002998:	f000 f8d2 	bl	8002b40 <_gcvt>
 800299c:	2800      	cmp	r0, #0
 800299e:	bf14      	ite	ne
 80029a0:	4620      	movne	r0, r4
 80029a2:	2000      	moveq	r0, #0
 80029a4:	b005      	add	sp, #20
 80029a6:	bd30      	pop	{r4, r5, pc}
 80029a8:	20000004 	.word	0x20000004

080029ac <__errno>:
 80029ac:	4b01      	ldr	r3, [pc, #4]	; (80029b4 <__errno+0x8>)
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000004 	.word	0x20000004

080029b8 <__libc_init_array>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	4d0d      	ldr	r5, [pc, #52]	; (80029f0 <__libc_init_array+0x38>)
 80029bc:	4c0d      	ldr	r4, [pc, #52]	; (80029f4 <__libc_init_array+0x3c>)
 80029be:	1b64      	subs	r4, r4, r5
 80029c0:	10a4      	asrs	r4, r4, #2
 80029c2:	2600      	movs	r6, #0
 80029c4:	42a6      	cmp	r6, r4
 80029c6:	d109      	bne.n	80029dc <__libc_init_array+0x24>
 80029c8:	4d0b      	ldr	r5, [pc, #44]	; (80029f8 <__libc_init_array+0x40>)
 80029ca:	4c0c      	ldr	r4, [pc, #48]	; (80029fc <__libc_init_array+0x44>)
 80029cc:	f002 fd1a 	bl	8005404 <_init>
 80029d0:	1b64      	subs	r4, r4, r5
 80029d2:	10a4      	asrs	r4, r4, #2
 80029d4:	2600      	movs	r6, #0
 80029d6:	42a6      	cmp	r6, r4
 80029d8:	d105      	bne.n	80029e6 <__libc_init_array+0x2e>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e0:	4798      	blx	r3
 80029e2:	3601      	adds	r6, #1
 80029e4:	e7ee      	b.n	80029c4 <__libc_init_array+0xc>
 80029e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ea:	4798      	blx	r3
 80029ec:	3601      	adds	r6, #1
 80029ee:	e7f2      	b.n	80029d6 <__libc_init_array+0x1e>
 80029f0:	0800575c 	.word	0x0800575c
 80029f4:	0800575c 	.word	0x0800575c
 80029f8:	0800575c 	.word	0x0800575c
 80029fc:	08005760 	.word	0x08005760

08002a00 <memset>:
 8002a00:	4402      	add	r2, r0
 8002a02:	4603      	mov	r3, r0
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memset+0xa>
 8002a08:	4770      	bx	lr
 8002a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0e:	e7f9      	b.n	8002a04 <memset+0x4>

08002a10 <siprintf>:
 8002a10:	b40e      	push	{r1, r2, r3}
 8002a12:	b500      	push	{lr}
 8002a14:	b09c      	sub	sp, #112	; 0x70
 8002a16:	ab1d      	add	r3, sp, #116	; 0x74
 8002a18:	9002      	str	r0, [sp, #8]
 8002a1a:	9006      	str	r0, [sp, #24]
 8002a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a20:	4809      	ldr	r0, [pc, #36]	; (8002a48 <siprintf+0x38>)
 8002a22:	9107      	str	r1, [sp, #28]
 8002a24:	9104      	str	r1, [sp, #16]
 8002a26:	4909      	ldr	r1, [pc, #36]	; (8002a4c <siprintf+0x3c>)
 8002a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a2c:	9105      	str	r1, [sp, #20]
 8002a2e:	6800      	ldr	r0, [r0, #0]
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	a902      	add	r1, sp, #8
 8002a34:	f000 fdcc 	bl	80035d0 <_svfiprintf_r>
 8002a38:	9b02      	ldr	r3, [sp, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	b01c      	add	sp, #112	; 0x70
 8002a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a44:	b003      	add	sp, #12
 8002a46:	4770      	bx	lr
 8002a48:	20000004 	.word	0x20000004
 8002a4c:	ffff0208 	.word	0xffff0208

08002a50 <print_e>:
 8002a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a52:	b087      	sub	sp, #28
 8002a54:	ec43 2b10 	vmov	d0, r2, r3
 8002a58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002a5a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8002a5e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002a60:	ab04      	add	r3, sp, #16
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	ab03      	add	r3, sp, #12
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	1c62      	adds	r2, r4, #1
 8002a6a:	ab05      	add	r3, sp, #20
 8002a6c:	460f      	mov	r7, r1
 8002a6e:	2102      	movs	r1, #2
 8002a70:	f001 f906 	bl	8003c80 <_dtoa_r>
 8002a74:	9a05      	ldr	r2, [sp, #20]
 8002a76:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d105      	bne.n	8002a8a <print_e+0x3a>
 8002a7e:	4601      	mov	r1, r0
 8002a80:	4638      	mov	r0, r7
 8002a82:	f001 f849 	bl	8003b18 <strcpy>
 8002a86:	b007      	add	sp, #28
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	7801      	ldrb	r1, [r0, #0]
 8002a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a92:	2c00      	cmp	r4, #0
 8002a94:	bfc8      	it	gt
 8002a96:	2501      	movgt	r5, #1
 8002a98:	212e      	movs	r1, #46	; 0x2e
 8002a9a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8002a9e:	b10f      	cbz	r7, 8002aa4 <print_e+0x54>
 8002aa0:	2c00      	cmp	r4, #0
 8002aa2:	dc37      	bgt.n	8002b14 <print_e+0xc4>
 8002aa4:	2e67      	cmp	r6, #103	; 0x67
 8002aa6:	d046      	beq.n	8002b36 <print_e+0xe6>
 8002aa8:	2e47      	cmp	r6, #71	; 0x47
 8002aaa:	d046      	beq.n	8002b3a <print_e+0xea>
 8002aac:	212e      	movs	r1, #46	; 0x2e
 8002aae:	2030      	movs	r0, #48	; 0x30
 8002ab0:	2c00      	cmp	r4, #0
 8002ab2:	dc38      	bgt.n	8002b26 <print_e+0xd6>
 8002ab4:	1e51      	subs	r1, r2, #1
 8002ab6:	2900      	cmp	r1, #0
 8002ab8:	bfb8      	it	lt
 8002aba:	f1c2 0201 	rsblt	r2, r2, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	9105      	str	r1, [sp, #20]
 8002ac2:	bfbc      	itt	lt
 8002ac4:	212d      	movlt	r1, #45	; 0x2d
 8002ac6:	9205      	strlt	r2, [sp, #20]
 8002ac8:	f800 6b02 	strb.w	r6, [r0], #2
 8002acc:	bfb8      	it	lt
 8002ace:	7059      	strblt	r1, [r3, #1]
 8002ad0:	9905      	ldr	r1, [sp, #20]
 8002ad2:	bfa4      	itt	ge
 8002ad4:	222b      	movge	r2, #43	; 0x2b
 8002ad6:	705a      	strbge	r2, [r3, #1]
 8002ad8:	2963      	cmp	r1, #99	; 0x63
 8002ada:	dd0b      	ble.n	8002af4 <print_e+0xa4>
 8002adc:	2264      	movs	r2, #100	; 0x64
 8002ade:	fb91 f2f2 	sdiv	r2, r1, r2
 8002ae2:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8002ae6:	1cd8      	adds	r0, r3, #3
 8002ae8:	709c      	strb	r4, [r3, #2]
 8002aea:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002aee:	fb03 1202 	mla	r2, r3, r2, r1
 8002af2:	9205      	str	r2, [sp, #20]
 8002af4:	9a05      	ldr	r2, [sp, #20]
 8002af6:	230a      	movs	r3, #10
 8002af8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002afc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002b00:	7001      	strb	r1, [r0, #0]
 8002b02:	f06f 0109 	mvn.w	r1, #9
 8002b06:	fb01 2303 	mla	r3, r1, r3, r2
 8002b0a:	3330      	adds	r3, #48	; 0x30
 8002b0c:	7043      	strb	r3, [r0, #1]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	7083      	strb	r3, [r0, #2]
 8002b12:	e7b8      	b.n	8002a86 <print_e+0x36>
 8002b14:	b10d      	cbz	r5, 8002b1a <print_e+0xca>
 8002b16:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1a:	7805      	ldrb	r5, [r0, #0]
 8002b1c:	f803 5b01 	strb.w	r5, [r3], #1
 8002b20:	3c01      	subs	r4, #1
 8002b22:	2500      	movs	r5, #0
 8002b24:	e7b9      	b.n	8002a9a <print_e+0x4a>
 8002b26:	b10d      	cbz	r5, 8002b2c <print_e+0xdc>
 8002b28:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2c:	f803 0b01 	strb.w	r0, [r3], #1
 8002b30:	3c01      	subs	r4, #1
 8002b32:	2500      	movs	r5, #0
 8002b34:	e7bc      	b.n	8002ab0 <print_e+0x60>
 8002b36:	2665      	movs	r6, #101	; 0x65
 8002b38:	e7bc      	b.n	8002ab4 <print_e+0x64>
 8002b3a:	2645      	movs	r6, #69	; 0x45
 8002b3c:	e7ba      	b.n	8002ab4 <print_e+0x64>
	...

08002b40 <_gcvt>:
 8002b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b44:	ec55 4b10 	vmov	r4, r5, d0
 8002b48:	b088      	sub	sp, #32
 8002b4a:	4681      	mov	r9, r0
 8002b4c:	4688      	mov	r8, r1
 8002b4e:	4616      	mov	r6, r2
 8002b50:	469a      	mov	sl, r3
 8002b52:	ee10 0a10 	vmov	r0, s0
 8002b56:	2200      	movs	r2, #0
 8002b58:	2300      	movs	r3, #0
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002b5e:	f7fd ffb5 	bl	8000acc <__aeabi_dcmplt>
 8002b62:	b110      	cbz	r0, 8002b6a <_gcvt+0x2a>
 8002b64:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002b68:	461d      	mov	r5, r3
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	4620      	mov	r0, r4
 8002b70:	4629      	mov	r1, r5
 8002b72:	f7fd ffa1 	bl	8000ab8 <__aeabi_dcmpeq>
 8002b76:	b138      	cbz	r0, 8002b88 <_gcvt+0x48>
 8002b78:	2330      	movs	r3, #48	; 0x30
 8002b7a:	7033      	strb	r3, [r6, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	7073      	strb	r3, [r6, #1]
 8002b80:	4630      	mov	r0, r6
 8002b82:	b008      	add	sp, #32
 8002b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b88:	a34b      	add	r3, pc, #300	; (adr r3, 8002cb8 <_gcvt+0x178>)
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	4620      	mov	r0, r4
 8002b90:	4629      	mov	r1, r5
 8002b92:	f7fd ffa5 	bl	8000ae0 <__aeabi_dcmple>
 8002b96:	b158      	cbz	r0, 8002bb0 <_gcvt+0x70>
 8002b98:	f108 31ff 	add.w	r1, r8, #4294967295
 8002b9c:	9100      	str	r1, [sp, #0]
 8002b9e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	4631      	mov	r1, r6
 8002ba8:	4648      	mov	r0, r9
 8002baa:	f7ff ff51 	bl	8002a50 <print_e>
 8002bae:	e7e7      	b.n	8002b80 <_gcvt+0x40>
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	f000 fc03 	bl	80033bc <_mprec_log10>
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	ec51 0b10 	vmov	r0, r1, d0
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	f7fd ff8f 	bl	8000ae0 <__aeabi_dcmple>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d1e8      	bne.n	8002b98 <_gcvt+0x58>
 8002bc6:	ab07      	add	r3, sp, #28
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	ab06      	add	r3, sp, #24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	4642      	mov	r2, r8
 8002bd0:	ab05      	add	r3, sp, #20
 8002bd2:	ec45 4b10 	vmov	d0, r4, r5
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4648      	mov	r0, r9
 8002bda:	f001 f851 	bl	8003c80 <_dtoa_r>
 8002bde:	9a05      	ldr	r2, [sp, #20]
 8002be0:	f242 730f 	movw	r3, #9999	; 0x270f
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d00e      	beq.n	8002c06 <_gcvt+0xc6>
 8002be8:	4633      	mov	r3, r6
 8002bea:	44b0      	add	r8, r6
 8002bec:	4604      	mov	r4, r0
 8002bee:	f810 5b01 	ldrb.w	r5, [r0], #1
 8002bf2:	9905      	ldr	r1, [sp, #20]
 8002bf4:	eba8 0203 	sub.w	r2, r8, r3
 8002bf8:	b10d      	cbz	r5, 8002bfe <_gcvt+0xbe>
 8002bfa:	2900      	cmp	r1, #0
 8002bfc:	dc08      	bgt.n	8002c10 <_gcvt+0xd0>
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8002c04:	e00d      	b.n	8002c22 <_gcvt+0xe2>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4630      	mov	r0, r6
 8002c0a:	f000 ff85 	bl	8003b18 <strcpy>
 8002c0e:	e7b7      	b.n	8002b80 <_gcvt+0x40>
 8002c10:	3901      	subs	r1, #1
 8002c12:	f803 5b01 	strb.w	r5, [r3], #1
 8002c16:	9105      	str	r1, [sp, #20]
 8002c18:	e7e8      	b.n	8002bec <_gcvt+0xac>
 8002c1a:	f803 cb01 	strb.w	ip, [r3], #1
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	2001      	movs	r0, #1
 8002c22:	2900      	cmp	r1, #0
 8002c24:	460d      	mov	r5, r1
 8002c26:	dc2a      	bgt.n	8002c7e <_gcvt+0x13e>
 8002c28:	b100      	cbz	r0, 8002c2c <_gcvt+0xec>
 8002c2a:	9105      	str	r1, [sp, #20]
 8002c2c:	b90f      	cbnz	r7, 8002c32 <_gcvt+0xf2>
 8002c2e:	7821      	ldrb	r1, [r4, #0]
 8002c30:	b311      	cbz	r1, 8002c78 <_gcvt+0x138>
 8002c32:	42b3      	cmp	r3, r6
 8002c34:	bf04      	itt	eq
 8002c36:	2130      	moveq	r1, #48	; 0x30
 8002c38:	f803 1b01 	strbeq.w	r1, [r3], #1
 8002c3c:	212e      	movs	r1, #46	; 0x2e
 8002c3e:	7019      	strb	r1, [r3, #0]
 8002c40:	9905      	ldr	r1, [sp, #20]
 8002c42:	4618      	mov	r0, r3
 8002c44:	2500      	movs	r5, #0
 8002c46:	eba1 0c03 	sub.w	ip, r1, r3
 8002c4a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002c4e:	eb1c 0f00 	cmn.w	ip, r0
 8002c52:	d41c      	bmi.n	8002c8e <_gcvt+0x14e>
 8002c54:	2900      	cmp	r1, #0
 8002c56:	f1c1 0000 	rsb	r0, r1, #0
 8002c5a:	bfc8      	it	gt
 8002c5c:	2000      	movgt	r0, #0
 8002c5e:	f100 0c01 	add.w	ip, r0, #1
 8002c62:	4463      	add	r3, ip
 8002c64:	4401      	add	r1, r0
 8002c66:	b105      	cbz	r5, 8002c6a <_gcvt+0x12a>
 8002c68:	9105      	str	r1, [sp, #20]
 8002c6a:	1e61      	subs	r1, r4, #1
 8002c6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002c70:	b108      	cbz	r0, 8002c76 <_gcvt+0x136>
 8002c72:	2a00      	cmp	r2, #0
 8002c74:	dc0f      	bgt.n	8002c96 <_gcvt+0x156>
 8002c76:	b9df      	cbnz	r7, 8002cb0 <_gcvt+0x170>
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e780      	b.n	8002b80 <_gcvt+0x40>
 8002c7e:	2a00      	cmp	r2, #0
 8002c80:	f101 31ff 	add.w	r1, r1, #4294967295
 8002c84:	dcc9      	bgt.n	8002c1a <_gcvt+0xda>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d0d0      	beq.n	8002c2c <_gcvt+0xec>
 8002c8a:	9505      	str	r5, [sp, #20]
 8002c8c:	e7ce      	b.n	8002c2c <_gcvt+0xec>
 8002c8e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8002c92:	2501      	movs	r5, #1
 8002c94:	e7db      	b.n	8002c4e <_gcvt+0x10e>
 8002c96:	f803 0b01 	strb.w	r0, [r3], #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	e7e6      	b.n	8002c6c <_gcvt+0x12c>
 8002c9e:	f801 5b01 	strb.w	r5, [r1], #1
 8002ca2:	1a60      	subs	r0, r4, r1
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	dcfa      	bgt.n	8002c9e <_gcvt+0x15e>
 8002ca8:	2a00      	cmp	r2, #0
 8002caa:	bfa8      	it	ge
 8002cac:	189b      	addge	r3, r3, r2
 8002cae:	e7e3      	b.n	8002c78 <_gcvt+0x138>
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	189c      	adds	r4, r3, r2
 8002cb4:	2530      	movs	r5, #48	; 0x30
 8002cb6:	e7f4      	b.n	8002ca2 <_gcvt+0x162>
 8002cb8:	eb1c432d 	.word	0xeb1c432d
 8002cbc:	3f1a36e2 	.word	0x3f1a36e2

08002cc0 <_Balloc>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	460d      	mov	r5, r1
 8002cc8:	b976      	cbnz	r6, 8002ce8 <_Balloc+0x28>
 8002cca:	2010      	movs	r0, #16
 8002ccc:	f001 fdd6 	bl	800487c <malloc>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6260      	str	r0, [r4, #36]	; 0x24
 8002cd4:	b920      	cbnz	r0, 8002ce0 <_Balloc+0x20>
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <_Balloc+0x78>)
 8002cd8:	4818      	ldr	r0, [pc, #96]	; (8002d3c <_Balloc+0x7c>)
 8002cda:	2166      	movs	r1, #102	; 0x66
 8002cdc:	f000 ff24 	bl	8003b28 <__assert_func>
 8002ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8002ce4:	6006      	str	r6, [r0, #0]
 8002ce6:	60c6      	str	r6, [r0, #12]
 8002ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002cea:	68f3      	ldr	r3, [r6, #12]
 8002cec:	b183      	cbz	r3, 8002d10 <_Balloc+0x50>
 8002cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002cf6:	b9b8      	cbnz	r0, 8002d28 <_Balloc+0x68>
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8002cfe:	1d72      	adds	r2, r6, #5
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	4620      	mov	r0, r4
 8002d04:	f000 fb78 	bl	80033f8 <_calloc_r>
 8002d08:	b160      	cbz	r0, 8002d24 <_Balloc+0x64>
 8002d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8002d0e:	e00e      	b.n	8002d2e <_Balloc+0x6e>
 8002d10:	2221      	movs	r2, #33	; 0x21
 8002d12:	2104      	movs	r1, #4
 8002d14:	4620      	mov	r0, r4
 8002d16:	f000 fb6f 	bl	80033f8 <_calloc_r>
 8002d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d1c:	60f0      	str	r0, [r6, #12]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e4      	bne.n	8002cee <_Balloc+0x2e>
 8002d24:	2000      	movs	r0, #0
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	6802      	ldr	r2, [r0, #0]
 8002d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002d34:	e7f7      	b.n	8002d26 <_Balloc+0x66>
 8002d36:	bf00      	nop
 8002d38:	08005498 	.word	0x08005498
 8002d3c:	080054af 	.word	0x080054af

08002d40 <_Bfree>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002d44:	4605      	mov	r5, r0
 8002d46:	460c      	mov	r4, r1
 8002d48:	b976      	cbnz	r6, 8002d68 <_Bfree+0x28>
 8002d4a:	2010      	movs	r0, #16
 8002d4c:	f001 fd96 	bl	800487c <malloc>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6268      	str	r0, [r5, #36]	; 0x24
 8002d54:	b920      	cbnz	r0, 8002d60 <_Bfree+0x20>
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <_Bfree+0x3c>)
 8002d58:	4809      	ldr	r0, [pc, #36]	; (8002d80 <_Bfree+0x40>)
 8002d5a:	218a      	movs	r1, #138	; 0x8a
 8002d5c:	f000 fee4 	bl	8003b28 <__assert_func>
 8002d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8002d64:	6006      	str	r6, [r0, #0]
 8002d66:	60c6      	str	r6, [r0, #12]
 8002d68:	b13c      	cbz	r4, 8002d7a <_Bfree+0x3a>
 8002d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002d6c:	6862      	ldr	r2, [r4, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d74:	6021      	str	r1, [r4, #0]
 8002d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	08005498 	.word	0x08005498
 8002d80:	080054af 	.word	0x080054af

08002d84 <__multadd>:
 8002d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d88:	690e      	ldr	r6, [r1, #16]
 8002d8a:	4607      	mov	r7, r0
 8002d8c:	4698      	mov	r8, r3
 8002d8e:	460c      	mov	r4, r1
 8002d90:	f101 0014 	add.w	r0, r1, #20
 8002d94:	2300      	movs	r3, #0
 8002d96:	6805      	ldr	r5, [r0, #0]
 8002d98:	b2a9      	uxth	r1, r5
 8002d9a:	fb02 8101 	mla	r1, r2, r1, r8
 8002d9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8002da2:	0c2d      	lsrs	r5, r5, #16
 8002da4:	fb02 c505 	mla	r5, r2, r5, ip
 8002da8:	b289      	uxth	r1, r1
 8002daa:	3301      	adds	r3, #1
 8002dac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8002db0:	429e      	cmp	r6, r3
 8002db2:	f840 1b04 	str.w	r1, [r0], #4
 8002db6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8002dba:	dcec      	bgt.n	8002d96 <__multadd+0x12>
 8002dbc:	f1b8 0f00 	cmp.w	r8, #0
 8002dc0:	d022      	beq.n	8002e08 <__multadd+0x84>
 8002dc2:	68a3      	ldr	r3, [r4, #8]
 8002dc4:	42b3      	cmp	r3, r6
 8002dc6:	dc19      	bgt.n	8002dfc <__multadd+0x78>
 8002dc8:	6861      	ldr	r1, [r4, #4]
 8002dca:	4638      	mov	r0, r7
 8002dcc:	3101      	adds	r1, #1
 8002dce:	f7ff ff77 	bl	8002cc0 <_Balloc>
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	b928      	cbnz	r0, 8002de2 <__multadd+0x5e>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <__multadd+0x8c>)
 8002dda:	480e      	ldr	r0, [pc, #56]	; (8002e14 <__multadd+0x90>)
 8002ddc:	21b5      	movs	r1, #181	; 0xb5
 8002dde:	f000 fea3 	bl	8003b28 <__assert_func>
 8002de2:	6922      	ldr	r2, [r4, #16]
 8002de4:	3202      	adds	r2, #2
 8002de6:	f104 010c 	add.w	r1, r4, #12
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	300c      	adds	r0, #12
 8002dee:	f001 fd4d 	bl	800488c <memcpy>
 8002df2:	4621      	mov	r1, r4
 8002df4:	4638      	mov	r0, r7
 8002df6:	f7ff ffa3 	bl	8002d40 <_Bfree>
 8002dfa:	462c      	mov	r4, r5
 8002dfc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8002e00:	3601      	adds	r6, #1
 8002e02:	f8c3 8014 	str.w	r8, [r3, #20]
 8002e06:	6126      	str	r6, [r4, #16]
 8002e08:	4620      	mov	r0, r4
 8002e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e0e:	bf00      	nop
 8002e10:	0800550f 	.word	0x0800550f
 8002e14:	080054af 	.word	0x080054af

08002e18 <__hi0bits>:
 8002e18:	0c03      	lsrs	r3, r0, #16
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	b9d3      	cbnz	r3, 8002e54 <__hi0bits+0x3c>
 8002e1e:	0400      	lsls	r0, r0, #16
 8002e20:	2310      	movs	r3, #16
 8002e22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8002e26:	bf04      	itt	eq
 8002e28:	0200      	lsleq	r0, r0, #8
 8002e2a:	3308      	addeq	r3, #8
 8002e2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8002e30:	bf04      	itt	eq
 8002e32:	0100      	lsleq	r0, r0, #4
 8002e34:	3304      	addeq	r3, #4
 8002e36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8002e3a:	bf04      	itt	eq
 8002e3c:	0080      	lsleq	r0, r0, #2
 8002e3e:	3302      	addeq	r3, #2
 8002e40:	2800      	cmp	r0, #0
 8002e42:	db05      	blt.n	8002e50 <__hi0bits+0x38>
 8002e44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002e48:	f103 0301 	add.w	r3, r3, #1
 8002e4c:	bf08      	it	eq
 8002e4e:	2320      	moveq	r3, #32
 8002e50:	4618      	mov	r0, r3
 8002e52:	4770      	bx	lr
 8002e54:	2300      	movs	r3, #0
 8002e56:	e7e4      	b.n	8002e22 <__hi0bits+0xa>

08002e58 <__lo0bits>:
 8002e58:	6803      	ldr	r3, [r0, #0]
 8002e5a:	f013 0207 	ands.w	r2, r3, #7
 8002e5e:	4601      	mov	r1, r0
 8002e60:	d00b      	beq.n	8002e7a <__lo0bits+0x22>
 8002e62:	07da      	lsls	r2, r3, #31
 8002e64:	d424      	bmi.n	8002eb0 <__lo0bits+0x58>
 8002e66:	0798      	lsls	r0, r3, #30
 8002e68:	bf49      	itett	mi
 8002e6a:	085b      	lsrmi	r3, r3, #1
 8002e6c:	089b      	lsrpl	r3, r3, #2
 8002e6e:	2001      	movmi	r0, #1
 8002e70:	600b      	strmi	r3, [r1, #0]
 8002e72:	bf5c      	itt	pl
 8002e74:	600b      	strpl	r3, [r1, #0]
 8002e76:	2002      	movpl	r0, #2
 8002e78:	4770      	bx	lr
 8002e7a:	b298      	uxth	r0, r3
 8002e7c:	b9b0      	cbnz	r0, 8002eac <__lo0bits+0x54>
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	2010      	movs	r0, #16
 8002e82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002e86:	bf04      	itt	eq
 8002e88:	0a1b      	lsreq	r3, r3, #8
 8002e8a:	3008      	addeq	r0, #8
 8002e8c:	071a      	lsls	r2, r3, #28
 8002e8e:	bf04      	itt	eq
 8002e90:	091b      	lsreq	r3, r3, #4
 8002e92:	3004      	addeq	r0, #4
 8002e94:	079a      	lsls	r2, r3, #30
 8002e96:	bf04      	itt	eq
 8002e98:	089b      	lsreq	r3, r3, #2
 8002e9a:	3002      	addeq	r0, #2
 8002e9c:	07da      	lsls	r2, r3, #31
 8002e9e:	d403      	bmi.n	8002ea8 <__lo0bits+0x50>
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	f100 0001 	add.w	r0, r0, #1
 8002ea6:	d005      	beq.n	8002eb4 <__lo0bits+0x5c>
 8002ea8:	600b      	str	r3, [r1, #0]
 8002eaa:	4770      	bx	lr
 8002eac:	4610      	mov	r0, r2
 8002eae:	e7e8      	b.n	8002e82 <__lo0bits+0x2a>
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	4770      	bx	lr
 8002eb4:	2020      	movs	r0, #32
 8002eb6:	4770      	bx	lr

08002eb8 <__i2b>:
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	460c      	mov	r4, r1
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	f7ff feff 	bl	8002cc0 <_Balloc>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	b928      	cbnz	r0, 8002ed2 <__i2b+0x1a>
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <__i2b+0x24>)
 8002ec8:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <__i2b+0x28>)
 8002eca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002ece:	f000 fe2b 	bl	8003b28 <__assert_func>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	6144      	str	r4, [r0, #20]
 8002ed6:	6103      	str	r3, [r0, #16]
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	bf00      	nop
 8002edc:	0800550f 	.word	0x0800550f
 8002ee0:	080054af 	.word	0x080054af

08002ee4 <__multiply>:
 8002ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee8:	4614      	mov	r4, r2
 8002eea:	690a      	ldr	r2, [r1, #16]
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	bfb8      	it	lt
 8002ef2:	460b      	movlt	r3, r1
 8002ef4:	460d      	mov	r5, r1
 8002ef6:	bfbc      	itt	lt
 8002ef8:	4625      	movlt	r5, r4
 8002efa:	461c      	movlt	r4, r3
 8002efc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8002f00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8002f04:	68ab      	ldr	r3, [r5, #8]
 8002f06:	6869      	ldr	r1, [r5, #4]
 8002f08:	eb0a 0709 	add.w	r7, sl, r9
 8002f0c:	42bb      	cmp	r3, r7
 8002f0e:	b085      	sub	sp, #20
 8002f10:	bfb8      	it	lt
 8002f12:	3101      	addlt	r1, #1
 8002f14:	f7ff fed4 	bl	8002cc0 <_Balloc>
 8002f18:	b930      	cbnz	r0, 8002f28 <__multiply+0x44>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4b42      	ldr	r3, [pc, #264]	; (8003028 <__multiply+0x144>)
 8002f1e:	4843      	ldr	r0, [pc, #268]	; (800302c <__multiply+0x148>)
 8002f20:	f240 115d 	movw	r1, #349	; 0x15d
 8002f24:	f000 fe00 	bl	8003b28 <__assert_func>
 8002f28:	f100 0614 	add.w	r6, r0, #20
 8002f2c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8002f30:	4633      	mov	r3, r6
 8002f32:	2200      	movs	r2, #0
 8002f34:	4543      	cmp	r3, r8
 8002f36:	d31e      	bcc.n	8002f76 <__multiply+0x92>
 8002f38:	f105 0c14 	add.w	ip, r5, #20
 8002f3c:	f104 0314 	add.w	r3, r4, #20
 8002f40:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8002f44:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8002f48:	9202      	str	r2, [sp, #8]
 8002f4a:	ebac 0205 	sub.w	r2, ip, r5
 8002f4e:	3a15      	subs	r2, #21
 8002f50:	f022 0203 	bic.w	r2, r2, #3
 8002f54:	3204      	adds	r2, #4
 8002f56:	f105 0115 	add.w	r1, r5, #21
 8002f5a:	458c      	cmp	ip, r1
 8002f5c:	bf38      	it	cc
 8002f5e:	2204      	movcc	r2, #4
 8002f60:	9201      	str	r2, [sp, #4]
 8002f62:	9a02      	ldr	r2, [sp, #8]
 8002f64:	9303      	str	r3, [sp, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d808      	bhi.n	8002f7c <__multiply+0x98>
 8002f6a:	2f00      	cmp	r7, #0
 8002f6c:	dc55      	bgt.n	800301a <__multiply+0x136>
 8002f6e:	6107      	str	r7, [r0, #16]
 8002f70:	b005      	add	sp, #20
 8002f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f76:	f843 2b04 	str.w	r2, [r3], #4
 8002f7a:	e7db      	b.n	8002f34 <__multiply+0x50>
 8002f7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8002f80:	f1ba 0f00 	cmp.w	sl, #0
 8002f84:	d020      	beq.n	8002fc8 <__multiply+0xe4>
 8002f86:	f105 0e14 	add.w	lr, r5, #20
 8002f8a:	46b1      	mov	r9, r6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8002f92:	f8d9 b000 	ldr.w	fp, [r9]
 8002f96:	b2a1      	uxth	r1, r4
 8002f98:	fa1f fb8b 	uxth.w	fp, fp
 8002f9c:	fb0a b101 	mla	r1, sl, r1, fp
 8002fa0:	4411      	add	r1, r2
 8002fa2:	f8d9 2000 	ldr.w	r2, [r9]
 8002fa6:	0c24      	lsrs	r4, r4, #16
 8002fa8:	0c12      	lsrs	r2, r2, #16
 8002faa:	fb0a 2404 	mla	r4, sl, r4, r2
 8002fae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8002fb2:	b289      	uxth	r1, r1
 8002fb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8002fb8:	45f4      	cmp	ip, lr
 8002fba:	f849 1b04 	str.w	r1, [r9], #4
 8002fbe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8002fc2:	d8e4      	bhi.n	8002f8e <__multiply+0xaa>
 8002fc4:	9901      	ldr	r1, [sp, #4]
 8002fc6:	5072      	str	r2, [r6, r1]
 8002fc8:	9a03      	ldr	r2, [sp, #12]
 8002fca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	f1b9 0f00 	cmp.w	r9, #0
 8002fd4:	d01f      	beq.n	8003016 <__multiply+0x132>
 8002fd6:	6834      	ldr	r4, [r6, #0]
 8002fd8:	f105 0114 	add.w	r1, r5, #20
 8002fdc:	46b6      	mov	lr, r6
 8002fde:	f04f 0a00 	mov.w	sl, #0
 8002fe2:	880a      	ldrh	r2, [r1, #0]
 8002fe4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8002fe8:	fb09 b202 	mla	r2, r9, r2, fp
 8002fec:	4492      	add	sl, r2
 8002fee:	b2a4      	uxth	r4, r4
 8002ff0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8002ff4:	f84e 4b04 	str.w	r4, [lr], #4
 8002ff8:	f851 4b04 	ldr.w	r4, [r1], #4
 8002ffc:	f8be 2000 	ldrh.w	r2, [lr]
 8003000:	0c24      	lsrs	r4, r4, #16
 8003002:	fb09 2404 	mla	r4, r9, r4, r2
 8003006:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800300a:	458c      	cmp	ip, r1
 800300c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003010:	d8e7      	bhi.n	8002fe2 <__multiply+0xfe>
 8003012:	9a01      	ldr	r2, [sp, #4]
 8003014:	50b4      	str	r4, [r6, r2]
 8003016:	3604      	adds	r6, #4
 8003018:	e7a3      	b.n	8002f62 <__multiply+0x7e>
 800301a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1a5      	bne.n	8002f6e <__multiply+0x8a>
 8003022:	3f01      	subs	r7, #1
 8003024:	e7a1      	b.n	8002f6a <__multiply+0x86>
 8003026:	bf00      	nop
 8003028:	0800550f 	.word	0x0800550f
 800302c:	080054af 	.word	0x080054af

08003030 <__pow5mult>:
 8003030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003034:	4615      	mov	r5, r2
 8003036:	f012 0203 	ands.w	r2, r2, #3
 800303a:	4606      	mov	r6, r0
 800303c:	460f      	mov	r7, r1
 800303e:	d007      	beq.n	8003050 <__pow5mult+0x20>
 8003040:	4c25      	ldr	r4, [pc, #148]	; (80030d8 <__pow5mult+0xa8>)
 8003042:	3a01      	subs	r2, #1
 8003044:	2300      	movs	r3, #0
 8003046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800304a:	f7ff fe9b 	bl	8002d84 <__multadd>
 800304e:	4607      	mov	r7, r0
 8003050:	10ad      	asrs	r5, r5, #2
 8003052:	d03d      	beq.n	80030d0 <__pow5mult+0xa0>
 8003054:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003056:	b97c      	cbnz	r4, 8003078 <__pow5mult+0x48>
 8003058:	2010      	movs	r0, #16
 800305a:	f001 fc0f 	bl	800487c <malloc>
 800305e:	4602      	mov	r2, r0
 8003060:	6270      	str	r0, [r6, #36]	; 0x24
 8003062:	b928      	cbnz	r0, 8003070 <__pow5mult+0x40>
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <__pow5mult+0xac>)
 8003066:	481e      	ldr	r0, [pc, #120]	; (80030e0 <__pow5mult+0xb0>)
 8003068:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800306c:	f000 fd5c 	bl	8003b28 <__assert_func>
 8003070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003074:	6004      	str	r4, [r0, #0]
 8003076:	60c4      	str	r4, [r0, #12]
 8003078:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800307c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003080:	b94c      	cbnz	r4, 8003096 <__pow5mult+0x66>
 8003082:	f240 2171 	movw	r1, #625	; 0x271
 8003086:	4630      	mov	r0, r6
 8003088:	f7ff ff16 	bl	8002eb8 <__i2b>
 800308c:	2300      	movs	r3, #0
 800308e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003092:	4604      	mov	r4, r0
 8003094:	6003      	str	r3, [r0, #0]
 8003096:	f04f 0900 	mov.w	r9, #0
 800309a:	07eb      	lsls	r3, r5, #31
 800309c:	d50a      	bpl.n	80030b4 <__pow5mult+0x84>
 800309e:	4639      	mov	r1, r7
 80030a0:	4622      	mov	r2, r4
 80030a2:	4630      	mov	r0, r6
 80030a4:	f7ff ff1e 	bl	8002ee4 <__multiply>
 80030a8:	4639      	mov	r1, r7
 80030aa:	4680      	mov	r8, r0
 80030ac:	4630      	mov	r0, r6
 80030ae:	f7ff fe47 	bl	8002d40 <_Bfree>
 80030b2:	4647      	mov	r7, r8
 80030b4:	106d      	asrs	r5, r5, #1
 80030b6:	d00b      	beq.n	80030d0 <__pow5mult+0xa0>
 80030b8:	6820      	ldr	r0, [r4, #0]
 80030ba:	b938      	cbnz	r0, 80030cc <__pow5mult+0x9c>
 80030bc:	4622      	mov	r2, r4
 80030be:	4621      	mov	r1, r4
 80030c0:	4630      	mov	r0, r6
 80030c2:	f7ff ff0f 	bl	8002ee4 <__multiply>
 80030c6:	6020      	str	r0, [r4, #0]
 80030c8:	f8c0 9000 	str.w	r9, [r0]
 80030cc:	4604      	mov	r4, r0
 80030ce:	e7e4      	b.n	800309a <__pow5mult+0x6a>
 80030d0:	4638      	mov	r0, r7
 80030d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030d6:	bf00      	nop
 80030d8:	08005610 	.word	0x08005610
 80030dc:	08005498 	.word	0x08005498
 80030e0:	080054af 	.word	0x080054af

080030e4 <__lshift>:
 80030e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e8:	460c      	mov	r4, r1
 80030ea:	6849      	ldr	r1, [r1, #4]
 80030ec:	6923      	ldr	r3, [r4, #16]
 80030ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80030f2:	68a3      	ldr	r3, [r4, #8]
 80030f4:	4607      	mov	r7, r0
 80030f6:	4691      	mov	r9, r2
 80030f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80030fc:	f108 0601 	add.w	r6, r8, #1
 8003100:	42b3      	cmp	r3, r6
 8003102:	db0b      	blt.n	800311c <__lshift+0x38>
 8003104:	4638      	mov	r0, r7
 8003106:	f7ff fddb 	bl	8002cc0 <_Balloc>
 800310a:	4605      	mov	r5, r0
 800310c:	b948      	cbnz	r0, 8003122 <__lshift+0x3e>
 800310e:	4602      	mov	r2, r0
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <__lshift+0xd0>)
 8003112:	4829      	ldr	r0, [pc, #164]	; (80031b8 <__lshift+0xd4>)
 8003114:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003118:	f000 fd06 	bl	8003b28 <__assert_func>
 800311c:	3101      	adds	r1, #1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	e7ee      	b.n	8003100 <__lshift+0x1c>
 8003122:	2300      	movs	r3, #0
 8003124:	f100 0114 	add.w	r1, r0, #20
 8003128:	f100 0210 	add.w	r2, r0, #16
 800312c:	4618      	mov	r0, r3
 800312e:	4553      	cmp	r3, sl
 8003130:	db33      	blt.n	800319a <__lshift+0xb6>
 8003132:	6920      	ldr	r0, [r4, #16]
 8003134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003138:	f104 0314 	add.w	r3, r4, #20
 800313c:	f019 091f 	ands.w	r9, r9, #31
 8003140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003144:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003148:	d02b      	beq.n	80031a2 <__lshift+0xbe>
 800314a:	f1c9 0e20 	rsb	lr, r9, #32
 800314e:	468a      	mov	sl, r1
 8003150:	2200      	movs	r2, #0
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	fa00 f009 	lsl.w	r0, r0, r9
 8003158:	4302      	orrs	r2, r0
 800315a:	f84a 2b04 	str.w	r2, [sl], #4
 800315e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003162:	459c      	cmp	ip, r3
 8003164:	fa22 f20e 	lsr.w	r2, r2, lr
 8003168:	d8f3      	bhi.n	8003152 <__lshift+0x6e>
 800316a:	ebac 0304 	sub.w	r3, ip, r4
 800316e:	3b15      	subs	r3, #21
 8003170:	f023 0303 	bic.w	r3, r3, #3
 8003174:	3304      	adds	r3, #4
 8003176:	f104 0015 	add.w	r0, r4, #21
 800317a:	4584      	cmp	ip, r0
 800317c:	bf38      	it	cc
 800317e:	2304      	movcc	r3, #4
 8003180:	50ca      	str	r2, [r1, r3]
 8003182:	b10a      	cbz	r2, 8003188 <__lshift+0xa4>
 8003184:	f108 0602 	add.w	r6, r8, #2
 8003188:	3e01      	subs	r6, #1
 800318a:	4638      	mov	r0, r7
 800318c:	612e      	str	r6, [r5, #16]
 800318e:	4621      	mov	r1, r4
 8003190:	f7ff fdd6 	bl	8002d40 <_Bfree>
 8003194:	4628      	mov	r0, r5
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319a:	f842 0f04 	str.w	r0, [r2, #4]!
 800319e:	3301      	adds	r3, #1
 80031a0:	e7c5      	b.n	800312e <__lshift+0x4a>
 80031a2:	3904      	subs	r1, #4
 80031a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80031ac:	459c      	cmp	ip, r3
 80031ae:	d8f9      	bhi.n	80031a4 <__lshift+0xc0>
 80031b0:	e7ea      	b.n	8003188 <__lshift+0xa4>
 80031b2:	bf00      	nop
 80031b4:	0800550f 	.word	0x0800550f
 80031b8:	080054af 	.word	0x080054af

080031bc <__mcmp>:
 80031bc:	b530      	push	{r4, r5, lr}
 80031be:	6902      	ldr	r2, [r0, #16]
 80031c0:	690c      	ldr	r4, [r1, #16]
 80031c2:	1b12      	subs	r2, r2, r4
 80031c4:	d10e      	bne.n	80031e4 <__mcmp+0x28>
 80031c6:	f100 0314 	add.w	r3, r0, #20
 80031ca:	3114      	adds	r1, #20
 80031cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80031d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80031d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80031d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80031dc:	42a5      	cmp	r5, r4
 80031de:	d003      	beq.n	80031e8 <__mcmp+0x2c>
 80031e0:	d305      	bcc.n	80031ee <__mcmp+0x32>
 80031e2:	2201      	movs	r2, #1
 80031e4:	4610      	mov	r0, r2
 80031e6:	bd30      	pop	{r4, r5, pc}
 80031e8:	4283      	cmp	r3, r0
 80031ea:	d3f3      	bcc.n	80031d4 <__mcmp+0x18>
 80031ec:	e7fa      	b.n	80031e4 <__mcmp+0x28>
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
 80031f2:	e7f7      	b.n	80031e4 <__mcmp+0x28>

080031f4 <__mdiff>:
 80031f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f8:	460c      	mov	r4, r1
 80031fa:	4606      	mov	r6, r0
 80031fc:	4611      	mov	r1, r2
 80031fe:	4620      	mov	r0, r4
 8003200:	4617      	mov	r7, r2
 8003202:	f7ff ffdb 	bl	80031bc <__mcmp>
 8003206:	1e05      	subs	r5, r0, #0
 8003208:	d110      	bne.n	800322c <__mdiff+0x38>
 800320a:	4629      	mov	r1, r5
 800320c:	4630      	mov	r0, r6
 800320e:	f7ff fd57 	bl	8002cc0 <_Balloc>
 8003212:	b930      	cbnz	r0, 8003222 <__mdiff+0x2e>
 8003214:	4b39      	ldr	r3, [pc, #228]	; (80032fc <__mdiff+0x108>)
 8003216:	4602      	mov	r2, r0
 8003218:	f240 2132 	movw	r1, #562	; 0x232
 800321c:	4838      	ldr	r0, [pc, #224]	; (8003300 <__mdiff+0x10c>)
 800321e:	f000 fc83 	bl	8003b28 <__assert_func>
 8003222:	2301      	movs	r3, #1
 8003224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322c:	bfa4      	itt	ge
 800322e:	463b      	movge	r3, r7
 8003230:	4627      	movge	r7, r4
 8003232:	4630      	mov	r0, r6
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	bfa6      	itte	ge
 8003238:	461c      	movge	r4, r3
 800323a:	2500      	movge	r5, #0
 800323c:	2501      	movlt	r5, #1
 800323e:	f7ff fd3f 	bl	8002cc0 <_Balloc>
 8003242:	b920      	cbnz	r0, 800324e <__mdiff+0x5a>
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <__mdiff+0x108>)
 8003246:	4602      	mov	r2, r0
 8003248:	f44f 7110 	mov.w	r1, #576	; 0x240
 800324c:	e7e6      	b.n	800321c <__mdiff+0x28>
 800324e:	693e      	ldr	r6, [r7, #16]
 8003250:	60c5      	str	r5, [r0, #12]
 8003252:	6925      	ldr	r5, [r4, #16]
 8003254:	f107 0114 	add.w	r1, r7, #20
 8003258:	f104 0914 	add.w	r9, r4, #20
 800325c:	f100 0e14 	add.w	lr, r0, #20
 8003260:	f107 0210 	add.w	r2, r7, #16
 8003264:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8003268:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800326c:	46f2      	mov	sl, lr
 800326e:	2700      	movs	r7, #0
 8003270:	f859 3b04 	ldr.w	r3, [r9], #4
 8003274:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003278:	fa1f f883 	uxth.w	r8, r3
 800327c:	fa17 f78b 	uxtah	r7, r7, fp
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	eba7 0808 	sub.w	r8, r7, r8
 8003286:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800328a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800328e:	fa1f f888 	uxth.w	r8, r8
 8003292:	141f      	asrs	r7, r3, #16
 8003294:	454d      	cmp	r5, r9
 8003296:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800329a:	f84a 3b04 	str.w	r3, [sl], #4
 800329e:	d8e7      	bhi.n	8003270 <__mdiff+0x7c>
 80032a0:	1b2b      	subs	r3, r5, r4
 80032a2:	3b15      	subs	r3, #21
 80032a4:	f023 0303 	bic.w	r3, r3, #3
 80032a8:	3304      	adds	r3, #4
 80032aa:	3415      	adds	r4, #21
 80032ac:	42a5      	cmp	r5, r4
 80032ae:	bf38      	it	cc
 80032b0:	2304      	movcc	r3, #4
 80032b2:	4419      	add	r1, r3
 80032b4:	4473      	add	r3, lr
 80032b6:	469e      	mov	lr, r3
 80032b8:	460d      	mov	r5, r1
 80032ba:	4565      	cmp	r5, ip
 80032bc:	d30e      	bcc.n	80032dc <__mdiff+0xe8>
 80032be:	f10c 0203 	add.w	r2, ip, #3
 80032c2:	1a52      	subs	r2, r2, r1
 80032c4:	f022 0203 	bic.w	r2, r2, #3
 80032c8:	3903      	subs	r1, #3
 80032ca:	458c      	cmp	ip, r1
 80032cc:	bf38      	it	cc
 80032ce:	2200      	movcc	r2, #0
 80032d0:	441a      	add	r2, r3
 80032d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80032d6:	b17b      	cbz	r3, 80032f8 <__mdiff+0x104>
 80032d8:	6106      	str	r6, [r0, #16]
 80032da:	e7a5      	b.n	8003228 <__mdiff+0x34>
 80032dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80032e0:	fa17 f488 	uxtah	r4, r7, r8
 80032e4:	1422      	asrs	r2, r4, #16
 80032e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80032ea:	b2a4      	uxth	r4, r4
 80032ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80032f0:	f84e 4b04 	str.w	r4, [lr], #4
 80032f4:	1417      	asrs	r7, r2, #16
 80032f6:	e7e0      	b.n	80032ba <__mdiff+0xc6>
 80032f8:	3e01      	subs	r6, #1
 80032fa:	e7ea      	b.n	80032d2 <__mdiff+0xde>
 80032fc:	0800550f 	.word	0x0800550f
 8003300:	080054af 	.word	0x080054af

08003304 <__d2b>:
 8003304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003308:	4689      	mov	r9, r1
 800330a:	2101      	movs	r1, #1
 800330c:	ec57 6b10 	vmov	r6, r7, d0
 8003310:	4690      	mov	r8, r2
 8003312:	f7ff fcd5 	bl	8002cc0 <_Balloc>
 8003316:	4604      	mov	r4, r0
 8003318:	b930      	cbnz	r0, 8003328 <__d2b+0x24>
 800331a:	4602      	mov	r2, r0
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <__d2b+0xb0>)
 800331e:	4826      	ldr	r0, [pc, #152]	; (80033b8 <__d2b+0xb4>)
 8003320:	f240 310a 	movw	r1, #778	; 0x30a
 8003324:	f000 fc00 	bl	8003b28 <__assert_func>
 8003328:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800332c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003330:	bb35      	cbnz	r5, 8003380 <__d2b+0x7c>
 8003332:	2e00      	cmp	r6, #0
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	d028      	beq.n	800338a <__d2b+0x86>
 8003338:	4668      	mov	r0, sp
 800333a:	9600      	str	r6, [sp, #0]
 800333c:	f7ff fd8c 	bl	8002e58 <__lo0bits>
 8003340:	9900      	ldr	r1, [sp, #0]
 8003342:	b300      	cbz	r0, 8003386 <__d2b+0x82>
 8003344:	9a01      	ldr	r2, [sp, #4]
 8003346:	f1c0 0320 	rsb	r3, r0, #32
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	430b      	orrs	r3, r1
 8003350:	40c2      	lsrs	r2, r0
 8003352:	6163      	str	r3, [r4, #20]
 8003354:	9201      	str	r2, [sp, #4]
 8003356:	9b01      	ldr	r3, [sp, #4]
 8003358:	61a3      	str	r3, [r4, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2202      	movne	r2, #2
 8003360:	2201      	moveq	r2, #1
 8003362:	6122      	str	r2, [r4, #16]
 8003364:	b1d5      	cbz	r5, 800339c <__d2b+0x98>
 8003366:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800336a:	4405      	add	r5, r0
 800336c:	f8c9 5000 	str.w	r5, [r9]
 8003370:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003374:	f8c8 0000 	str.w	r0, [r8]
 8003378:	4620      	mov	r0, r4
 800337a:	b003      	add	sp, #12
 800337c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003384:	e7d5      	b.n	8003332 <__d2b+0x2e>
 8003386:	6161      	str	r1, [r4, #20]
 8003388:	e7e5      	b.n	8003356 <__d2b+0x52>
 800338a:	a801      	add	r0, sp, #4
 800338c:	f7ff fd64 	bl	8002e58 <__lo0bits>
 8003390:	9b01      	ldr	r3, [sp, #4]
 8003392:	6163      	str	r3, [r4, #20]
 8003394:	2201      	movs	r2, #1
 8003396:	6122      	str	r2, [r4, #16]
 8003398:	3020      	adds	r0, #32
 800339a:	e7e3      	b.n	8003364 <__d2b+0x60>
 800339c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80033a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80033a4:	f8c9 0000 	str.w	r0, [r9]
 80033a8:	6918      	ldr	r0, [r3, #16]
 80033aa:	f7ff fd35 	bl	8002e18 <__hi0bits>
 80033ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80033b2:	e7df      	b.n	8003374 <__d2b+0x70>
 80033b4:	0800550f 	.word	0x0800550f
 80033b8:	080054af 	.word	0x080054af

080033bc <_mprec_log10>:
 80033bc:	2817      	cmp	r0, #23
 80033be:	b5d0      	push	{r4, r6, r7, lr}
 80033c0:	4604      	mov	r4, r0
 80033c2:	dc07      	bgt.n	80033d4 <_mprec_log10+0x18>
 80033c4:	4809      	ldr	r0, [pc, #36]	; (80033ec <_mprec_log10+0x30>)
 80033c6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80033ca:	e9d4 0100 	ldrd	r0, r1, [r4]
 80033ce:	ec41 0b10 	vmov	d0, r0, r1
 80033d2:	bdd0      	pop	{r4, r6, r7, pc}
 80033d4:	4906      	ldr	r1, [pc, #24]	; (80033f0 <_mprec_log10+0x34>)
 80033d6:	4f07      	ldr	r7, [pc, #28]	; (80033f4 <_mprec_log10+0x38>)
 80033d8:	2000      	movs	r0, #0
 80033da:	2600      	movs	r6, #0
 80033dc:	4632      	mov	r2, r6
 80033de:	463b      	mov	r3, r7
 80033e0:	f7fd f902 	bl	80005e8 <__aeabi_dmul>
 80033e4:	3c01      	subs	r4, #1
 80033e6:	d1f9      	bne.n	80033dc <_mprec_log10+0x20>
 80033e8:	e7f1      	b.n	80033ce <_mprec_log10+0x12>
 80033ea:	bf00      	nop
 80033ec:	08005548 	.word	0x08005548
 80033f0:	3ff00000 	.word	0x3ff00000
 80033f4:	40240000 	.word	0x40240000

080033f8 <_calloc_r>:
 80033f8:	b513      	push	{r0, r1, r4, lr}
 80033fa:	434a      	muls	r2, r1
 80033fc:	4611      	mov	r1, r2
 80033fe:	9201      	str	r2, [sp, #4]
 8003400:	f000 f80a 	bl	8003418 <_malloc_r>
 8003404:	4604      	mov	r4, r0
 8003406:	b118      	cbz	r0, 8003410 <_calloc_r+0x18>
 8003408:	9a01      	ldr	r2, [sp, #4]
 800340a:	2100      	movs	r1, #0
 800340c:	f7ff faf8 	bl	8002a00 <memset>
 8003410:	4620      	mov	r0, r4
 8003412:	b002      	add	sp, #8
 8003414:	bd10      	pop	{r4, pc}
	...

08003418 <_malloc_r>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	1ccd      	adds	r5, r1, #3
 800341c:	f025 0503 	bic.w	r5, r5, #3
 8003420:	3508      	adds	r5, #8
 8003422:	2d0c      	cmp	r5, #12
 8003424:	bf38      	it	cc
 8003426:	250c      	movcc	r5, #12
 8003428:	2d00      	cmp	r5, #0
 800342a:	4606      	mov	r6, r0
 800342c:	db01      	blt.n	8003432 <_malloc_r+0x1a>
 800342e:	42a9      	cmp	r1, r5
 8003430:	d903      	bls.n	800343a <_malloc_r+0x22>
 8003432:	230c      	movs	r3, #12
 8003434:	6033      	str	r3, [r6, #0]
 8003436:	2000      	movs	r0, #0
 8003438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800343a:	f001 fa4f 	bl	80048dc <__malloc_lock>
 800343e:	4921      	ldr	r1, [pc, #132]	; (80034c4 <_malloc_r+0xac>)
 8003440:	680a      	ldr	r2, [r1, #0]
 8003442:	4614      	mov	r4, r2
 8003444:	b99c      	cbnz	r4, 800346e <_malloc_r+0x56>
 8003446:	4f20      	ldr	r7, [pc, #128]	; (80034c8 <_malloc_r+0xb0>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b923      	cbnz	r3, 8003456 <_malloc_r+0x3e>
 800344c:	4621      	mov	r1, r4
 800344e:	4630      	mov	r0, r6
 8003450:	f000 fb52 	bl	8003af8 <_sbrk_r>
 8003454:	6038      	str	r0, [r7, #0]
 8003456:	4629      	mov	r1, r5
 8003458:	4630      	mov	r0, r6
 800345a:	f000 fb4d 	bl	8003af8 <_sbrk_r>
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	d123      	bne.n	80034aa <_malloc_r+0x92>
 8003462:	230c      	movs	r3, #12
 8003464:	6033      	str	r3, [r6, #0]
 8003466:	4630      	mov	r0, r6
 8003468:	f001 fa3e 	bl	80048e8 <__malloc_unlock>
 800346c:	e7e3      	b.n	8003436 <_malloc_r+0x1e>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	1b5b      	subs	r3, r3, r5
 8003472:	d417      	bmi.n	80034a4 <_malloc_r+0x8c>
 8003474:	2b0b      	cmp	r3, #11
 8003476:	d903      	bls.n	8003480 <_malloc_r+0x68>
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	441c      	add	r4, r3
 800347c:	6025      	str	r5, [r4, #0]
 800347e:	e004      	b.n	800348a <_malloc_r+0x72>
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	42a2      	cmp	r2, r4
 8003484:	bf0c      	ite	eq
 8003486:	600b      	streq	r3, [r1, #0]
 8003488:	6053      	strne	r3, [r2, #4]
 800348a:	4630      	mov	r0, r6
 800348c:	f001 fa2c 	bl	80048e8 <__malloc_unlock>
 8003490:	f104 000b 	add.w	r0, r4, #11
 8003494:	1d23      	adds	r3, r4, #4
 8003496:	f020 0007 	bic.w	r0, r0, #7
 800349a:	1ac2      	subs	r2, r0, r3
 800349c:	d0cc      	beq.n	8003438 <_malloc_r+0x20>
 800349e:	1a1b      	subs	r3, r3, r0
 80034a0:	50a3      	str	r3, [r4, r2]
 80034a2:	e7c9      	b.n	8003438 <_malloc_r+0x20>
 80034a4:	4622      	mov	r2, r4
 80034a6:	6864      	ldr	r4, [r4, #4]
 80034a8:	e7cc      	b.n	8003444 <_malloc_r+0x2c>
 80034aa:	1cc4      	adds	r4, r0, #3
 80034ac:	f024 0403 	bic.w	r4, r4, #3
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d0e3      	beq.n	800347c <_malloc_r+0x64>
 80034b4:	1a21      	subs	r1, r4, r0
 80034b6:	4630      	mov	r0, r6
 80034b8:	f000 fb1e 	bl	8003af8 <_sbrk_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d1dd      	bne.n	800347c <_malloc_r+0x64>
 80034c0:	e7cf      	b.n	8003462 <_malloc_r+0x4a>
 80034c2:	bf00      	nop
 80034c4:	200000a0 	.word	0x200000a0
 80034c8:	200000a4 	.word	0x200000a4

080034cc <_realloc_r>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	4607      	mov	r7, r0
 80034d0:	4614      	mov	r4, r2
 80034d2:	460e      	mov	r6, r1
 80034d4:	b921      	cbnz	r1, 80034e0 <_realloc_r+0x14>
 80034d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034da:	4611      	mov	r1, r2
 80034dc:	f7ff bf9c 	b.w	8003418 <_malloc_r>
 80034e0:	b922      	cbnz	r2, 80034ec <_realloc_r+0x20>
 80034e2:	f001 fa07 	bl	80048f4 <_free_r>
 80034e6:	4625      	mov	r5, r4
 80034e8:	4628      	mov	r0, r5
 80034ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ec:	f001 fa52 	bl	8004994 <_malloc_usable_size_r>
 80034f0:	42a0      	cmp	r0, r4
 80034f2:	d20f      	bcs.n	8003514 <_realloc_r+0x48>
 80034f4:	4621      	mov	r1, r4
 80034f6:	4638      	mov	r0, r7
 80034f8:	f7ff ff8e 	bl	8003418 <_malloc_r>
 80034fc:	4605      	mov	r5, r0
 80034fe:	2800      	cmp	r0, #0
 8003500:	d0f2      	beq.n	80034e8 <_realloc_r+0x1c>
 8003502:	4631      	mov	r1, r6
 8003504:	4622      	mov	r2, r4
 8003506:	f001 f9c1 	bl	800488c <memcpy>
 800350a:	4631      	mov	r1, r6
 800350c:	4638      	mov	r0, r7
 800350e:	f001 f9f1 	bl	80048f4 <_free_r>
 8003512:	e7e9      	b.n	80034e8 <_realloc_r+0x1c>
 8003514:	4635      	mov	r5, r6
 8003516:	e7e7      	b.n	80034e8 <_realloc_r+0x1c>

08003518 <__ssputs_r>:
 8003518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800351c:	688e      	ldr	r6, [r1, #8]
 800351e:	429e      	cmp	r6, r3
 8003520:	4682      	mov	sl, r0
 8003522:	460c      	mov	r4, r1
 8003524:	4690      	mov	r8, r2
 8003526:	461f      	mov	r7, r3
 8003528:	d838      	bhi.n	800359c <__ssputs_r+0x84>
 800352a:	898a      	ldrh	r2, [r1, #12]
 800352c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003530:	d032      	beq.n	8003598 <__ssputs_r+0x80>
 8003532:	6825      	ldr	r5, [r4, #0]
 8003534:	6909      	ldr	r1, [r1, #16]
 8003536:	eba5 0901 	sub.w	r9, r5, r1
 800353a:	6965      	ldr	r5, [r4, #20]
 800353c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003544:	3301      	adds	r3, #1
 8003546:	444b      	add	r3, r9
 8003548:	106d      	asrs	r5, r5, #1
 800354a:	429d      	cmp	r5, r3
 800354c:	bf38      	it	cc
 800354e:	461d      	movcc	r5, r3
 8003550:	0553      	lsls	r3, r2, #21
 8003552:	d531      	bpl.n	80035b8 <__ssputs_r+0xa0>
 8003554:	4629      	mov	r1, r5
 8003556:	f7ff ff5f 	bl	8003418 <_malloc_r>
 800355a:	4606      	mov	r6, r0
 800355c:	b950      	cbnz	r0, 8003574 <__ssputs_r+0x5c>
 800355e:	230c      	movs	r3, #12
 8003560:	f8ca 3000 	str.w	r3, [sl]
 8003564:	89a3      	ldrh	r3, [r4, #12]
 8003566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800356a:	81a3      	strh	r3, [r4, #12]
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003574:	6921      	ldr	r1, [r4, #16]
 8003576:	464a      	mov	r2, r9
 8003578:	f001 f988 	bl	800488c <memcpy>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	6126      	str	r6, [r4, #16]
 800358a:	6165      	str	r5, [r4, #20]
 800358c:	444e      	add	r6, r9
 800358e:	eba5 0509 	sub.w	r5, r5, r9
 8003592:	6026      	str	r6, [r4, #0]
 8003594:	60a5      	str	r5, [r4, #8]
 8003596:	463e      	mov	r6, r7
 8003598:	42be      	cmp	r6, r7
 800359a:	d900      	bls.n	800359e <__ssputs_r+0x86>
 800359c:	463e      	mov	r6, r7
 800359e:	4632      	mov	r2, r6
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	4641      	mov	r1, r8
 80035a4:	f001 f980 	bl	80048a8 <memmove>
 80035a8:	68a3      	ldr	r3, [r4, #8]
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	1b9b      	subs	r3, r3, r6
 80035ae:	4432      	add	r2, r6
 80035b0:	60a3      	str	r3, [r4, #8]
 80035b2:	6022      	str	r2, [r4, #0]
 80035b4:	2000      	movs	r0, #0
 80035b6:	e7db      	b.n	8003570 <__ssputs_r+0x58>
 80035b8:	462a      	mov	r2, r5
 80035ba:	f7ff ff87 	bl	80034cc <_realloc_r>
 80035be:	4606      	mov	r6, r0
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d1e1      	bne.n	8003588 <__ssputs_r+0x70>
 80035c4:	6921      	ldr	r1, [r4, #16]
 80035c6:	4650      	mov	r0, sl
 80035c8:	f001 f994 	bl	80048f4 <_free_r>
 80035cc:	e7c7      	b.n	800355e <__ssputs_r+0x46>
	...

080035d0 <_svfiprintf_r>:
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	4698      	mov	r8, r3
 80035d6:	898b      	ldrh	r3, [r1, #12]
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	b09d      	sub	sp, #116	; 0x74
 80035dc:	4607      	mov	r7, r0
 80035de:	460d      	mov	r5, r1
 80035e0:	4614      	mov	r4, r2
 80035e2:	d50e      	bpl.n	8003602 <_svfiprintf_r+0x32>
 80035e4:	690b      	ldr	r3, [r1, #16]
 80035e6:	b963      	cbnz	r3, 8003602 <_svfiprintf_r+0x32>
 80035e8:	2140      	movs	r1, #64	; 0x40
 80035ea:	f7ff ff15 	bl	8003418 <_malloc_r>
 80035ee:	6028      	str	r0, [r5, #0]
 80035f0:	6128      	str	r0, [r5, #16]
 80035f2:	b920      	cbnz	r0, 80035fe <_svfiprintf_r+0x2e>
 80035f4:	230c      	movs	r3, #12
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	e0d1      	b.n	80037a2 <_svfiprintf_r+0x1d2>
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	616b      	str	r3, [r5, #20]
 8003602:	2300      	movs	r3, #0
 8003604:	9309      	str	r3, [sp, #36]	; 0x24
 8003606:	2320      	movs	r3, #32
 8003608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800360c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003610:	2330      	movs	r3, #48	; 0x30
 8003612:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80037bc <_svfiprintf_r+0x1ec>
 8003616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800361a:	f04f 0901 	mov.w	r9, #1
 800361e:	4623      	mov	r3, r4
 8003620:	469a      	mov	sl, r3
 8003622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003626:	b10a      	cbz	r2, 800362c <_svfiprintf_r+0x5c>
 8003628:	2a25      	cmp	r2, #37	; 0x25
 800362a:	d1f9      	bne.n	8003620 <_svfiprintf_r+0x50>
 800362c:	ebba 0b04 	subs.w	fp, sl, r4
 8003630:	d00b      	beq.n	800364a <_svfiprintf_r+0x7a>
 8003632:	465b      	mov	r3, fp
 8003634:	4622      	mov	r2, r4
 8003636:	4629      	mov	r1, r5
 8003638:	4638      	mov	r0, r7
 800363a:	f7ff ff6d 	bl	8003518 <__ssputs_r>
 800363e:	3001      	adds	r0, #1
 8003640:	f000 80aa 	beq.w	8003798 <_svfiprintf_r+0x1c8>
 8003644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003646:	445a      	add	r2, fp
 8003648:	9209      	str	r2, [sp, #36]	; 0x24
 800364a:	f89a 3000 	ldrb.w	r3, [sl]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80a2 	beq.w	8003798 <_svfiprintf_r+0x1c8>
 8003654:	2300      	movs	r3, #0
 8003656:	f04f 32ff 	mov.w	r2, #4294967295
 800365a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800365e:	f10a 0a01 	add.w	sl, sl, #1
 8003662:	9304      	str	r3, [sp, #16]
 8003664:	9307      	str	r3, [sp, #28]
 8003666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800366a:	931a      	str	r3, [sp, #104]	; 0x68
 800366c:	4654      	mov	r4, sl
 800366e:	2205      	movs	r2, #5
 8003670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003674:	4851      	ldr	r0, [pc, #324]	; (80037bc <_svfiprintf_r+0x1ec>)
 8003676:	f7fc fdab 	bl	80001d0 <memchr>
 800367a:	9a04      	ldr	r2, [sp, #16]
 800367c:	b9d8      	cbnz	r0, 80036b6 <_svfiprintf_r+0xe6>
 800367e:	06d0      	lsls	r0, r2, #27
 8003680:	bf44      	itt	mi
 8003682:	2320      	movmi	r3, #32
 8003684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003688:	0711      	lsls	r1, r2, #28
 800368a:	bf44      	itt	mi
 800368c:	232b      	movmi	r3, #43	; 0x2b
 800368e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003692:	f89a 3000 	ldrb.w	r3, [sl]
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	d015      	beq.n	80036c6 <_svfiprintf_r+0xf6>
 800369a:	9a07      	ldr	r2, [sp, #28]
 800369c:	4654      	mov	r4, sl
 800369e:	2000      	movs	r0, #0
 80036a0:	f04f 0c0a 	mov.w	ip, #10
 80036a4:	4621      	mov	r1, r4
 80036a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036aa:	3b30      	subs	r3, #48	; 0x30
 80036ac:	2b09      	cmp	r3, #9
 80036ae:	d94e      	bls.n	800374e <_svfiprintf_r+0x17e>
 80036b0:	b1b0      	cbz	r0, 80036e0 <_svfiprintf_r+0x110>
 80036b2:	9207      	str	r2, [sp, #28]
 80036b4:	e014      	b.n	80036e0 <_svfiprintf_r+0x110>
 80036b6:	eba0 0308 	sub.w	r3, r0, r8
 80036ba:	fa09 f303 	lsl.w	r3, r9, r3
 80036be:	4313      	orrs	r3, r2
 80036c0:	9304      	str	r3, [sp, #16]
 80036c2:	46a2      	mov	sl, r4
 80036c4:	e7d2      	b.n	800366c <_svfiprintf_r+0x9c>
 80036c6:	9b03      	ldr	r3, [sp, #12]
 80036c8:	1d19      	adds	r1, r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	9103      	str	r1, [sp, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bfbb      	ittet	lt
 80036d2:	425b      	neglt	r3, r3
 80036d4:	f042 0202 	orrlt.w	r2, r2, #2
 80036d8:	9307      	strge	r3, [sp, #28]
 80036da:	9307      	strlt	r3, [sp, #28]
 80036dc:	bfb8      	it	lt
 80036de:	9204      	strlt	r2, [sp, #16]
 80036e0:	7823      	ldrb	r3, [r4, #0]
 80036e2:	2b2e      	cmp	r3, #46	; 0x2e
 80036e4:	d10c      	bne.n	8003700 <_svfiprintf_r+0x130>
 80036e6:	7863      	ldrb	r3, [r4, #1]
 80036e8:	2b2a      	cmp	r3, #42	; 0x2a
 80036ea:	d135      	bne.n	8003758 <_svfiprintf_r+0x188>
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	9203      	str	r2, [sp, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bfb8      	it	lt
 80036f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036fc:	3402      	adds	r4, #2
 80036fe:	9305      	str	r3, [sp, #20]
 8003700:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80037cc <_svfiprintf_r+0x1fc>
 8003704:	7821      	ldrb	r1, [r4, #0]
 8003706:	2203      	movs	r2, #3
 8003708:	4650      	mov	r0, sl
 800370a:	f7fc fd61 	bl	80001d0 <memchr>
 800370e:	b140      	cbz	r0, 8003722 <_svfiprintf_r+0x152>
 8003710:	2340      	movs	r3, #64	; 0x40
 8003712:	eba0 000a 	sub.w	r0, r0, sl
 8003716:	fa03 f000 	lsl.w	r0, r3, r0
 800371a:	9b04      	ldr	r3, [sp, #16]
 800371c:	4303      	orrs	r3, r0
 800371e:	3401      	adds	r4, #1
 8003720:	9304      	str	r3, [sp, #16]
 8003722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003726:	4826      	ldr	r0, [pc, #152]	; (80037c0 <_svfiprintf_r+0x1f0>)
 8003728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800372c:	2206      	movs	r2, #6
 800372e:	f7fc fd4f 	bl	80001d0 <memchr>
 8003732:	2800      	cmp	r0, #0
 8003734:	d038      	beq.n	80037a8 <_svfiprintf_r+0x1d8>
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <_svfiprintf_r+0x1f4>)
 8003738:	bb1b      	cbnz	r3, 8003782 <_svfiprintf_r+0x1b2>
 800373a:	9b03      	ldr	r3, [sp, #12]
 800373c:	3307      	adds	r3, #7
 800373e:	f023 0307 	bic.w	r3, r3, #7
 8003742:	3308      	adds	r3, #8
 8003744:	9303      	str	r3, [sp, #12]
 8003746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003748:	4433      	add	r3, r6
 800374a:	9309      	str	r3, [sp, #36]	; 0x24
 800374c:	e767      	b.n	800361e <_svfiprintf_r+0x4e>
 800374e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003752:	460c      	mov	r4, r1
 8003754:	2001      	movs	r0, #1
 8003756:	e7a5      	b.n	80036a4 <_svfiprintf_r+0xd4>
 8003758:	2300      	movs	r3, #0
 800375a:	3401      	adds	r4, #1
 800375c:	9305      	str	r3, [sp, #20]
 800375e:	4619      	mov	r1, r3
 8003760:	f04f 0c0a 	mov.w	ip, #10
 8003764:	4620      	mov	r0, r4
 8003766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800376a:	3a30      	subs	r2, #48	; 0x30
 800376c:	2a09      	cmp	r2, #9
 800376e:	d903      	bls.n	8003778 <_svfiprintf_r+0x1a8>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0c5      	beq.n	8003700 <_svfiprintf_r+0x130>
 8003774:	9105      	str	r1, [sp, #20]
 8003776:	e7c3      	b.n	8003700 <_svfiprintf_r+0x130>
 8003778:	fb0c 2101 	mla	r1, ip, r1, r2
 800377c:	4604      	mov	r4, r0
 800377e:	2301      	movs	r3, #1
 8003780:	e7f0      	b.n	8003764 <_svfiprintf_r+0x194>
 8003782:	ab03      	add	r3, sp, #12
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	462a      	mov	r2, r5
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <_svfiprintf_r+0x1f8>)
 800378a:	a904      	add	r1, sp, #16
 800378c:	4638      	mov	r0, r7
 800378e:	f3af 8000 	nop.w
 8003792:	1c42      	adds	r2, r0, #1
 8003794:	4606      	mov	r6, r0
 8003796:	d1d6      	bne.n	8003746 <_svfiprintf_r+0x176>
 8003798:	89ab      	ldrh	r3, [r5, #12]
 800379a:	065b      	lsls	r3, r3, #25
 800379c:	f53f af2c 	bmi.w	80035f8 <_svfiprintf_r+0x28>
 80037a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037a2:	b01d      	add	sp, #116	; 0x74
 80037a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a8:	ab03      	add	r3, sp, #12
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	462a      	mov	r2, r5
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <_svfiprintf_r+0x1f8>)
 80037b0:	a904      	add	r1, sp, #16
 80037b2:	4638      	mov	r0, r7
 80037b4:	f000 f87a 	bl	80038ac <_printf_i>
 80037b8:	e7eb      	b.n	8003792 <_svfiprintf_r+0x1c2>
 80037ba:	bf00      	nop
 80037bc:	0800561c 	.word	0x0800561c
 80037c0:	08005626 	.word	0x08005626
 80037c4:	00000000 	.word	0x00000000
 80037c8:	08003519 	.word	0x08003519
 80037cc:	08005622 	.word	0x08005622

080037d0 <_printf_common>:
 80037d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d4:	4616      	mov	r6, r2
 80037d6:	4699      	mov	r9, r3
 80037d8:	688a      	ldr	r2, [r1, #8]
 80037da:	690b      	ldr	r3, [r1, #16]
 80037dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bfb8      	it	lt
 80037e4:	4613      	movlt	r3, r2
 80037e6:	6033      	str	r3, [r6, #0]
 80037e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037ec:	4607      	mov	r7, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	b10a      	cbz	r2, 80037f6 <_printf_common+0x26>
 80037f2:	3301      	adds	r3, #1
 80037f4:	6033      	str	r3, [r6, #0]
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	0699      	lsls	r1, r3, #26
 80037fa:	bf42      	ittt	mi
 80037fc:	6833      	ldrmi	r3, [r6, #0]
 80037fe:	3302      	addmi	r3, #2
 8003800:	6033      	strmi	r3, [r6, #0]
 8003802:	6825      	ldr	r5, [r4, #0]
 8003804:	f015 0506 	ands.w	r5, r5, #6
 8003808:	d106      	bne.n	8003818 <_printf_common+0x48>
 800380a:	f104 0a19 	add.w	sl, r4, #25
 800380e:	68e3      	ldr	r3, [r4, #12]
 8003810:	6832      	ldr	r2, [r6, #0]
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	42ab      	cmp	r3, r5
 8003816:	dc26      	bgt.n	8003866 <_printf_common+0x96>
 8003818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800381c:	1e13      	subs	r3, r2, #0
 800381e:	6822      	ldr	r2, [r4, #0]
 8003820:	bf18      	it	ne
 8003822:	2301      	movne	r3, #1
 8003824:	0692      	lsls	r2, r2, #26
 8003826:	d42b      	bmi.n	8003880 <_printf_common+0xb0>
 8003828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800382c:	4649      	mov	r1, r9
 800382e:	4638      	mov	r0, r7
 8003830:	47c0      	blx	r8
 8003832:	3001      	adds	r0, #1
 8003834:	d01e      	beq.n	8003874 <_printf_common+0xa4>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	68e5      	ldr	r5, [r4, #12]
 800383a:	6832      	ldr	r2, [r6, #0]
 800383c:	f003 0306 	and.w	r3, r3, #6
 8003840:	2b04      	cmp	r3, #4
 8003842:	bf08      	it	eq
 8003844:	1aad      	subeq	r5, r5, r2
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	6922      	ldr	r2, [r4, #16]
 800384a:	bf0c      	ite	eq
 800384c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003850:	2500      	movne	r5, #0
 8003852:	4293      	cmp	r3, r2
 8003854:	bfc4      	itt	gt
 8003856:	1a9b      	subgt	r3, r3, r2
 8003858:	18ed      	addgt	r5, r5, r3
 800385a:	2600      	movs	r6, #0
 800385c:	341a      	adds	r4, #26
 800385e:	42b5      	cmp	r5, r6
 8003860:	d11a      	bne.n	8003898 <_printf_common+0xc8>
 8003862:	2000      	movs	r0, #0
 8003864:	e008      	b.n	8003878 <_printf_common+0xa8>
 8003866:	2301      	movs	r3, #1
 8003868:	4652      	mov	r2, sl
 800386a:	4649      	mov	r1, r9
 800386c:	4638      	mov	r0, r7
 800386e:	47c0      	blx	r8
 8003870:	3001      	adds	r0, #1
 8003872:	d103      	bne.n	800387c <_printf_common+0xac>
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387c:	3501      	adds	r5, #1
 800387e:	e7c6      	b.n	800380e <_printf_common+0x3e>
 8003880:	18e1      	adds	r1, r4, r3
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	2030      	movs	r0, #48	; 0x30
 8003886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800388a:	4422      	add	r2, r4
 800388c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003894:	3302      	adds	r3, #2
 8003896:	e7c7      	b.n	8003828 <_printf_common+0x58>
 8003898:	2301      	movs	r3, #1
 800389a:	4622      	mov	r2, r4
 800389c:	4649      	mov	r1, r9
 800389e:	4638      	mov	r0, r7
 80038a0:	47c0      	blx	r8
 80038a2:	3001      	adds	r0, #1
 80038a4:	d0e6      	beq.n	8003874 <_printf_common+0xa4>
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7d9      	b.n	800385e <_printf_common+0x8e>
	...

080038ac <_printf_i>:
 80038ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038b0:	460c      	mov	r4, r1
 80038b2:	4691      	mov	r9, r2
 80038b4:	7e27      	ldrb	r7, [r4, #24]
 80038b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038b8:	2f78      	cmp	r7, #120	; 0x78
 80038ba:	4680      	mov	r8, r0
 80038bc:	469a      	mov	sl, r3
 80038be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c2:	d807      	bhi.n	80038d4 <_printf_i+0x28>
 80038c4:	2f62      	cmp	r7, #98	; 0x62
 80038c6:	d80a      	bhi.n	80038de <_printf_i+0x32>
 80038c8:	2f00      	cmp	r7, #0
 80038ca:	f000 80d8 	beq.w	8003a7e <_printf_i+0x1d2>
 80038ce:	2f58      	cmp	r7, #88	; 0x58
 80038d0:	f000 80a3 	beq.w	8003a1a <_printf_i+0x16e>
 80038d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038dc:	e03a      	b.n	8003954 <_printf_i+0xa8>
 80038de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038e2:	2b15      	cmp	r3, #21
 80038e4:	d8f6      	bhi.n	80038d4 <_printf_i+0x28>
 80038e6:	a001      	add	r0, pc, #4	; (adr r0, 80038ec <_printf_i+0x40>)
 80038e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80038ec:	08003945 	.word	0x08003945
 80038f0:	08003959 	.word	0x08003959
 80038f4:	080038d5 	.word	0x080038d5
 80038f8:	080038d5 	.word	0x080038d5
 80038fc:	080038d5 	.word	0x080038d5
 8003900:	080038d5 	.word	0x080038d5
 8003904:	08003959 	.word	0x08003959
 8003908:	080038d5 	.word	0x080038d5
 800390c:	080038d5 	.word	0x080038d5
 8003910:	080038d5 	.word	0x080038d5
 8003914:	080038d5 	.word	0x080038d5
 8003918:	08003a65 	.word	0x08003a65
 800391c:	08003989 	.word	0x08003989
 8003920:	08003a47 	.word	0x08003a47
 8003924:	080038d5 	.word	0x080038d5
 8003928:	080038d5 	.word	0x080038d5
 800392c:	08003a87 	.word	0x08003a87
 8003930:	080038d5 	.word	0x080038d5
 8003934:	08003989 	.word	0x08003989
 8003938:	080038d5 	.word	0x080038d5
 800393c:	080038d5 	.word	0x080038d5
 8003940:	08003a4f 	.word	0x08003a4f
 8003944:	680b      	ldr	r3, [r1, #0]
 8003946:	1d1a      	adds	r2, r3, #4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	600a      	str	r2, [r1, #0]
 800394c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003954:	2301      	movs	r3, #1
 8003956:	e0a3      	b.n	8003aa0 <_printf_i+0x1f4>
 8003958:	6825      	ldr	r5, [r4, #0]
 800395a:	6808      	ldr	r0, [r1, #0]
 800395c:	062e      	lsls	r6, r5, #24
 800395e:	f100 0304 	add.w	r3, r0, #4
 8003962:	d50a      	bpl.n	800397a <_printf_i+0xce>
 8003964:	6805      	ldr	r5, [r0, #0]
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	2d00      	cmp	r5, #0
 800396a:	da03      	bge.n	8003974 <_printf_i+0xc8>
 800396c:	232d      	movs	r3, #45	; 0x2d
 800396e:	426d      	negs	r5, r5
 8003970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003974:	485e      	ldr	r0, [pc, #376]	; (8003af0 <_printf_i+0x244>)
 8003976:	230a      	movs	r3, #10
 8003978:	e019      	b.n	80039ae <_printf_i+0x102>
 800397a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800397e:	6805      	ldr	r5, [r0, #0]
 8003980:	600b      	str	r3, [r1, #0]
 8003982:	bf18      	it	ne
 8003984:	b22d      	sxthne	r5, r5
 8003986:	e7ef      	b.n	8003968 <_printf_i+0xbc>
 8003988:	680b      	ldr	r3, [r1, #0]
 800398a:	6825      	ldr	r5, [r4, #0]
 800398c:	1d18      	adds	r0, r3, #4
 800398e:	6008      	str	r0, [r1, #0]
 8003990:	0628      	lsls	r0, r5, #24
 8003992:	d501      	bpl.n	8003998 <_printf_i+0xec>
 8003994:	681d      	ldr	r5, [r3, #0]
 8003996:	e002      	b.n	800399e <_printf_i+0xf2>
 8003998:	0669      	lsls	r1, r5, #25
 800399a:	d5fb      	bpl.n	8003994 <_printf_i+0xe8>
 800399c:	881d      	ldrh	r5, [r3, #0]
 800399e:	4854      	ldr	r0, [pc, #336]	; (8003af0 <_printf_i+0x244>)
 80039a0:	2f6f      	cmp	r7, #111	; 0x6f
 80039a2:	bf0c      	ite	eq
 80039a4:	2308      	moveq	r3, #8
 80039a6:	230a      	movne	r3, #10
 80039a8:	2100      	movs	r1, #0
 80039aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039ae:	6866      	ldr	r6, [r4, #4]
 80039b0:	60a6      	str	r6, [r4, #8]
 80039b2:	2e00      	cmp	r6, #0
 80039b4:	bfa2      	ittt	ge
 80039b6:	6821      	ldrge	r1, [r4, #0]
 80039b8:	f021 0104 	bicge.w	r1, r1, #4
 80039bc:	6021      	strge	r1, [r4, #0]
 80039be:	b90d      	cbnz	r5, 80039c4 <_printf_i+0x118>
 80039c0:	2e00      	cmp	r6, #0
 80039c2:	d04d      	beq.n	8003a60 <_printf_i+0x1b4>
 80039c4:	4616      	mov	r6, r2
 80039c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80039ca:	fb03 5711 	mls	r7, r3, r1, r5
 80039ce:	5dc7      	ldrb	r7, [r0, r7]
 80039d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039d4:	462f      	mov	r7, r5
 80039d6:	42bb      	cmp	r3, r7
 80039d8:	460d      	mov	r5, r1
 80039da:	d9f4      	bls.n	80039c6 <_printf_i+0x11a>
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d10b      	bne.n	80039f8 <_printf_i+0x14c>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	07df      	lsls	r7, r3, #31
 80039e4:	d508      	bpl.n	80039f8 <_printf_i+0x14c>
 80039e6:	6923      	ldr	r3, [r4, #16]
 80039e8:	6861      	ldr	r1, [r4, #4]
 80039ea:	4299      	cmp	r1, r3
 80039ec:	bfde      	ittt	le
 80039ee:	2330      	movle	r3, #48	; 0x30
 80039f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039f8:	1b92      	subs	r2, r2, r6
 80039fa:	6122      	str	r2, [r4, #16]
 80039fc:	f8cd a000 	str.w	sl, [sp]
 8003a00:	464b      	mov	r3, r9
 8003a02:	aa03      	add	r2, sp, #12
 8003a04:	4621      	mov	r1, r4
 8003a06:	4640      	mov	r0, r8
 8003a08:	f7ff fee2 	bl	80037d0 <_printf_common>
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d14c      	bne.n	8003aaa <_printf_i+0x1fe>
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	b004      	add	sp, #16
 8003a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a1a:	4835      	ldr	r0, [pc, #212]	; (8003af0 <_printf_i+0x244>)
 8003a1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	680e      	ldr	r6, [r1, #0]
 8003a24:	061f      	lsls	r7, r3, #24
 8003a26:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a2a:	600e      	str	r6, [r1, #0]
 8003a2c:	d514      	bpl.n	8003a58 <_printf_i+0x1ac>
 8003a2e:	07d9      	lsls	r1, r3, #31
 8003a30:	bf44      	itt	mi
 8003a32:	f043 0320 	orrmi.w	r3, r3, #32
 8003a36:	6023      	strmi	r3, [r4, #0]
 8003a38:	b91d      	cbnz	r5, 8003a42 <_printf_i+0x196>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	f023 0320 	bic.w	r3, r3, #32
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	2310      	movs	r3, #16
 8003a44:	e7b0      	b.n	80039a8 <_printf_i+0xfc>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	f043 0320 	orr.w	r3, r3, #32
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	2378      	movs	r3, #120	; 0x78
 8003a50:	4828      	ldr	r0, [pc, #160]	; (8003af4 <_printf_i+0x248>)
 8003a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a56:	e7e3      	b.n	8003a20 <_printf_i+0x174>
 8003a58:	065e      	lsls	r6, r3, #25
 8003a5a:	bf48      	it	mi
 8003a5c:	b2ad      	uxthmi	r5, r5
 8003a5e:	e7e6      	b.n	8003a2e <_printf_i+0x182>
 8003a60:	4616      	mov	r6, r2
 8003a62:	e7bb      	b.n	80039dc <_printf_i+0x130>
 8003a64:	680b      	ldr	r3, [r1, #0]
 8003a66:	6826      	ldr	r6, [r4, #0]
 8003a68:	6960      	ldr	r0, [r4, #20]
 8003a6a:	1d1d      	adds	r5, r3, #4
 8003a6c:	600d      	str	r5, [r1, #0]
 8003a6e:	0635      	lsls	r5, r6, #24
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	d501      	bpl.n	8003a78 <_printf_i+0x1cc>
 8003a74:	6018      	str	r0, [r3, #0]
 8003a76:	e002      	b.n	8003a7e <_printf_i+0x1d2>
 8003a78:	0671      	lsls	r1, r6, #25
 8003a7a:	d5fb      	bpl.n	8003a74 <_printf_i+0x1c8>
 8003a7c:	8018      	strh	r0, [r3, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6123      	str	r3, [r4, #16]
 8003a82:	4616      	mov	r6, r2
 8003a84:	e7ba      	b.n	80039fc <_printf_i+0x150>
 8003a86:	680b      	ldr	r3, [r1, #0]
 8003a88:	1d1a      	adds	r2, r3, #4
 8003a8a:	600a      	str	r2, [r1, #0]
 8003a8c:	681e      	ldr	r6, [r3, #0]
 8003a8e:	6862      	ldr	r2, [r4, #4]
 8003a90:	2100      	movs	r1, #0
 8003a92:	4630      	mov	r0, r6
 8003a94:	f7fc fb9c 	bl	80001d0 <memchr>
 8003a98:	b108      	cbz	r0, 8003a9e <_printf_i+0x1f2>
 8003a9a:	1b80      	subs	r0, r0, r6
 8003a9c:	6060      	str	r0, [r4, #4]
 8003a9e:	6863      	ldr	r3, [r4, #4]
 8003aa0:	6123      	str	r3, [r4, #16]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa8:	e7a8      	b.n	80039fc <_printf_i+0x150>
 8003aaa:	6923      	ldr	r3, [r4, #16]
 8003aac:	4632      	mov	r2, r6
 8003aae:	4649      	mov	r1, r9
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	47d0      	blx	sl
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d0ab      	beq.n	8003a10 <_printf_i+0x164>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	079b      	lsls	r3, r3, #30
 8003abc:	d413      	bmi.n	8003ae6 <_printf_i+0x23a>
 8003abe:	68e0      	ldr	r0, [r4, #12]
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	4298      	cmp	r0, r3
 8003ac4:	bfb8      	it	lt
 8003ac6:	4618      	movlt	r0, r3
 8003ac8:	e7a4      	b.n	8003a14 <_printf_i+0x168>
 8003aca:	2301      	movs	r3, #1
 8003acc:	4632      	mov	r2, r6
 8003ace:	4649      	mov	r1, r9
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	47d0      	blx	sl
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d09b      	beq.n	8003a10 <_printf_i+0x164>
 8003ad8:	3501      	adds	r5, #1
 8003ada:	68e3      	ldr	r3, [r4, #12]
 8003adc:	9903      	ldr	r1, [sp, #12]
 8003ade:	1a5b      	subs	r3, r3, r1
 8003ae0:	42ab      	cmp	r3, r5
 8003ae2:	dcf2      	bgt.n	8003aca <_printf_i+0x21e>
 8003ae4:	e7eb      	b.n	8003abe <_printf_i+0x212>
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	f104 0619 	add.w	r6, r4, #25
 8003aec:	e7f5      	b.n	8003ada <_printf_i+0x22e>
 8003aee:	bf00      	nop
 8003af0:	0800562d 	.word	0x0800562d
 8003af4:	0800563e 	.word	0x0800563e

08003af8 <_sbrk_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4d06      	ldr	r5, [pc, #24]	; (8003b14 <_sbrk_r+0x1c>)
 8003afc:	2300      	movs	r3, #0
 8003afe:	4604      	mov	r4, r0
 8003b00:	4608      	mov	r0, r1
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	f7fe f9a2 	bl	8001e4c <_sbrk>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_sbrk_r+0x1a>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_sbrk_r+0x1a>
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	200001b0 	.word	0x200001b0

08003b18 <strcpy>:
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b1e:	f803 2b01 	strb.w	r2, [r3], #1
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	d1f9      	bne.n	8003b1a <strcpy+0x2>
 8003b26:	4770      	bx	lr

08003b28 <__assert_func>:
 8003b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <__assert_func+0x2c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4605      	mov	r5, r0
 8003b34:	68d8      	ldr	r0, [r3, #12]
 8003b36:	b14c      	cbz	r4, 8003b4c <__assert_func+0x24>
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <__assert_func+0x30>)
 8003b3a:	9100      	str	r1, [sp, #0]
 8003b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b40:	4906      	ldr	r1, [pc, #24]	; (8003b5c <__assert_func+0x34>)
 8003b42:	462b      	mov	r3, r5
 8003b44:	f000 fe88 	bl	8004858 <fiprintf>
 8003b48:	f001 f946 	bl	8004dd8 <abort>
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <__assert_func+0x38>)
 8003b4e:	461c      	mov	r4, r3
 8003b50:	e7f3      	b.n	8003b3a <__assert_func+0x12>
 8003b52:	bf00      	nop
 8003b54:	20000004 	.word	0x20000004
 8003b58:	0800564f 	.word	0x0800564f
 8003b5c:	0800565c 	.word	0x0800565c
 8003b60:	0800568a 	.word	0x0800568a

08003b64 <quorem>:
 8003b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b68:	6903      	ldr	r3, [r0, #16]
 8003b6a:	690c      	ldr	r4, [r1, #16]
 8003b6c:	42a3      	cmp	r3, r4
 8003b6e:	4607      	mov	r7, r0
 8003b70:	f2c0 8081 	blt.w	8003c76 <quorem+0x112>
 8003b74:	3c01      	subs	r4, #1
 8003b76:	f101 0814 	add.w	r8, r1, #20
 8003b7a:	f100 0514 	add.w	r5, r0, #20
 8003b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b9c:	d331      	bcc.n	8003c02 <quorem+0x9e>
 8003b9e:	f04f 0e00 	mov.w	lr, #0
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	46ac      	mov	ip, r5
 8003ba6:	46f2      	mov	sl, lr
 8003ba8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bac:	b293      	uxth	r3, r2
 8003bae:	fb06 e303 	mla	r3, r6, r3, lr
 8003bb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	ebaa 0303 	sub.w	r3, sl, r3
 8003bbc:	0c12      	lsrs	r2, r2, #16
 8003bbe:	f8dc a000 	ldr.w	sl, [ip]
 8003bc2:	fb06 e202 	mla	r2, r6, r2, lr
 8003bc6:	fa13 f38a 	uxtah	r3, r3, sl
 8003bca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bce:	fa1f fa82 	uxth.w	sl, r2
 8003bd2:	f8dc 2000 	ldr.w	r2, [ip]
 8003bd6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003bda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003be4:	4581      	cmp	r9, r0
 8003be6:	f84c 3b04 	str.w	r3, [ip], #4
 8003bea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003bee:	d2db      	bcs.n	8003ba8 <quorem+0x44>
 8003bf0:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bf4:	b92b      	cbnz	r3, 8003c02 <quorem+0x9e>
 8003bf6:	9b01      	ldr	r3, [sp, #4]
 8003bf8:	3b04      	subs	r3, #4
 8003bfa:	429d      	cmp	r5, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	d32e      	bcc.n	8003c5e <quorem+0xfa>
 8003c00:	613c      	str	r4, [r7, #16]
 8003c02:	4638      	mov	r0, r7
 8003c04:	f7ff fada 	bl	80031bc <__mcmp>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	db24      	blt.n	8003c56 <quorem+0xf2>
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f04f 0c00 	mov.w	ip, #0
 8003c14:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c18:	f8d0 e000 	ldr.w	lr, [r0]
 8003c1c:	b293      	uxth	r3, r2
 8003c1e:	ebac 0303 	sub.w	r3, ip, r3
 8003c22:	0c12      	lsrs	r2, r2, #16
 8003c24:	fa13 f38e 	uxtah	r3, r3, lr
 8003c28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c36:	45c1      	cmp	r9, r8
 8003c38:	f840 3b04 	str.w	r3, [r0], #4
 8003c3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c40:	d2e8      	bcs.n	8003c14 <quorem+0xb0>
 8003c42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c4a:	b922      	cbnz	r2, 8003c56 <quorem+0xf2>
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	429d      	cmp	r5, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	d30a      	bcc.n	8003c6a <quorem+0x106>
 8003c54:	613c      	str	r4, [r7, #16]
 8003c56:	4630      	mov	r0, r6
 8003c58:	b003      	add	sp, #12
 8003c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	3b04      	subs	r3, #4
 8003c62:	2a00      	cmp	r2, #0
 8003c64:	d1cc      	bne.n	8003c00 <quorem+0x9c>
 8003c66:	3c01      	subs	r4, #1
 8003c68:	e7c7      	b.n	8003bfa <quorem+0x96>
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	3b04      	subs	r3, #4
 8003c6e:	2a00      	cmp	r2, #0
 8003c70:	d1f0      	bne.n	8003c54 <quorem+0xf0>
 8003c72:	3c01      	subs	r4, #1
 8003c74:	e7eb      	b.n	8003c4e <quorem+0xea>
 8003c76:	2000      	movs	r0, #0
 8003c78:	e7ee      	b.n	8003c58 <quorem+0xf4>
 8003c7a:	0000      	movs	r0, r0
 8003c7c:	0000      	movs	r0, r0
	...

08003c80 <_dtoa_r>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	ed2d 8b02 	vpush	{d8}
 8003c88:	ec57 6b10 	vmov	r6, r7, d0
 8003c8c:	b095      	sub	sp, #84	; 0x54
 8003c8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003c90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003c94:	9105      	str	r1, [sp, #20]
 8003c96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ca0:	b975      	cbnz	r5, 8003cc0 <_dtoa_r+0x40>
 8003ca2:	2010      	movs	r0, #16
 8003ca4:	f000 fdea 	bl	800487c <malloc>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6260      	str	r0, [r4, #36]	; 0x24
 8003cac:	b920      	cbnz	r0, 8003cb8 <_dtoa_r+0x38>
 8003cae:	4bb2      	ldr	r3, [pc, #712]	; (8003f78 <_dtoa_r+0x2f8>)
 8003cb0:	21ea      	movs	r1, #234	; 0xea
 8003cb2:	48b2      	ldr	r0, [pc, #712]	; (8003f7c <_dtoa_r+0x2fc>)
 8003cb4:	f7ff ff38 	bl	8003b28 <__assert_func>
 8003cb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003cbc:	6005      	str	r5, [r0, #0]
 8003cbe:	60c5      	str	r5, [r0, #12]
 8003cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	b151      	cbz	r1, 8003cdc <_dtoa_r+0x5c>
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	604a      	str	r2, [r1, #4]
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7ff f835 	bl	8002d40 <_Bfree>
 8003cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	1e3b      	subs	r3, r7, #0
 8003cde:	bfb9      	ittee	lt
 8003ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ce4:	9303      	strlt	r3, [sp, #12]
 8003ce6:	2300      	movge	r3, #0
 8003ce8:	f8c8 3000 	strge.w	r3, [r8]
 8003cec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003cf0:	4ba3      	ldr	r3, [pc, #652]	; (8003f80 <_dtoa_r+0x300>)
 8003cf2:	bfbc      	itt	lt
 8003cf4:	2201      	movlt	r2, #1
 8003cf6:	f8c8 2000 	strlt.w	r2, [r8]
 8003cfa:	ea33 0309 	bics.w	r3, r3, r9
 8003cfe:	d11b      	bne.n	8003d38 <_dtoa_r+0xb8>
 8003d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d02:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d0c:	4333      	orrs	r3, r6
 8003d0e:	f000 857a 	beq.w	8004806 <_dtoa_r+0xb86>
 8003d12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d14:	b963      	cbnz	r3, 8003d30 <_dtoa_r+0xb0>
 8003d16:	4b9b      	ldr	r3, [pc, #620]	; (8003f84 <_dtoa_r+0x304>)
 8003d18:	e024      	b.n	8003d64 <_dtoa_r+0xe4>
 8003d1a:	4b9b      	ldr	r3, [pc, #620]	; (8003f88 <_dtoa_r+0x308>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	9800      	ldr	r0, [sp, #0]
 8003d26:	b015      	add	sp, #84	; 0x54
 8003d28:	ecbd 8b02 	vpop	{d8}
 8003d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d30:	4b94      	ldr	r3, [pc, #592]	; (8003f84 <_dtoa_r+0x304>)
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	3303      	adds	r3, #3
 8003d36:	e7f3      	b.n	8003d20 <_dtoa_r+0xa0>
 8003d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	ec51 0b17 	vmov	r0, r1, d7
 8003d42:	2300      	movs	r3, #0
 8003d44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003d48:	f7fc feb6 	bl	8000ab8 <__aeabi_dcmpeq>
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	b158      	cbz	r0, 8003d68 <_dtoa_r+0xe8>
 8003d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d52:	2301      	movs	r3, #1
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8551 	beq.w	8004800 <_dtoa_r+0xb80>
 8003d5e:	488b      	ldr	r0, [pc, #556]	; (8003f8c <_dtoa_r+0x30c>)
 8003d60:	6018      	str	r0, [r3, #0]
 8003d62:	1e43      	subs	r3, r0, #1
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	e7dd      	b.n	8003d24 <_dtoa_r+0xa4>
 8003d68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003d6c:	aa12      	add	r2, sp, #72	; 0x48
 8003d6e:	a913      	add	r1, sp, #76	; 0x4c
 8003d70:	4620      	mov	r0, r4
 8003d72:	f7ff fac7 	bl	8003304 <__d2b>
 8003d76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003d7a:	4683      	mov	fp, r0
 8003d7c:	2d00      	cmp	r5, #0
 8003d7e:	d07c      	beq.n	8003e7a <_dtoa_r+0x1fa>
 8003d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003d8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003d92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003d96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <_dtoa_r+0x310>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4630      	mov	r0, r6
 8003da0:	4639      	mov	r1, r7
 8003da2:	f7fc fa69 	bl	8000278 <__aeabi_dsub>
 8003da6:	a36e      	add	r3, pc, #440	; (adr r3, 8003f60 <_dtoa_r+0x2e0>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fc1c 	bl	80005e8 <__aeabi_dmul>
 8003db0:	a36d      	add	r3, pc, #436	; (adr r3, 8003f68 <_dtoa_r+0x2e8>)
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	f7fc fa61 	bl	800027c <__adddf3>
 8003dba:	4606      	mov	r6, r0
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	460f      	mov	r7, r1
 8003dc0:	f7fc fba8 	bl	8000514 <__aeabi_i2d>
 8003dc4:	a36a      	add	r3, pc, #424	; (adr r3, 8003f70 <_dtoa_r+0x2f0>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc fc0d 	bl	80005e8 <__aeabi_dmul>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	4639      	mov	r1, r7
 8003dd6:	f7fc fa51 	bl	800027c <__adddf3>
 8003dda:	4606      	mov	r6, r0
 8003ddc:	460f      	mov	r7, r1
 8003dde:	f7fc fe9d 	bl	8000b1c <__aeabi_d2iz>
 8003de2:	2200      	movs	r2, #0
 8003de4:	4682      	mov	sl, r0
 8003de6:	2300      	movs	r3, #0
 8003de8:	4630      	mov	r0, r6
 8003dea:	4639      	mov	r1, r7
 8003dec:	f7fc fe6e 	bl	8000acc <__aeabi_dcmplt>
 8003df0:	b148      	cbz	r0, 8003e06 <_dtoa_r+0x186>
 8003df2:	4650      	mov	r0, sl
 8003df4:	f7fc fb8e 	bl	8000514 <__aeabi_i2d>
 8003df8:	4632      	mov	r2, r6
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	f7fc fe5c 	bl	8000ab8 <__aeabi_dcmpeq>
 8003e00:	b908      	cbnz	r0, 8003e06 <_dtoa_r+0x186>
 8003e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e06:	f1ba 0f16 	cmp.w	sl, #22
 8003e0a:	d854      	bhi.n	8003eb6 <_dtoa_r+0x236>
 8003e0c:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <_dtoa_r+0x314>)
 8003e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e1a:	f7fc fe57 	bl	8000acc <__aeabi_dcmplt>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d04b      	beq.n	8003eba <_dtoa_r+0x23a>
 8003e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e26:	2300      	movs	r3, #0
 8003e28:	930e      	str	r3, [sp, #56]	; 0x38
 8003e2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e2c:	1b5d      	subs	r5, r3, r5
 8003e2e:	1e6b      	subs	r3, r5, #1
 8003e30:	9304      	str	r3, [sp, #16]
 8003e32:	bf43      	ittte	mi
 8003e34:	2300      	movmi	r3, #0
 8003e36:	f1c5 0801 	rsbmi	r8, r5, #1
 8003e3a:	9304      	strmi	r3, [sp, #16]
 8003e3c:	f04f 0800 	movpl.w	r8, #0
 8003e40:	f1ba 0f00 	cmp.w	sl, #0
 8003e44:	db3b      	blt.n	8003ebe <_dtoa_r+0x23e>
 8003e46:	9b04      	ldr	r3, [sp, #16]
 8003e48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003e4c:	4453      	add	r3, sl
 8003e4e:	9304      	str	r3, [sp, #16]
 8003e50:	2300      	movs	r3, #0
 8003e52:	9306      	str	r3, [sp, #24]
 8003e54:	9b05      	ldr	r3, [sp, #20]
 8003e56:	2b09      	cmp	r3, #9
 8003e58:	d869      	bhi.n	8003f2e <_dtoa_r+0x2ae>
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	bfc4      	itt	gt
 8003e5e:	3b04      	subgt	r3, #4
 8003e60:	9305      	strgt	r3, [sp, #20]
 8003e62:	9b05      	ldr	r3, [sp, #20]
 8003e64:	f1a3 0302 	sub.w	r3, r3, #2
 8003e68:	bfcc      	ite	gt
 8003e6a:	2500      	movgt	r5, #0
 8003e6c:	2501      	movle	r5, #1
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d869      	bhi.n	8003f46 <_dtoa_r+0x2c6>
 8003e72:	e8df f003 	tbb	[pc, r3]
 8003e76:	4e2c      	.short	0x4e2c
 8003e78:	5a4c      	.short	0x5a4c
 8003e7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003e7e:	441d      	add	r5, r3
 8003e80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	bfc1      	itttt	gt
 8003e88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003e90:	fa09 f303 	lslgt.w	r3, r9, r3
 8003e94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003e98:	bfda      	itte	le
 8003e9a:	f1c3 0320 	rsble	r3, r3, #32
 8003e9e:	fa06 f003 	lslle.w	r0, r6, r3
 8003ea2:	4318      	orrgt	r0, r3
 8003ea4:	f7fc fb26 	bl	80004f4 <__aeabi_ui2d>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4606      	mov	r6, r0
 8003eac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003eb0:	3d01      	subs	r5, #1
 8003eb2:	9310      	str	r3, [sp, #64]	; 0x40
 8003eb4:	e771      	b.n	8003d9a <_dtoa_r+0x11a>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e7b6      	b.n	8003e28 <_dtoa_r+0x1a8>
 8003eba:	900e      	str	r0, [sp, #56]	; 0x38
 8003ebc:	e7b5      	b.n	8003e2a <_dtoa_r+0x1aa>
 8003ebe:	f1ca 0300 	rsb	r3, sl, #0
 8003ec2:	9306      	str	r3, [sp, #24]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	eba8 080a 	sub.w	r8, r8, sl
 8003eca:	930d      	str	r3, [sp, #52]	; 0x34
 8003ecc:	e7c2      	b.n	8003e54 <_dtoa_r+0x1d4>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9308      	str	r3, [sp, #32]
 8003ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	dc39      	bgt.n	8003f4c <_dtoa_r+0x2cc>
 8003ed8:	f04f 0901 	mov.w	r9, #1
 8003edc:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003ee6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ee8:	2200      	movs	r2, #0
 8003eea:	6042      	str	r2, [r0, #4]
 8003eec:	2204      	movs	r2, #4
 8003eee:	f102 0614 	add.w	r6, r2, #20
 8003ef2:	429e      	cmp	r6, r3
 8003ef4:	6841      	ldr	r1, [r0, #4]
 8003ef6:	d92f      	bls.n	8003f58 <_dtoa_r+0x2d8>
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f7fe fee1 	bl	8002cc0 <_Balloc>
 8003efe:	9000      	str	r0, [sp, #0]
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d14b      	bne.n	8003f9c <_dtoa_r+0x31c>
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <_dtoa_r+0x318>)
 8003f06:	4602      	mov	r2, r0
 8003f08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f0c:	e6d1      	b.n	8003cb2 <_dtoa_r+0x32>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e7de      	b.n	8003ed0 <_dtoa_r+0x250>
 8003f12:	2300      	movs	r3, #0
 8003f14:	9308      	str	r3, [sp, #32]
 8003f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f18:	eb0a 0903 	add.w	r9, sl, r3
 8003f1c:	f109 0301 	add.w	r3, r9, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	bfb8      	it	lt
 8003f26:	2301      	movlt	r3, #1
 8003f28:	e7dd      	b.n	8003ee6 <_dtoa_r+0x266>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e7f2      	b.n	8003f14 <_dtoa_r+0x294>
 8003f2e:	2501      	movs	r5, #1
 8003f30:	2300      	movs	r3, #0
 8003f32:	9305      	str	r3, [sp, #20]
 8003f34:	9508      	str	r5, [sp, #32]
 8003f36:	f04f 39ff 	mov.w	r9, #4294967295
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f40:	2312      	movs	r3, #18
 8003f42:	9209      	str	r2, [sp, #36]	; 0x24
 8003f44:	e7cf      	b.n	8003ee6 <_dtoa_r+0x266>
 8003f46:	2301      	movs	r3, #1
 8003f48:	9308      	str	r3, [sp, #32]
 8003f4a:	e7f4      	b.n	8003f36 <_dtoa_r+0x2b6>
 8003f4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003f50:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f54:	464b      	mov	r3, r9
 8003f56:	e7c6      	b.n	8003ee6 <_dtoa_r+0x266>
 8003f58:	3101      	adds	r1, #1
 8003f5a:	6041      	str	r1, [r0, #4]
 8003f5c:	0052      	lsls	r2, r2, #1
 8003f5e:	e7c6      	b.n	8003eee <_dtoa_r+0x26e>
 8003f60:	636f4361 	.word	0x636f4361
 8003f64:	3fd287a7 	.word	0x3fd287a7
 8003f68:	8b60c8b3 	.word	0x8b60c8b3
 8003f6c:	3fc68a28 	.word	0x3fc68a28
 8003f70:	509f79fb 	.word	0x509f79fb
 8003f74:	3fd34413 	.word	0x3fd34413
 8003f78:	08005498 	.word	0x08005498
 8003f7c:	0800569a 	.word	0x0800569a
 8003f80:	7ff00000 	.word	0x7ff00000
 8003f84:	08005694 	.word	0x08005694
 8003f88:	0800568b 	.word	0x0800568b
 8003f8c:	08005699 	.word	0x08005699
 8003f90:	3ff80000 	.word	0x3ff80000
 8003f94:	08005548 	.word	0x08005548
 8003f98:	0800550f 	.word	0x0800550f
 8003f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f9e:	9a00      	ldr	r2, [sp, #0]
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	9b01      	ldr	r3, [sp, #4]
 8003fa4:	2b0e      	cmp	r3, #14
 8003fa6:	f200 80ad 	bhi.w	8004104 <_dtoa_r+0x484>
 8003faa:	2d00      	cmp	r5, #0
 8003fac:	f000 80aa 	beq.w	8004104 <_dtoa_r+0x484>
 8003fb0:	f1ba 0f00 	cmp.w	sl, #0
 8003fb4:	dd36      	ble.n	8004024 <_dtoa_r+0x3a4>
 8003fb6:	4ac3      	ldr	r2, [pc, #780]	; (80042c4 <_dtoa_r+0x644>)
 8003fb8:	f00a 030f 	and.w	r3, sl, #15
 8003fbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fc0:	ed93 7b00 	vldr	d7, [r3]
 8003fc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003fc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003fcc:	eeb0 8a47 	vmov.f32	s16, s14
 8003fd0:	eef0 8a67 	vmov.f32	s17, s15
 8003fd4:	d016      	beq.n	8004004 <_dtoa_r+0x384>
 8003fd6:	4bbc      	ldr	r3, [pc, #752]	; (80042c8 <_dtoa_r+0x648>)
 8003fd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fe0:	f7fc fc2c 	bl	800083c <__aeabi_ddiv>
 8003fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fe8:	f007 070f 	and.w	r7, r7, #15
 8003fec:	2503      	movs	r5, #3
 8003fee:	4eb6      	ldr	r6, [pc, #728]	; (80042c8 <_dtoa_r+0x648>)
 8003ff0:	b957      	cbnz	r7, 8004008 <_dtoa_r+0x388>
 8003ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ff6:	ec53 2b18 	vmov	r2, r3, d8
 8003ffa:	f7fc fc1f 	bl	800083c <__aeabi_ddiv>
 8003ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004002:	e029      	b.n	8004058 <_dtoa_r+0x3d8>
 8004004:	2502      	movs	r5, #2
 8004006:	e7f2      	b.n	8003fee <_dtoa_r+0x36e>
 8004008:	07f9      	lsls	r1, r7, #31
 800400a:	d508      	bpl.n	800401e <_dtoa_r+0x39e>
 800400c:	ec51 0b18 	vmov	r0, r1, d8
 8004010:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004014:	f7fc fae8 	bl	80005e8 <__aeabi_dmul>
 8004018:	ec41 0b18 	vmov	d8, r0, r1
 800401c:	3501      	adds	r5, #1
 800401e:	107f      	asrs	r7, r7, #1
 8004020:	3608      	adds	r6, #8
 8004022:	e7e5      	b.n	8003ff0 <_dtoa_r+0x370>
 8004024:	f000 80a6 	beq.w	8004174 <_dtoa_r+0x4f4>
 8004028:	f1ca 0600 	rsb	r6, sl, #0
 800402c:	4ba5      	ldr	r3, [pc, #660]	; (80042c4 <_dtoa_r+0x644>)
 800402e:	4fa6      	ldr	r7, [pc, #664]	; (80042c8 <_dtoa_r+0x648>)
 8004030:	f006 020f 	and.w	r2, r6, #15
 8004034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004040:	f7fc fad2 	bl	80005e8 <__aeabi_dmul>
 8004044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004048:	1136      	asrs	r6, r6, #4
 800404a:	2300      	movs	r3, #0
 800404c:	2502      	movs	r5, #2
 800404e:	2e00      	cmp	r6, #0
 8004050:	f040 8085 	bne.w	800415e <_dtoa_r+0x4de>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1d2      	bne.n	8003ffe <_dtoa_r+0x37e>
 8004058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 808c 	beq.w	8004178 <_dtoa_r+0x4f8>
 8004060:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004064:	4b99      	ldr	r3, [pc, #612]	; (80042cc <_dtoa_r+0x64c>)
 8004066:	2200      	movs	r2, #0
 8004068:	4630      	mov	r0, r6
 800406a:	4639      	mov	r1, r7
 800406c:	f7fc fd2e 	bl	8000acc <__aeabi_dcmplt>
 8004070:	2800      	cmp	r0, #0
 8004072:	f000 8081 	beq.w	8004178 <_dtoa_r+0x4f8>
 8004076:	9b01      	ldr	r3, [sp, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d07d      	beq.n	8004178 <_dtoa_r+0x4f8>
 800407c:	f1b9 0f00 	cmp.w	r9, #0
 8004080:	dd3c      	ble.n	80040fc <_dtoa_r+0x47c>
 8004082:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004086:	9307      	str	r3, [sp, #28]
 8004088:	2200      	movs	r2, #0
 800408a:	4b91      	ldr	r3, [pc, #580]	; (80042d0 <_dtoa_r+0x650>)
 800408c:	4630      	mov	r0, r6
 800408e:	4639      	mov	r1, r7
 8004090:	f7fc faaa 	bl	80005e8 <__aeabi_dmul>
 8004094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004098:	3501      	adds	r5, #1
 800409a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800409e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040a2:	4628      	mov	r0, r5
 80040a4:	f7fc fa36 	bl	8000514 <__aeabi_i2d>
 80040a8:	4632      	mov	r2, r6
 80040aa:	463b      	mov	r3, r7
 80040ac:	f7fc fa9c 	bl	80005e8 <__aeabi_dmul>
 80040b0:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <_dtoa_r+0x654>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	f7fc f8e2 	bl	800027c <__adddf3>
 80040b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80040bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040c0:	9303      	str	r3, [sp, #12]
 80040c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d15c      	bne.n	8004182 <_dtoa_r+0x502>
 80040c8:	4b83      	ldr	r3, [pc, #524]	; (80042d8 <_dtoa_r+0x658>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	4630      	mov	r0, r6
 80040ce:	4639      	mov	r1, r7
 80040d0:	f7fc f8d2 	bl	8000278 <__aeabi_dsub>
 80040d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040d8:	4606      	mov	r6, r0
 80040da:	460f      	mov	r7, r1
 80040dc:	f7fc fd14 	bl	8000b08 <__aeabi_dcmpgt>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	f040 8296 	bne.w	8004612 <_dtoa_r+0x992>
 80040e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80040ea:	4630      	mov	r0, r6
 80040ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040f0:	4639      	mov	r1, r7
 80040f2:	f7fc fceb 	bl	8000acc <__aeabi_dcmplt>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	f040 8288 	bne.w	800460c <_dtoa_r+0x98c>
 80040fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004100:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004106:	2b00      	cmp	r3, #0
 8004108:	f2c0 8158 	blt.w	80043bc <_dtoa_r+0x73c>
 800410c:	f1ba 0f0e 	cmp.w	sl, #14
 8004110:	f300 8154 	bgt.w	80043bc <_dtoa_r+0x73c>
 8004114:	4b6b      	ldr	r3, [pc, #428]	; (80042c4 <_dtoa_r+0x644>)
 8004116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800411a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800411e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004120:	2b00      	cmp	r3, #0
 8004122:	f280 80e3 	bge.w	80042ec <_dtoa_r+0x66c>
 8004126:	9b01      	ldr	r3, [sp, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f300 80df 	bgt.w	80042ec <_dtoa_r+0x66c>
 800412e:	f040 826d 	bne.w	800460c <_dtoa_r+0x98c>
 8004132:	4b69      	ldr	r3, [pc, #420]	; (80042d8 <_dtoa_r+0x658>)
 8004134:	2200      	movs	r2, #0
 8004136:	4640      	mov	r0, r8
 8004138:	4649      	mov	r1, r9
 800413a:	f7fc fa55 	bl	80005e8 <__aeabi_dmul>
 800413e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004142:	f7fc fcd7 	bl	8000af4 <__aeabi_dcmpge>
 8004146:	9e01      	ldr	r6, [sp, #4]
 8004148:	4637      	mov	r7, r6
 800414a:	2800      	cmp	r0, #0
 800414c:	f040 8243 	bne.w	80045d6 <_dtoa_r+0x956>
 8004150:	9d00      	ldr	r5, [sp, #0]
 8004152:	2331      	movs	r3, #49	; 0x31
 8004154:	f805 3b01 	strb.w	r3, [r5], #1
 8004158:	f10a 0a01 	add.w	sl, sl, #1
 800415c:	e23f      	b.n	80045de <_dtoa_r+0x95e>
 800415e:	07f2      	lsls	r2, r6, #31
 8004160:	d505      	bpl.n	800416e <_dtoa_r+0x4ee>
 8004162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004166:	f7fc fa3f 	bl	80005e8 <__aeabi_dmul>
 800416a:	3501      	adds	r5, #1
 800416c:	2301      	movs	r3, #1
 800416e:	1076      	asrs	r6, r6, #1
 8004170:	3708      	adds	r7, #8
 8004172:	e76c      	b.n	800404e <_dtoa_r+0x3ce>
 8004174:	2502      	movs	r5, #2
 8004176:	e76f      	b.n	8004058 <_dtoa_r+0x3d8>
 8004178:	9b01      	ldr	r3, [sp, #4]
 800417a:	f8cd a01c 	str.w	sl, [sp, #28]
 800417e:	930c      	str	r3, [sp, #48]	; 0x30
 8004180:	e78d      	b.n	800409e <_dtoa_r+0x41e>
 8004182:	9900      	ldr	r1, [sp, #0]
 8004184:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004188:	4b4e      	ldr	r3, [pc, #312]	; (80042c4 <_dtoa_r+0x644>)
 800418a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800418e:	4401      	add	r1, r0
 8004190:	9102      	str	r1, [sp, #8]
 8004192:	9908      	ldr	r1, [sp, #32]
 8004194:	eeb0 8a47 	vmov.f32	s16, s14
 8004198:	eef0 8a67 	vmov.f32	s17, s15
 800419c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041a4:	2900      	cmp	r1, #0
 80041a6:	d045      	beq.n	8004234 <_dtoa_r+0x5b4>
 80041a8:	494c      	ldr	r1, [pc, #304]	; (80042dc <_dtoa_r+0x65c>)
 80041aa:	2000      	movs	r0, #0
 80041ac:	f7fc fb46 	bl	800083c <__aeabi_ddiv>
 80041b0:	ec53 2b18 	vmov	r2, r3, d8
 80041b4:	f7fc f860 	bl	8000278 <__aeabi_dsub>
 80041b8:	9d00      	ldr	r5, [sp, #0]
 80041ba:	ec41 0b18 	vmov	d8, r0, r1
 80041be:	4639      	mov	r1, r7
 80041c0:	4630      	mov	r0, r6
 80041c2:	f7fc fcab 	bl	8000b1c <__aeabi_d2iz>
 80041c6:	900c      	str	r0, [sp, #48]	; 0x30
 80041c8:	f7fc f9a4 	bl	8000514 <__aeabi_i2d>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4630      	mov	r0, r6
 80041d2:	4639      	mov	r1, r7
 80041d4:	f7fc f850 	bl	8000278 <__aeabi_dsub>
 80041d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041da:	3330      	adds	r3, #48	; 0x30
 80041dc:	f805 3b01 	strb.w	r3, [r5], #1
 80041e0:	ec53 2b18 	vmov	r2, r3, d8
 80041e4:	4606      	mov	r6, r0
 80041e6:	460f      	mov	r7, r1
 80041e8:	f7fc fc70 	bl	8000acc <__aeabi_dcmplt>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d165      	bne.n	80042bc <_dtoa_r+0x63c>
 80041f0:	4632      	mov	r2, r6
 80041f2:	463b      	mov	r3, r7
 80041f4:	4935      	ldr	r1, [pc, #212]	; (80042cc <_dtoa_r+0x64c>)
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7fc f83e 	bl	8000278 <__aeabi_dsub>
 80041fc:	ec53 2b18 	vmov	r2, r3, d8
 8004200:	f7fc fc64 	bl	8000acc <__aeabi_dcmplt>
 8004204:	2800      	cmp	r0, #0
 8004206:	f040 80b9 	bne.w	800437c <_dtoa_r+0x6fc>
 800420a:	9b02      	ldr	r3, [sp, #8]
 800420c:	429d      	cmp	r5, r3
 800420e:	f43f af75 	beq.w	80040fc <_dtoa_r+0x47c>
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <_dtoa_r+0x650>)
 8004214:	ec51 0b18 	vmov	r0, r1, d8
 8004218:	2200      	movs	r2, #0
 800421a:	f7fc f9e5 	bl	80005e8 <__aeabi_dmul>
 800421e:	4b2c      	ldr	r3, [pc, #176]	; (80042d0 <_dtoa_r+0x650>)
 8004220:	ec41 0b18 	vmov	d8, r0, r1
 8004224:	2200      	movs	r2, #0
 8004226:	4630      	mov	r0, r6
 8004228:	4639      	mov	r1, r7
 800422a:	f7fc f9dd 	bl	80005e8 <__aeabi_dmul>
 800422e:	4606      	mov	r6, r0
 8004230:	460f      	mov	r7, r1
 8004232:	e7c4      	b.n	80041be <_dtoa_r+0x53e>
 8004234:	ec51 0b17 	vmov	r0, r1, d7
 8004238:	f7fc f9d6 	bl	80005e8 <__aeabi_dmul>
 800423c:	9b02      	ldr	r3, [sp, #8]
 800423e:	9d00      	ldr	r5, [sp, #0]
 8004240:	930c      	str	r3, [sp, #48]	; 0x30
 8004242:	ec41 0b18 	vmov	d8, r0, r1
 8004246:	4639      	mov	r1, r7
 8004248:	4630      	mov	r0, r6
 800424a:	f7fc fc67 	bl	8000b1c <__aeabi_d2iz>
 800424e:	9011      	str	r0, [sp, #68]	; 0x44
 8004250:	f7fc f960 	bl	8000514 <__aeabi_i2d>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4630      	mov	r0, r6
 800425a:	4639      	mov	r1, r7
 800425c:	f7fc f80c 	bl	8000278 <__aeabi_dsub>
 8004260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004262:	3330      	adds	r3, #48	; 0x30
 8004264:	f805 3b01 	strb.w	r3, [r5], #1
 8004268:	9b02      	ldr	r3, [sp, #8]
 800426a:	429d      	cmp	r5, r3
 800426c:	4606      	mov	r6, r0
 800426e:	460f      	mov	r7, r1
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	d134      	bne.n	80042e0 <_dtoa_r+0x660>
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <_dtoa_r+0x65c>)
 8004278:	ec51 0b18 	vmov	r0, r1, d8
 800427c:	f7fb fffe 	bl	800027c <__adddf3>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4630      	mov	r0, r6
 8004286:	4639      	mov	r1, r7
 8004288:	f7fc fc3e 	bl	8000b08 <__aeabi_dcmpgt>
 800428c:	2800      	cmp	r0, #0
 800428e:	d175      	bne.n	800437c <_dtoa_r+0x6fc>
 8004290:	ec53 2b18 	vmov	r2, r3, d8
 8004294:	4911      	ldr	r1, [pc, #68]	; (80042dc <_dtoa_r+0x65c>)
 8004296:	2000      	movs	r0, #0
 8004298:	f7fb ffee 	bl	8000278 <__aeabi_dsub>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4630      	mov	r0, r6
 80042a2:	4639      	mov	r1, r7
 80042a4:	f7fc fc12 	bl	8000acc <__aeabi_dcmplt>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	f43f af27 	beq.w	80040fc <_dtoa_r+0x47c>
 80042ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042b0:	1e6b      	subs	r3, r5, #1
 80042b2:	930c      	str	r3, [sp, #48]	; 0x30
 80042b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042b8:	2b30      	cmp	r3, #48	; 0x30
 80042ba:	d0f8      	beq.n	80042ae <_dtoa_r+0x62e>
 80042bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80042c0:	e04a      	b.n	8004358 <_dtoa_r+0x6d8>
 80042c2:	bf00      	nop
 80042c4:	08005548 	.word	0x08005548
 80042c8:	08005520 	.word	0x08005520
 80042cc:	3ff00000 	.word	0x3ff00000
 80042d0:	40240000 	.word	0x40240000
 80042d4:	401c0000 	.word	0x401c0000
 80042d8:	40140000 	.word	0x40140000
 80042dc:	3fe00000 	.word	0x3fe00000
 80042e0:	4baf      	ldr	r3, [pc, #700]	; (80045a0 <_dtoa_r+0x920>)
 80042e2:	f7fc f981 	bl	80005e8 <__aeabi_dmul>
 80042e6:	4606      	mov	r6, r0
 80042e8:	460f      	mov	r7, r1
 80042ea:	e7ac      	b.n	8004246 <_dtoa_r+0x5c6>
 80042ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80042f0:	9d00      	ldr	r5, [sp, #0]
 80042f2:	4642      	mov	r2, r8
 80042f4:	464b      	mov	r3, r9
 80042f6:	4630      	mov	r0, r6
 80042f8:	4639      	mov	r1, r7
 80042fa:	f7fc fa9f 	bl	800083c <__aeabi_ddiv>
 80042fe:	f7fc fc0d 	bl	8000b1c <__aeabi_d2iz>
 8004302:	9002      	str	r0, [sp, #8]
 8004304:	f7fc f906 	bl	8000514 <__aeabi_i2d>
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	f7fc f96c 	bl	80005e8 <__aeabi_dmul>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4630      	mov	r0, r6
 8004316:	4639      	mov	r1, r7
 8004318:	f7fb ffae 	bl	8000278 <__aeabi_dsub>
 800431c:	9e02      	ldr	r6, [sp, #8]
 800431e:	9f01      	ldr	r7, [sp, #4]
 8004320:	3630      	adds	r6, #48	; 0x30
 8004322:	f805 6b01 	strb.w	r6, [r5], #1
 8004326:	9e00      	ldr	r6, [sp, #0]
 8004328:	1bae      	subs	r6, r5, r6
 800432a:	42b7      	cmp	r7, r6
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	d137      	bne.n	80043a2 <_dtoa_r+0x722>
 8004332:	f7fb ffa3 	bl	800027c <__adddf3>
 8004336:	4642      	mov	r2, r8
 8004338:	464b      	mov	r3, r9
 800433a:	4606      	mov	r6, r0
 800433c:	460f      	mov	r7, r1
 800433e:	f7fc fbe3 	bl	8000b08 <__aeabi_dcmpgt>
 8004342:	b9c8      	cbnz	r0, 8004378 <_dtoa_r+0x6f8>
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	4630      	mov	r0, r6
 800434a:	4639      	mov	r1, r7
 800434c:	f7fc fbb4 	bl	8000ab8 <__aeabi_dcmpeq>
 8004350:	b110      	cbz	r0, 8004358 <_dtoa_r+0x6d8>
 8004352:	9b02      	ldr	r3, [sp, #8]
 8004354:	07d9      	lsls	r1, r3, #31
 8004356:	d40f      	bmi.n	8004378 <_dtoa_r+0x6f8>
 8004358:	4620      	mov	r0, r4
 800435a:	4659      	mov	r1, fp
 800435c:	f7fe fcf0 	bl	8002d40 <_Bfree>
 8004360:	2300      	movs	r3, #0
 8004362:	702b      	strb	r3, [r5, #0]
 8004364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004366:	f10a 0001 	add.w	r0, sl, #1
 800436a:	6018      	str	r0, [r3, #0]
 800436c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800436e:	2b00      	cmp	r3, #0
 8004370:	f43f acd8 	beq.w	8003d24 <_dtoa_r+0xa4>
 8004374:	601d      	str	r5, [r3, #0]
 8004376:	e4d5      	b.n	8003d24 <_dtoa_r+0xa4>
 8004378:	f8cd a01c 	str.w	sl, [sp, #28]
 800437c:	462b      	mov	r3, r5
 800437e:	461d      	mov	r5, r3
 8004380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004384:	2a39      	cmp	r2, #57	; 0x39
 8004386:	d108      	bne.n	800439a <_dtoa_r+0x71a>
 8004388:	9a00      	ldr	r2, [sp, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d1f7      	bne.n	800437e <_dtoa_r+0x6fe>
 800438e:	9a07      	ldr	r2, [sp, #28]
 8004390:	9900      	ldr	r1, [sp, #0]
 8004392:	3201      	adds	r2, #1
 8004394:	9207      	str	r2, [sp, #28]
 8004396:	2230      	movs	r2, #48	; 0x30
 8004398:	700a      	strb	r2, [r1, #0]
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	3201      	adds	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e78c      	b.n	80042bc <_dtoa_r+0x63c>
 80043a2:	4b7f      	ldr	r3, [pc, #508]	; (80045a0 <_dtoa_r+0x920>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	f7fc f91f 	bl	80005e8 <__aeabi_dmul>
 80043aa:	2200      	movs	r2, #0
 80043ac:	2300      	movs	r3, #0
 80043ae:	4606      	mov	r6, r0
 80043b0:	460f      	mov	r7, r1
 80043b2:	f7fc fb81 	bl	8000ab8 <__aeabi_dcmpeq>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d09b      	beq.n	80042f2 <_dtoa_r+0x672>
 80043ba:	e7cd      	b.n	8004358 <_dtoa_r+0x6d8>
 80043bc:	9a08      	ldr	r2, [sp, #32]
 80043be:	2a00      	cmp	r2, #0
 80043c0:	f000 80c4 	beq.w	800454c <_dtoa_r+0x8cc>
 80043c4:	9a05      	ldr	r2, [sp, #20]
 80043c6:	2a01      	cmp	r2, #1
 80043c8:	f300 80a8 	bgt.w	800451c <_dtoa_r+0x89c>
 80043cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	f000 80a0 	beq.w	8004514 <_dtoa_r+0x894>
 80043d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043d8:	9e06      	ldr	r6, [sp, #24]
 80043da:	4645      	mov	r5, r8
 80043dc:	9a04      	ldr	r2, [sp, #16]
 80043de:	2101      	movs	r1, #1
 80043e0:	441a      	add	r2, r3
 80043e2:	4620      	mov	r0, r4
 80043e4:	4498      	add	r8, r3
 80043e6:	9204      	str	r2, [sp, #16]
 80043e8:	f7fe fd66 	bl	8002eb8 <__i2b>
 80043ec:	4607      	mov	r7, r0
 80043ee:	2d00      	cmp	r5, #0
 80043f0:	dd0b      	ble.n	800440a <_dtoa_r+0x78a>
 80043f2:	9b04      	ldr	r3, [sp, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	dd08      	ble.n	800440a <_dtoa_r+0x78a>
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	9a04      	ldr	r2, [sp, #16]
 80043fc:	bfa8      	it	ge
 80043fe:	462b      	movge	r3, r5
 8004400:	eba8 0803 	sub.w	r8, r8, r3
 8004404:	1aed      	subs	r5, r5, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	9304      	str	r3, [sp, #16]
 800440a:	9b06      	ldr	r3, [sp, #24]
 800440c:	b1fb      	cbz	r3, 800444e <_dtoa_r+0x7ce>
 800440e:	9b08      	ldr	r3, [sp, #32]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 809f 	beq.w	8004554 <_dtoa_r+0x8d4>
 8004416:	2e00      	cmp	r6, #0
 8004418:	dd11      	ble.n	800443e <_dtoa_r+0x7be>
 800441a:	4639      	mov	r1, r7
 800441c:	4632      	mov	r2, r6
 800441e:	4620      	mov	r0, r4
 8004420:	f7fe fe06 	bl	8003030 <__pow5mult>
 8004424:	465a      	mov	r2, fp
 8004426:	4601      	mov	r1, r0
 8004428:	4607      	mov	r7, r0
 800442a:	4620      	mov	r0, r4
 800442c:	f7fe fd5a 	bl	8002ee4 <__multiply>
 8004430:	4659      	mov	r1, fp
 8004432:	9007      	str	r0, [sp, #28]
 8004434:	4620      	mov	r0, r4
 8004436:	f7fe fc83 	bl	8002d40 <_Bfree>
 800443a:	9b07      	ldr	r3, [sp, #28]
 800443c:	469b      	mov	fp, r3
 800443e:	9b06      	ldr	r3, [sp, #24]
 8004440:	1b9a      	subs	r2, r3, r6
 8004442:	d004      	beq.n	800444e <_dtoa_r+0x7ce>
 8004444:	4659      	mov	r1, fp
 8004446:	4620      	mov	r0, r4
 8004448:	f7fe fdf2 	bl	8003030 <__pow5mult>
 800444c:	4683      	mov	fp, r0
 800444e:	2101      	movs	r1, #1
 8004450:	4620      	mov	r0, r4
 8004452:	f7fe fd31 	bl	8002eb8 <__i2b>
 8004456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004458:	2b00      	cmp	r3, #0
 800445a:	4606      	mov	r6, r0
 800445c:	dd7c      	ble.n	8004558 <_dtoa_r+0x8d8>
 800445e:	461a      	mov	r2, r3
 8004460:	4601      	mov	r1, r0
 8004462:	4620      	mov	r0, r4
 8004464:	f7fe fde4 	bl	8003030 <__pow5mult>
 8004468:	9b05      	ldr	r3, [sp, #20]
 800446a:	2b01      	cmp	r3, #1
 800446c:	4606      	mov	r6, r0
 800446e:	dd76      	ble.n	800455e <_dtoa_r+0x8de>
 8004470:	2300      	movs	r3, #0
 8004472:	9306      	str	r3, [sp, #24]
 8004474:	6933      	ldr	r3, [r6, #16]
 8004476:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800447a:	6918      	ldr	r0, [r3, #16]
 800447c:	f7fe fccc 	bl	8002e18 <__hi0bits>
 8004480:	f1c0 0020 	rsb	r0, r0, #32
 8004484:	9b04      	ldr	r3, [sp, #16]
 8004486:	4418      	add	r0, r3
 8004488:	f010 001f 	ands.w	r0, r0, #31
 800448c:	f000 8086 	beq.w	800459c <_dtoa_r+0x91c>
 8004490:	f1c0 0320 	rsb	r3, r0, #32
 8004494:	2b04      	cmp	r3, #4
 8004496:	dd7f      	ble.n	8004598 <_dtoa_r+0x918>
 8004498:	f1c0 001c 	rsb	r0, r0, #28
 800449c:	9b04      	ldr	r3, [sp, #16]
 800449e:	4403      	add	r3, r0
 80044a0:	4480      	add	r8, r0
 80044a2:	4405      	add	r5, r0
 80044a4:	9304      	str	r3, [sp, #16]
 80044a6:	f1b8 0f00 	cmp.w	r8, #0
 80044aa:	dd05      	ble.n	80044b8 <_dtoa_r+0x838>
 80044ac:	4659      	mov	r1, fp
 80044ae:	4642      	mov	r2, r8
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7fe fe17 	bl	80030e4 <__lshift>
 80044b6:	4683      	mov	fp, r0
 80044b8:	9b04      	ldr	r3, [sp, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	dd05      	ble.n	80044ca <_dtoa_r+0x84a>
 80044be:	4631      	mov	r1, r6
 80044c0:	461a      	mov	r2, r3
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7fe fe0e 	bl	80030e4 <__lshift>
 80044c8:	4606      	mov	r6, r0
 80044ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d069      	beq.n	80045a4 <_dtoa_r+0x924>
 80044d0:	4631      	mov	r1, r6
 80044d2:	4658      	mov	r0, fp
 80044d4:	f7fe fe72 	bl	80031bc <__mcmp>
 80044d8:	2800      	cmp	r0, #0
 80044da:	da63      	bge.n	80045a4 <_dtoa_r+0x924>
 80044dc:	2300      	movs	r3, #0
 80044de:	4659      	mov	r1, fp
 80044e0:	220a      	movs	r2, #10
 80044e2:	4620      	mov	r0, r4
 80044e4:	f7fe fc4e 	bl	8002d84 <__multadd>
 80044e8:	9b08      	ldr	r3, [sp, #32]
 80044ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044ee:	4683      	mov	fp, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 818f 	beq.w	8004814 <_dtoa_r+0xb94>
 80044f6:	4639      	mov	r1, r7
 80044f8:	2300      	movs	r3, #0
 80044fa:	220a      	movs	r2, #10
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7fe fc41 	bl	8002d84 <__multadd>
 8004502:	f1b9 0f00 	cmp.w	r9, #0
 8004506:	4607      	mov	r7, r0
 8004508:	f300 808e 	bgt.w	8004628 <_dtoa_r+0x9a8>
 800450c:	9b05      	ldr	r3, [sp, #20]
 800450e:	2b02      	cmp	r3, #2
 8004510:	dc50      	bgt.n	80045b4 <_dtoa_r+0x934>
 8004512:	e089      	b.n	8004628 <_dtoa_r+0x9a8>
 8004514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800451a:	e75d      	b.n	80043d8 <_dtoa_r+0x758>
 800451c:	9b01      	ldr	r3, [sp, #4]
 800451e:	1e5e      	subs	r6, r3, #1
 8004520:	9b06      	ldr	r3, [sp, #24]
 8004522:	42b3      	cmp	r3, r6
 8004524:	bfbf      	itttt	lt
 8004526:	9b06      	ldrlt	r3, [sp, #24]
 8004528:	9606      	strlt	r6, [sp, #24]
 800452a:	1af2      	sublt	r2, r6, r3
 800452c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800452e:	bfb6      	itet	lt
 8004530:	189b      	addlt	r3, r3, r2
 8004532:	1b9e      	subge	r6, r3, r6
 8004534:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004536:	9b01      	ldr	r3, [sp, #4]
 8004538:	bfb8      	it	lt
 800453a:	2600      	movlt	r6, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	bfb5      	itete	lt
 8004540:	eba8 0503 	sublt.w	r5, r8, r3
 8004544:	9b01      	ldrge	r3, [sp, #4]
 8004546:	2300      	movlt	r3, #0
 8004548:	4645      	movge	r5, r8
 800454a:	e747      	b.n	80043dc <_dtoa_r+0x75c>
 800454c:	9e06      	ldr	r6, [sp, #24]
 800454e:	9f08      	ldr	r7, [sp, #32]
 8004550:	4645      	mov	r5, r8
 8004552:	e74c      	b.n	80043ee <_dtoa_r+0x76e>
 8004554:	9a06      	ldr	r2, [sp, #24]
 8004556:	e775      	b.n	8004444 <_dtoa_r+0x7c4>
 8004558:	9b05      	ldr	r3, [sp, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	dc18      	bgt.n	8004590 <_dtoa_r+0x910>
 800455e:	9b02      	ldr	r3, [sp, #8]
 8004560:	b9b3      	cbnz	r3, 8004590 <_dtoa_r+0x910>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004568:	b9a3      	cbnz	r3, 8004594 <_dtoa_r+0x914>
 800456a:	9b03      	ldr	r3, [sp, #12]
 800456c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004570:	0d1b      	lsrs	r3, r3, #20
 8004572:	051b      	lsls	r3, r3, #20
 8004574:	b12b      	cbz	r3, 8004582 <_dtoa_r+0x902>
 8004576:	9b04      	ldr	r3, [sp, #16]
 8004578:	3301      	adds	r3, #1
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	f108 0801 	add.w	r8, r8, #1
 8004580:	2301      	movs	r3, #1
 8004582:	9306      	str	r3, [sp, #24]
 8004584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004586:	2b00      	cmp	r3, #0
 8004588:	f47f af74 	bne.w	8004474 <_dtoa_r+0x7f4>
 800458c:	2001      	movs	r0, #1
 800458e:	e779      	b.n	8004484 <_dtoa_r+0x804>
 8004590:	2300      	movs	r3, #0
 8004592:	e7f6      	b.n	8004582 <_dtoa_r+0x902>
 8004594:	9b02      	ldr	r3, [sp, #8]
 8004596:	e7f4      	b.n	8004582 <_dtoa_r+0x902>
 8004598:	d085      	beq.n	80044a6 <_dtoa_r+0x826>
 800459a:	4618      	mov	r0, r3
 800459c:	301c      	adds	r0, #28
 800459e:	e77d      	b.n	800449c <_dtoa_r+0x81c>
 80045a0:	40240000 	.word	0x40240000
 80045a4:	9b01      	ldr	r3, [sp, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	dc38      	bgt.n	800461c <_dtoa_r+0x99c>
 80045aa:	9b05      	ldr	r3, [sp, #20]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	dd35      	ble.n	800461c <_dtoa_r+0x99c>
 80045b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80045b4:	f1b9 0f00 	cmp.w	r9, #0
 80045b8:	d10d      	bne.n	80045d6 <_dtoa_r+0x956>
 80045ba:	4631      	mov	r1, r6
 80045bc:	464b      	mov	r3, r9
 80045be:	2205      	movs	r2, #5
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7fe fbdf 	bl	8002d84 <__multadd>
 80045c6:	4601      	mov	r1, r0
 80045c8:	4606      	mov	r6, r0
 80045ca:	4658      	mov	r0, fp
 80045cc:	f7fe fdf6 	bl	80031bc <__mcmp>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f73f adbd 	bgt.w	8004150 <_dtoa_r+0x4d0>
 80045d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d8:	9d00      	ldr	r5, [sp, #0]
 80045da:	ea6f 0a03 	mvn.w	sl, r3
 80045de:	f04f 0800 	mov.w	r8, #0
 80045e2:	4631      	mov	r1, r6
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7fe fbab 	bl	8002d40 <_Bfree>
 80045ea:	2f00      	cmp	r7, #0
 80045ec:	f43f aeb4 	beq.w	8004358 <_dtoa_r+0x6d8>
 80045f0:	f1b8 0f00 	cmp.w	r8, #0
 80045f4:	d005      	beq.n	8004602 <_dtoa_r+0x982>
 80045f6:	45b8      	cmp	r8, r7
 80045f8:	d003      	beq.n	8004602 <_dtoa_r+0x982>
 80045fa:	4641      	mov	r1, r8
 80045fc:	4620      	mov	r0, r4
 80045fe:	f7fe fb9f 	bl	8002d40 <_Bfree>
 8004602:	4639      	mov	r1, r7
 8004604:	4620      	mov	r0, r4
 8004606:	f7fe fb9b 	bl	8002d40 <_Bfree>
 800460a:	e6a5      	b.n	8004358 <_dtoa_r+0x6d8>
 800460c:	2600      	movs	r6, #0
 800460e:	4637      	mov	r7, r6
 8004610:	e7e1      	b.n	80045d6 <_dtoa_r+0x956>
 8004612:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004614:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004618:	4637      	mov	r7, r6
 800461a:	e599      	b.n	8004150 <_dtoa_r+0x4d0>
 800461c:	9b08      	ldr	r3, [sp, #32]
 800461e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80fd 	beq.w	8004822 <_dtoa_r+0xba2>
 8004628:	2d00      	cmp	r5, #0
 800462a:	dd05      	ble.n	8004638 <_dtoa_r+0x9b8>
 800462c:	4639      	mov	r1, r7
 800462e:	462a      	mov	r2, r5
 8004630:	4620      	mov	r0, r4
 8004632:	f7fe fd57 	bl	80030e4 <__lshift>
 8004636:	4607      	mov	r7, r0
 8004638:	9b06      	ldr	r3, [sp, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d05c      	beq.n	80046f8 <_dtoa_r+0xa78>
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4620      	mov	r0, r4
 8004642:	f7fe fb3d 	bl	8002cc0 <_Balloc>
 8004646:	4605      	mov	r5, r0
 8004648:	b928      	cbnz	r0, 8004656 <_dtoa_r+0x9d6>
 800464a:	4b80      	ldr	r3, [pc, #512]	; (800484c <_dtoa_r+0xbcc>)
 800464c:	4602      	mov	r2, r0
 800464e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004652:	f7ff bb2e 	b.w	8003cb2 <_dtoa_r+0x32>
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	3202      	adds	r2, #2
 800465a:	0092      	lsls	r2, r2, #2
 800465c:	f107 010c 	add.w	r1, r7, #12
 8004660:	300c      	adds	r0, #12
 8004662:	f000 f913 	bl	800488c <memcpy>
 8004666:	2201      	movs	r2, #1
 8004668:	4629      	mov	r1, r5
 800466a:	4620      	mov	r0, r4
 800466c:	f7fe fd3a 	bl	80030e4 <__lshift>
 8004670:	9b00      	ldr	r3, [sp, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	9b00      	ldr	r3, [sp, #0]
 8004678:	444b      	add	r3, r9
 800467a:	9307      	str	r3, [sp, #28]
 800467c:	9b02      	ldr	r3, [sp, #8]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	46b8      	mov	r8, r7
 8004684:	9306      	str	r3, [sp, #24]
 8004686:	4607      	mov	r7, r0
 8004688:	9b01      	ldr	r3, [sp, #4]
 800468a:	4631      	mov	r1, r6
 800468c:	3b01      	subs	r3, #1
 800468e:	4658      	mov	r0, fp
 8004690:	9302      	str	r3, [sp, #8]
 8004692:	f7ff fa67 	bl	8003b64 <quorem>
 8004696:	4603      	mov	r3, r0
 8004698:	3330      	adds	r3, #48	; 0x30
 800469a:	9004      	str	r0, [sp, #16]
 800469c:	4641      	mov	r1, r8
 800469e:	4658      	mov	r0, fp
 80046a0:	9308      	str	r3, [sp, #32]
 80046a2:	f7fe fd8b 	bl	80031bc <__mcmp>
 80046a6:	463a      	mov	r2, r7
 80046a8:	4681      	mov	r9, r0
 80046aa:	4631      	mov	r1, r6
 80046ac:	4620      	mov	r0, r4
 80046ae:	f7fe fda1 	bl	80031f4 <__mdiff>
 80046b2:	68c2      	ldr	r2, [r0, #12]
 80046b4:	9b08      	ldr	r3, [sp, #32]
 80046b6:	4605      	mov	r5, r0
 80046b8:	bb02      	cbnz	r2, 80046fc <_dtoa_r+0xa7c>
 80046ba:	4601      	mov	r1, r0
 80046bc:	4658      	mov	r0, fp
 80046be:	f7fe fd7d 	bl	80031bc <__mcmp>
 80046c2:	9b08      	ldr	r3, [sp, #32]
 80046c4:	4602      	mov	r2, r0
 80046c6:	4629      	mov	r1, r5
 80046c8:	4620      	mov	r0, r4
 80046ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80046ce:	f7fe fb37 	bl	8002d40 <_Bfree>
 80046d2:	9b05      	ldr	r3, [sp, #20]
 80046d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d6:	9d01      	ldr	r5, [sp, #4]
 80046d8:	ea43 0102 	orr.w	r1, r3, r2
 80046dc:	9b06      	ldr	r3, [sp, #24]
 80046de:	430b      	orrs	r3, r1
 80046e0:	9b08      	ldr	r3, [sp, #32]
 80046e2:	d10d      	bne.n	8004700 <_dtoa_r+0xa80>
 80046e4:	2b39      	cmp	r3, #57	; 0x39
 80046e6:	d029      	beq.n	800473c <_dtoa_r+0xabc>
 80046e8:	f1b9 0f00 	cmp.w	r9, #0
 80046ec:	dd01      	ble.n	80046f2 <_dtoa_r+0xa72>
 80046ee:	9b04      	ldr	r3, [sp, #16]
 80046f0:	3331      	adds	r3, #49	; 0x31
 80046f2:	9a02      	ldr	r2, [sp, #8]
 80046f4:	7013      	strb	r3, [r2, #0]
 80046f6:	e774      	b.n	80045e2 <_dtoa_r+0x962>
 80046f8:	4638      	mov	r0, r7
 80046fa:	e7b9      	b.n	8004670 <_dtoa_r+0x9f0>
 80046fc:	2201      	movs	r2, #1
 80046fe:	e7e2      	b.n	80046c6 <_dtoa_r+0xa46>
 8004700:	f1b9 0f00 	cmp.w	r9, #0
 8004704:	db06      	blt.n	8004714 <_dtoa_r+0xa94>
 8004706:	9905      	ldr	r1, [sp, #20]
 8004708:	ea41 0909 	orr.w	r9, r1, r9
 800470c:	9906      	ldr	r1, [sp, #24]
 800470e:	ea59 0101 	orrs.w	r1, r9, r1
 8004712:	d120      	bne.n	8004756 <_dtoa_r+0xad6>
 8004714:	2a00      	cmp	r2, #0
 8004716:	ddec      	ble.n	80046f2 <_dtoa_r+0xa72>
 8004718:	4659      	mov	r1, fp
 800471a:	2201      	movs	r2, #1
 800471c:	4620      	mov	r0, r4
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	f7fe fce0 	bl	80030e4 <__lshift>
 8004724:	4631      	mov	r1, r6
 8004726:	4683      	mov	fp, r0
 8004728:	f7fe fd48 	bl	80031bc <__mcmp>
 800472c:	2800      	cmp	r0, #0
 800472e:	9b01      	ldr	r3, [sp, #4]
 8004730:	dc02      	bgt.n	8004738 <_dtoa_r+0xab8>
 8004732:	d1de      	bne.n	80046f2 <_dtoa_r+0xa72>
 8004734:	07da      	lsls	r2, r3, #31
 8004736:	d5dc      	bpl.n	80046f2 <_dtoa_r+0xa72>
 8004738:	2b39      	cmp	r3, #57	; 0x39
 800473a:	d1d8      	bne.n	80046ee <_dtoa_r+0xa6e>
 800473c:	9a02      	ldr	r2, [sp, #8]
 800473e:	2339      	movs	r3, #57	; 0x39
 8004740:	7013      	strb	r3, [r2, #0]
 8004742:	462b      	mov	r3, r5
 8004744:	461d      	mov	r5, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800474c:	2a39      	cmp	r2, #57	; 0x39
 800474e:	d050      	beq.n	80047f2 <_dtoa_r+0xb72>
 8004750:	3201      	adds	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e745      	b.n	80045e2 <_dtoa_r+0x962>
 8004756:	2a00      	cmp	r2, #0
 8004758:	dd03      	ble.n	8004762 <_dtoa_r+0xae2>
 800475a:	2b39      	cmp	r3, #57	; 0x39
 800475c:	d0ee      	beq.n	800473c <_dtoa_r+0xabc>
 800475e:	3301      	adds	r3, #1
 8004760:	e7c7      	b.n	80046f2 <_dtoa_r+0xa72>
 8004762:	9a01      	ldr	r2, [sp, #4]
 8004764:	9907      	ldr	r1, [sp, #28]
 8004766:	f802 3c01 	strb.w	r3, [r2, #-1]
 800476a:	428a      	cmp	r2, r1
 800476c:	d02a      	beq.n	80047c4 <_dtoa_r+0xb44>
 800476e:	4659      	mov	r1, fp
 8004770:	2300      	movs	r3, #0
 8004772:	220a      	movs	r2, #10
 8004774:	4620      	mov	r0, r4
 8004776:	f7fe fb05 	bl	8002d84 <__multadd>
 800477a:	45b8      	cmp	r8, r7
 800477c:	4683      	mov	fp, r0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f04f 020a 	mov.w	r2, #10
 8004786:	4641      	mov	r1, r8
 8004788:	4620      	mov	r0, r4
 800478a:	d107      	bne.n	800479c <_dtoa_r+0xb1c>
 800478c:	f7fe fafa 	bl	8002d84 <__multadd>
 8004790:	4680      	mov	r8, r0
 8004792:	4607      	mov	r7, r0
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	3301      	adds	r3, #1
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	e775      	b.n	8004688 <_dtoa_r+0xa08>
 800479c:	f7fe faf2 	bl	8002d84 <__multadd>
 80047a0:	4639      	mov	r1, r7
 80047a2:	4680      	mov	r8, r0
 80047a4:	2300      	movs	r3, #0
 80047a6:	220a      	movs	r2, #10
 80047a8:	4620      	mov	r0, r4
 80047aa:	f7fe faeb 	bl	8002d84 <__multadd>
 80047ae:	4607      	mov	r7, r0
 80047b0:	e7f0      	b.n	8004794 <_dtoa_r+0xb14>
 80047b2:	f1b9 0f00 	cmp.w	r9, #0
 80047b6:	9a00      	ldr	r2, [sp, #0]
 80047b8:	bfcc      	ite	gt
 80047ba:	464d      	movgt	r5, r9
 80047bc:	2501      	movle	r5, #1
 80047be:	4415      	add	r5, r2
 80047c0:	f04f 0800 	mov.w	r8, #0
 80047c4:	4659      	mov	r1, fp
 80047c6:	2201      	movs	r2, #1
 80047c8:	4620      	mov	r0, r4
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	f7fe fc8a 	bl	80030e4 <__lshift>
 80047d0:	4631      	mov	r1, r6
 80047d2:	4683      	mov	fp, r0
 80047d4:	f7fe fcf2 	bl	80031bc <__mcmp>
 80047d8:	2800      	cmp	r0, #0
 80047da:	dcb2      	bgt.n	8004742 <_dtoa_r+0xac2>
 80047dc:	d102      	bne.n	80047e4 <_dtoa_r+0xb64>
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	07db      	lsls	r3, r3, #31
 80047e2:	d4ae      	bmi.n	8004742 <_dtoa_r+0xac2>
 80047e4:	462b      	mov	r3, r5
 80047e6:	461d      	mov	r5, r3
 80047e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047ec:	2a30      	cmp	r2, #48	; 0x30
 80047ee:	d0fa      	beq.n	80047e6 <_dtoa_r+0xb66>
 80047f0:	e6f7      	b.n	80045e2 <_dtoa_r+0x962>
 80047f2:	9a00      	ldr	r2, [sp, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d1a5      	bne.n	8004744 <_dtoa_r+0xac4>
 80047f8:	f10a 0a01 	add.w	sl, sl, #1
 80047fc:	2331      	movs	r3, #49	; 0x31
 80047fe:	e779      	b.n	80046f4 <_dtoa_r+0xa74>
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <_dtoa_r+0xbd0>)
 8004802:	f7ff baaf 	b.w	8003d64 <_dtoa_r+0xe4>
 8004806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004808:	2b00      	cmp	r3, #0
 800480a:	f47f aa86 	bne.w	8003d1a <_dtoa_r+0x9a>
 800480e:	4b11      	ldr	r3, [pc, #68]	; (8004854 <_dtoa_r+0xbd4>)
 8004810:	f7ff baa8 	b.w	8003d64 <_dtoa_r+0xe4>
 8004814:	f1b9 0f00 	cmp.w	r9, #0
 8004818:	dc03      	bgt.n	8004822 <_dtoa_r+0xba2>
 800481a:	9b05      	ldr	r3, [sp, #20]
 800481c:	2b02      	cmp	r3, #2
 800481e:	f73f aec9 	bgt.w	80045b4 <_dtoa_r+0x934>
 8004822:	9d00      	ldr	r5, [sp, #0]
 8004824:	4631      	mov	r1, r6
 8004826:	4658      	mov	r0, fp
 8004828:	f7ff f99c 	bl	8003b64 <quorem>
 800482c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004830:	f805 3b01 	strb.w	r3, [r5], #1
 8004834:	9a00      	ldr	r2, [sp, #0]
 8004836:	1aaa      	subs	r2, r5, r2
 8004838:	4591      	cmp	r9, r2
 800483a:	ddba      	ble.n	80047b2 <_dtoa_r+0xb32>
 800483c:	4659      	mov	r1, fp
 800483e:	2300      	movs	r3, #0
 8004840:	220a      	movs	r2, #10
 8004842:	4620      	mov	r0, r4
 8004844:	f7fe fa9e 	bl	8002d84 <__multadd>
 8004848:	4683      	mov	fp, r0
 800484a:	e7eb      	b.n	8004824 <_dtoa_r+0xba4>
 800484c:	0800550f 	.word	0x0800550f
 8004850:	08005698 	.word	0x08005698
 8004854:	0800568b 	.word	0x0800568b

08004858 <fiprintf>:
 8004858:	b40e      	push	{r1, r2, r3}
 800485a:	b503      	push	{r0, r1, lr}
 800485c:	4601      	mov	r1, r0
 800485e:	ab03      	add	r3, sp, #12
 8004860:	4805      	ldr	r0, [pc, #20]	; (8004878 <fiprintf+0x20>)
 8004862:	f853 2b04 	ldr.w	r2, [r3], #4
 8004866:	6800      	ldr	r0, [r0, #0]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	f000 f8c5 	bl	80049f8 <_vfiprintf_r>
 800486e:	b002      	add	sp, #8
 8004870:	f85d eb04 	ldr.w	lr, [sp], #4
 8004874:	b003      	add	sp, #12
 8004876:	4770      	bx	lr
 8004878:	20000004 	.word	0x20000004

0800487c <malloc>:
 800487c:	4b02      	ldr	r3, [pc, #8]	; (8004888 <malloc+0xc>)
 800487e:	4601      	mov	r1, r0
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	f7fe bdc9 	b.w	8003418 <_malloc_r>
 8004886:	bf00      	nop
 8004888:	20000004 	.word	0x20000004

0800488c <memcpy>:
 800488c:	440a      	add	r2, r1
 800488e:	4291      	cmp	r1, r2
 8004890:	f100 33ff 	add.w	r3, r0, #4294967295
 8004894:	d100      	bne.n	8004898 <memcpy+0xc>
 8004896:	4770      	bx	lr
 8004898:	b510      	push	{r4, lr}
 800489a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a2:	4291      	cmp	r1, r2
 80048a4:	d1f9      	bne.n	800489a <memcpy+0xe>
 80048a6:	bd10      	pop	{r4, pc}

080048a8 <memmove>:
 80048a8:	4288      	cmp	r0, r1
 80048aa:	b510      	push	{r4, lr}
 80048ac:	eb01 0402 	add.w	r4, r1, r2
 80048b0:	d902      	bls.n	80048b8 <memmove+0x10>
 80048b2:	4284      	cmp	r4, r0
 80048b4:	4623      	mov	r3, r4
 80048b6:	d807      	bhi.n	80048c8 <memmove+0x20>
 80048b8:	1e43      	subs	r3, r0, #1
 80048ba:	42a1      	cmp	r1, r4
 80048bc:	d008      	beq.n	80048d0 <memmove+0x28>
 80048be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048c6:	e7f8      	b.n	80048ba <memmove+0x12>
 80048c8:	4402      	add	r2, r0
 80048ca:	4601      	mov	r1, r0
 80048cc:	428a      	cmp	r2, r1
 80048ce:	d100      	bne.n	80048d2 <memmove+0x2a>
 80048d0:	bd10      	pop	{r4, pc}
 80048d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048da:	e7f7      	b.n	80048cc <memmove+0x24>

080048dc <__malloc_lock>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__malloc_lock+0x8>)
 80048de:	f000 bc3b 	b.w	8005158 <__retarget_lock_acquire_recursive>
 80048e2:	bf00      	nop
 80048e4:	200001b8 	.word	0x200001b8

080048e8 <__malloc_unlock>:
 80048e8:	4801      	ldr	r0, [pc, #4]	; (80048f0 <__malloc_unlock+0x8>)
 80048ea:	f000 bc36 	b.w	800515a <__retarget_lock_release_recursive>
 80048ee:	bf00      	nop
 80048f0:	200001b8 	.word	0x200001b8

080048f4 <_free_r>:
 80048f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048f6:	2900      	cmp	r1, #0
 80048f8:	d048      	beq.n	800498c <_free_r+0x98>
 80048fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048fe:	9001      	str	r0, [sp, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f1a1 0404 	sub.w	r4, r1, #4
 8004906:	bfb8      	it	lt
 8004908:	18e4      	addlt	r4, r4, r3
 800490a:	f7ff ffe7 	bl	80048dc <__malloc_lock>
 800490e:	4a20      	ldr	r2, [pc, #128]	; (8004990 <_free_r+0x9c>)
 8004910:	9801      	ldr	r0, [sp, #4]
 8004912:	6813      	ldr	r3, [r2, #0]
 8004914:	4615      	mov	r5, r2
 8004916:	b933      	cbnz	r3, 8004926 <_free_r+0x32>
 8004918:	6063      	str	r3, [r4, #4]
 800491a:	6014      	str	r4, [r2, #0]
 800491c:	b003      	add	sp, #12
 800491e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004922:	f7ff bfe1 	b.w	80048e8 <__malloc_unlock>
 8004926:	42a3      	cmp	r3, r4
 8004928:	d90b      	bls.n	8004942 <_free_r+0x4e>
 800492a:	6821      	ldr	r1, [r4, #0]
 800492c:	1862      	adds	r2, r4, r1
 800492e:	4293      	cmp	r3, r2
 8004930:	bf04      	itt	eq
 8004932:	681a      	ldreq	r2, [r3, #0]
 8004934:	685b      	ldreq	r3, [r3, #4]
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	bf04      	itt	eq
 800493a:	1852      	addeq	r2, r2, r1
 800493c:	6022      	streq	r2, [r4, #0]
 800493e:	602c      	str	r4, [r5, #0]
 8004940:	e7ec      	b.n	800491c <_free_r+0x28>
 8004942:	461a      	mov	r2, r3
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	b10b      	cbz	r3, 800494c <_free_r+0x58>
 8004948:	42a3      	cmp	r3, r4
 800494a:	d9fa      	bls.n	8004942 <_free_r+0x4e>
 800494c:	6811      	ldr	r1, [r2, #0]
 800494e:	1855      	adds	r5, r2, r1
 8004950:	42a5      	cmp	r5, r4
 8004952:	d10b      	bne.n	800496c <_free_r+0x78>
 8004954:	6824      	ldr	r4, [r4, #0]
 8004956:	4421      	add	r1, r4
 8004958:	1854      	adds	r4, r2, r1
 800495a:	42a3      	cmp	r3, r4
 800495c:	6011      	str	r1, [r2, #0]
 800495e:	d1dd      	bne.n	800491c <_free_r+0x28>
 8004960:	681c      	ldr	r4, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	6053      	str	r3, [r2, #4]
 8004966:	4421      	add	r1, r4
 8004968:	6011      	str	r1, [r2, #0]
 800496a:	e7d7      	b.n	800491c <_free_r+0x28>
 800496c:	d902      	bls.n	8004974 <_free_r+0x80>
 800496e:	230c      	movs	r3, #12
 8004970:	6003      	str	r3, [r0, #0]
 8004972:	e7d3      	b.n	800491c <_free_r+0x28>
 8004974:	6825      	ldr	r5, [r4, #0]
 8004976:	1961      	adds	r1, r4, r5
 8004978:	428b      	cmp	r3, r1
 800497a:	bf04      	itt	eq
 800497c:	6819      	ldreq	r1, [r3, #0]
 800497e:	685b      	ldreq	r3, [r3, #4]
 8004980:	6063      	str	r3, [r4, #4]
 8004982:	bf04      	itt	eq
 8004984:	1949      	addeq	r1, r1, r5
 8004986:	6021      	streq	r1, [r4, #0]
 8004988:	6054      	str	r4, [r2, #4]
 800498a:	e7c7      	b.n	800491c <_free_r+0x28>
 800498c:	b003      	add	sp, #12
 800498e:	bd30      	pop	{r4, r5, pc}
 8004990:	200000a0 	.word	0x200000a0

08004994 <_malloc_usable_size_r>:
 8004994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004998:	1f18      	subs	r0, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfbc      	itt	lt
 800499e:	580b      	ldrlt	r3, [r1, r0]
 80049a0:	18c0      	addlt	r0, r0, r3
 80049a2:	4770      	bx	lr

080049a4 <__sfputc_r>:
 80049a4:	6893      	ldr	r3, [r2, #8]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	b410      	push	{r4}
 80049ac:	6093      	str	r3, [r2, #8]
 80049ae:	da08      	bge.n	80049c2 <__sfputc_r+0x1e>
 80049b0:	6994      	ldr	r4, [r2, #24]
 80049b2:	42a3      	cmp	r3, r4
 80049b4:	db01      	blt.n	80049ba <__sfputc_r+0x16>
 80049b6:	290a      	cmp	r1, #10
 80049b8:	d103      	bne.n	80049c2 <__sfputc_r+0x1e>
 80049ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049be:	f000 b94b 	b.w	8004c58 <__swbuf_r>
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	1c58      	adds	r0, r3, #1
 80049c6:	6010      	str	r0, [r2, #0]
 80049c8:	7019      	strb	r1, [r3, #0]
 80049ca:	4608      	mov	r0, r1
 80049cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <__sfputs_r>:
 80049d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d4:	4606      	mov	r6, r0
 80049d6:	460f      	mov	r7, r1
 80049d8:	4614      	mov	r4, r2
 80049da:	18d5      	adds	r5, r2, r3
 80049dc:	42ac      	cmp	r4, r5
 80049de:	d101      	bne.n	80049e4 <__sfputs_r+0x12>
 80049e0:	2000      	movs	r0, #0
 80049e2:	e007      	b.n	80049f4 <__sfputs_r+0x22>
 80049e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e8:	463a      	mov	r2, r7
 80049ea:	4630      	mov	r0, r6
 80049ec:	f7ff ffda 	bl	80049a4 <__sfputc_r>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d1f3      	bne.n	80049dc <__sfputs_r+0xa>
 80049f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049f8 <_vfiprintf_r>:
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	460d      	mov	r5, r1
 80049fe:	b09d      	sub	sp, #116	; 0x74
 8004a00:	4614      	mov	r4, r2
 8004a02:	4698      	mov	r8, r3
 8004a04:	4606      	mov	r6, r0
 8004a06:	b118      	cbz	r0, 8004a10 <_vfiprintf_r+0x18>
 8004a08:	6983      	ldr	r3, [r0, #24]
 8004a0a:	b90b      	cbnz	r3, 8004a10 <_vfiprintf_r+0x18>
 8004a0c:	f000 fb06 	bl	800501c <__sinit>
 8004a10:	4b89      	ldr	r3, [pc, #548]	; (8004c38 <_vfiprintf_r+0x240>)
 8004a12:	429d      	cmp	r5, r3
 8004a14:	d11b      	bne.n	8004a4e <_vfiprintf_r+0x56>
 8004a16:	6875      	ldr	r5, [r6, #4]
 8004a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a1a:	07d9      	lsls	r1, r3, #31
 8004a1c:	d405      	bmi.n	8004a2a <_vfiprintf_r+0x32>
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	059a      	lsls	r2, r3, #22
 8004a22:	d402      	bmi.n	8004a2a <_vfiprintf_r+0x32>
 8004a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a26:	f000 fb97 	bl	8005158 <__retarget_lock_acquire_recursive>
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	071b      	lsls	r3, r3, #28
 8004a2e:	d501      	bpl.n	8004a34 <_vfiprintf_r+0x3c>
 8004a30:	692b      	ldr	r3, [r5, #16]
 8004a32:	b9eb      	cbnz	r3, 8004a70 <_vfiprintf_r+0x78>
 8004a34:	4629      	mov	r1, r5
 8004a36:	4630      	mov	r0, r6
 8004a38:	f000 f960 	bl	8004cfc <__swsetup_r>
 8004a3c:	b1c0      	cbz	r0, 8004a70 <_vfiprintf_r+0x78>
 8004a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a40:	07dc      	lsls	r4, r3, #31
 8004a42:	d50e      	bpl.n	8004a62 <_vfiprintf_r+0x6a>
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	b01d      	add	sp, #116	; 0x74
 8004a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4e:	4b7b      	ldr	r3, [pc, #492]	; (8004c3c <_vfiprintf_r+0x244>)
 8004a50:	429d      	cmp	r5, r3
 8004a52:	d101      	bne.n	8004a58 <_vfiprintf_r+0x60>
 8004a54:	68b5      	ldr	r5, [r6, #8]
 8004a56:	e7df      	b.n	8004a18 <_vfiprintf_r+0x20>
 8004a58:	4b79      	ldr	r3, [pc, #484]	; (8004c40 <_vfiprintf_r+0x248>)
 8004a5a:	429d      	cmp	r5, r3
 8004a5c:	bf08      	it	eq
 8004a5e:	68f5      	ldreq	r5, [r6, #12]
 8004a60:	e7da      	b.n	8004a18 <_vfiprintf_r+0x20>
 8004a62:	89ab      	ldrh	r3, [r5, #12]
 8004a64:	0598      	lsls	r0, r3, #22
 8004a66:	d4ed      	bmi.n	8004a44 <_vfiprintf_r+0x4c>
 8004a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a6a:	f000 fb76 	bl	800515a <__retarget_lock_release_recursive>
 8004a6e:	e7e9      	b.n	8004a44 <_vfiprintf_r+0x4c>
 8004a70:	2300      	movs	r3, #0
 8004a72:	9309      	str	r3, [sp, #36]	; 0x24
 8004a74:	2320      	movs	r3, #32
 8004a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a7e:	2330      	movs	r3, #48	; 0x30
 8004a80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c44 <_vfiprintf_r+0x24c>
 8004a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a88:	f04f 0901 	mov.w	r9, #1
 8004a8c:	4623      	mov	r3, r4
 8004a8e:	469a      	mov	sl, r3
 8004a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a94:	b10a      	cbz	r2, 8004a9a <_vfiprintf_r+0xa2>
 8004a96:	2a25      	cmp	r2, #37	; 0x25
 8004a98:	d1f9      	bne.n	8004a8e <_vfiprintf_r+0x96>
 8004a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a9e:	d00b      	beq.n	8004ab8 <_vfiprintf_r+0xc0>
 8004aa0:	465b      	mov	r3, fp
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7ff ff93 	bl	80049d2 <__sfputs_r>
 8004aac:	3001      	adds	r0, #1
 8004aae:	f000 80aa 	beq.w	8004c06 <_vfiprintf_r+0x20e>
 8004ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ab4:	445a      	add	r2, fp
 8004ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80a2 	beq.w	8004c06 <_vfiprintf_r+0x20e>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004acc:	f10a 0a01 	add.w	sl, sl, #1
 8004ad0:	9304      	str	r3, [sp, #16]
 8004ad2:	9307      	str	r3, [sp, #28]
 8004ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8004ada:	4654      	mov	r4, sl
 8004adc:	2205      	movs	r2, #5
 8004ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae2:	4858      	ldr	r0, [pc, #352]	; (8004c44 <_vfiprintf_r+0x24c>)
 8004ae4:	f7fb fb74 	bl	80001d0 <memchr>
 8004ae8:	9a04      	ldr	r2, [sp, #16]
 8004aea:	b9d8      	cbnz	r0, 8004b24 <_vfiprintf_r+0x12c>
 8004aec:	06d1      	lsls	r1, r2, #27
 8004aee:	bf44      	itt	mi
 8004af0:	2320      	movmi	r3, #32
 8004af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004af6:	0713      	lsls	r3, r2, #28
 8004af8:	bf44      	itt	mi
 8004afa:	232b      	movmi	r3, #43	; 0x2b
 8004afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b00:	f89a 3000 	ldrb.w	r3, [sl]
 8004b04:	2b2a      	cmp	r3, #42	; 0x2a
 8004b06:	d015      	beq.n	8004b34 <_vfiprintf_r+0x13c>
 8004b08:	9a07      	ldr	r2, [sp, #28]
 8004b0a:	4654      	mov	r4, sl
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f04f 0c0a 	mov.w	ip, #10
 8004b12:	4621      	mov	r1, r4
 8004b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b18:	3b30      	subs	r3, #48	; 0x30
 8004b1a:	2b09      	cmp	r3, #9
 8004b1c:	d94e      	bls.n	8004bbc <_vfiprintf_r+0x1c4>
 8004b1e:	b1b0      	cbz	r0, 8004b4e <_vfiprintf_r+0x156>
 8004b20:	9207      	str	r2, [sp, #28]
 8004b22:	e014      	b.n	8004b4e <_vfiprintf_r+0x156>
 8004b24:	eba0 0308 	sub.w	r3, r0, r8
 8004b28:	fa09 f303 	lsl.w	r3, r9, r3
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	9304      	str	r3, [sp, #16]
 8004b30:	46a2      	mov	sl, r4
 8004b32:	e7d2      	b.n	8004ada <_vfiprintf_r+0xe2>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	1d19      	adds	r1, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	9103      	str	r1, [sp, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bfbb      	ittet	lt
 8004b40:	425b      	neglt	r3, r3
 8004b42:	f042 0202 	orrlt.w	r2, r2, #2
 8004b46:	9307      	strge	r3, [sp, #28]
 8004b48:	9307      	strlt	r3, [sp, #28]
 8004b4a:	bfb8      	it	lt
 8004b4c:	9204      	strlt	r2, [sp, #16]
 8004b4e:	7823      	ldrb	r3, [r4, #0]
 8004b50:	2b2e      	cmp	r3, #46	; 0x2e
 8004b52:	d10c      	bne.n	8004b6e <_vfiprintf_r+0x176>
 8004b54:	7863      	ldrb	r3, [r4, #1]
 8004b56:	2b2a      	cmp	r3, #42	; 0x2a
 8004b58:	d135      	bne.n	8004bc6 <_vfiprintf_r+0x1ce>
 8004b5a:	9b03      	ldr	r3, [sp, #12]
 8004b5c:	1d1a      	adds	r2, r3, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	9203      	str	r2, [sp, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfb8      	it	lt
 8004b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b6a:	3402      	adds	r4, #2
 8004b6c:	9305      	str	r3, [sp, #20]
 8004b6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c54 <_vfiprintf_r+0x25c>
 8004b72:	7821      	ldrb	r1, [r4, #0]
 8004b74:	2203      	movs	r2, #3
 8004b76:	4650      	mov	r0, sl
 8004b78:	f7fb fb2a 	bl	80001d0 <memchr>
 8004b7c:	b140      	cbz	r0, 8004b90 <_vfiprintf_r+0x198>
 8004b7e:	2340      	movs	r3, #64	; 0x40
 8004b80:	eba0 000a 	sub.w	r0, r0, sl
 8004b84:	fa03 f000 	lsl.w	r0, r3, r0
 8004b88:	9b04      	ldr	r3, [sp, #16]
 8004b8a:	4303      	orrs	r3, r0
 8004b8c:	3401      	adds	r4, #1
 8004b8e:	9304      	str	r3, [sp, #16]
 8004b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b94:	482c      	ldr	r0, [pc, #176]	; (8004c48 <_vfiprintf_r+0x250>)
 8004b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b9a:	2206      	movs	r2, #6
 8004b9c:	f7fb fb18 	bl	80001d0 <memchr>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d03f      	beq.n	8004c24 <_vfiprintf_r+0x22c>
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <_vfiprintf_r+0x254>)
 8004ba6:	bb1b      	cbnz	r3, 8004bf0 <_vfiprintf_r+0x1f8>
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	3307      	adds	r3, #7
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	9303      	str	r3, [sp, #12]
 8004bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb6:	443b      	add	r3, r7
 8004bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bba:	e767      	b.n	8004a8c <_vfiprintf_r+0x94>
 8004bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	e7a5      	b.n	8004b12 <_vfiprintf_r+0x11a>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	3401      	adds	r4, #1
 8004bca:	9305      	str	r3, [sp, #20]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f04f 0c0a 	mov.w	ip, #10
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bd8:	3a30      	subs	r2, #48	; 0x30
 8004bda:	2a09      	cmp	r2, #9
 8004bdc:	d903      	bls.n	8004be6 <_vfiprintf_r+0x1ee>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0c5      	beq.n	8004b6e <_vfiprintf_r+0x176>
 8004be2:	9105      	str	r1, [sp, #20]
 8004be4:	e7c3      	b.n	8004b6e <_vfiprintf_r+0x176>
 8004be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bea:	4604      	mov	r4, r0
 8004bec:	2301      	movs	r3, #1
 8004bee:	e7f0      	b.n	8004bd2 <_vfiprintf_r+0x1da>
 8004bf0:	ab03      	add	r3, sp, #12
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	462a      	mov	r2, r5
 8004bf6:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <_vfiprintf_r+0x258>)
 8004bf8:	a904      	add	r1, sp, #16
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f3af 8000 	nop.w
 8004c00:	4607      	mov	r7, r0
 8004c02:	1c78      	adds	r0, r7, #1
 8004c04:	d1d6      	bne.n	8004bb4 <_vfiprintf_r+0x1bc>
 8004c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c08:	07d9      	lsls	r1, r3, #31
 8004c0a:	d405      	bmi.n	8004c18 <_vfiprintf_r+0x220>
 8004c0c:	89ab      	ldrh	r3, [r5, #12]
 8004c0e:	059a      	lsls	r2, r3, #22
 8004c10:	d402      	bmi.n	8004c18 <_vfiprintf_r+0x220>
 8004c12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c14:	f000 faa1 	bl	800515a <__retarget_lock_release_recursive>
 8004c18:	89ab      	ldrh	r3, [r5, #12]
 8004c1a:	065b      	lsls	r3, r3, #25
 8004c1c:	f53f af12 	bmi.w	8004a44 <_vfiprintf_r+0x4c>
 8004c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c22:	e711      	b.n	8004a48 <_vfiprintf_r+0x50>
 8004c24:	ab03      	add	r3, sp, #12
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	462a      	mov	r2, r5
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <_vfiprintf_r+0x258>)
 8004c2c:	a904      	add	r1, sp, #16
 8004c2e:	4630      	mov	r0, r6
 8004c30:	f7fe fe3c 	bl	80038ac <_printf_i>
 8004c34:	e7e4      	b.n	8004c00 <_vfiprintf_r+0x208>
 8004c36:	bf00      	nop
 8004c38:	0800571c 	.word	0x0800571c
 8004c3c:	0800573c 	.word	0x0800573c
 8004c40:	080056fc 	.word	0x080056fc
 8004c44:	0800561c 	.word	0x0800561c
 8004c48:	08005626 	.word	0x08005626
 8004c4c:	00000000 	.word	0x00000000
 8004c50:	080049d3 	.word	0x080049d3
 8004c54:	08005622 	.word	0x08005622

08004c58 <__swbuf_r>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	460e      	mov	r6, r1
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	4605      	mov	r5, r0
 8004c60:	b118      	cbz	r0, 8004c6a <__swbuf_r+0x12>
 8004c62:	6983      	ldr	r3, [r0, #24]
 8004c64:	b90b      	cbnz	r3, 8004c6a <__swbuf_r+0x12>
 8004c66:	f000 f9d9 	bl	800501c <__sinit>
 8004c6a:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <__swbuf_r+0x98>)
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	d12b      	bne.n	8004cc8 <__swbuf_r+0x70>
 8004c70:	686c      	ldr	r4, [r5, #4]
 8004c72:	69a3      	ldr	r3, [r4, #24]
 8004c74:	60a3      	str	r3, [r4, #8]
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	071a      	lsls	r2, r3, #28
 8004c7a:	d52f      	bpl.n	8004cdc <__swbuf_r+0x84>
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	b36b      	cbz	r3, 8004cdc <__swbuf_r+0x84>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1ac0      	subs	r0, r0, r3
 8004c86:	6963      	ldr	r3, [r4, #20]
 8004c88:	b2f6      	uxtb	r6, r6
 8004c8a:	4283      	cmp	r3, r0
 8004c8c:	4637      	mov	r7, r6
 8004c8e:	dc04      	bgt.n	8004c9a <__swbuf_r+0x42>
 8004c90:	4621      	mov	r1, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f92e 	bl	8004ef4 <_fflush_r>
 8004c98:	bb30      	cbnz	r0, 8004ce8 <__swbuf_r+0x90>
 8004c9a:	68a3      	ldr	r3, [r4, #8]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	60a3      	str	r3, [r4, #8]
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	6022      	str	r2, [r4, #0]
 8004ca6:	701e      	strb	r6, [r3, #0]
 8004ca8:	6963      	ldr	r3, [r4, #20]
 8004caa:	3001      	adds	r0, #1
 8004cac:	4283      	cmp	r3, r0
 8004cae:	d004      	beq.n	8004cba <__swbuf_r+0x62>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	07db      	lsls	r3, r3, #31
 8004cb4:	d506      	bpl.n	8004cc4 <__swbuf_r+0x6c>
 8004cb6:	2e0a      	cmp	r6, #10
 8004cb8:	d104      	bne.n	8004cc4 <__swbuf_r+0x6c>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 f919 	bl	8004ef4 <_fflush_r>
 8004cc2:	b988      	cbnz	r0, 8004ce8 <__swbuf_r+0x90>
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <__swbuf_r+0x9c>)
 8004cca:	429c      	cmp	r4, r3
 8004ccc:	d101      	bne.n	8004cd2 <__swbuf_r+0x7a>
 8004cce:	68ac      	ldr	r4, [r5, #8]
 8004cd0:	e7cf      	b.n	8004c72 <__swbuf_r+0x1a>
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <__swbuf_r+0xa0>)
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	bf08      	it	eq
 8004cd8:	68ec      	ldreq	r4, [r5, #12]
 8004cda:	e7ca      	b.n	8004c72 <__swbuf_r+0x1a>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 f80c 	bl	8004cfc <__swsetup_r>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d0cb      	beq.n	8004c80 <__swbuf_r+0x28>
 8004ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8004cec:	e7ea      	b.n	8004cc4 <__swbuf_r+0x6c>
 8004cee:	bf00      	nop
 8004cf0:	0800571c 	.word	0x0800571c
 8004cf4:	0800573c 	.word	0x0800573c
 8004cf8:	080056fc 	.word	0x080056fc

08004cfc <__swsetup_r>:
 8004cfc:	4b32      	ldr	r3, [pc, #200]	; (8004dc8 <__swsetup_r+0xcc>)
 8004cfe:	b570      	push	{r4, r5, r6, lr}
 8004d00:	681d      	ldr	r5, [r3, #0]
 8004d02:	4606      	mov	r6, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	b125      	cbz	r5, 8004d12 <__swsetup_r+0x16>
 8004d08:	69ab      	ldr	r3, [r5, #24]
 8004d0a:	b913      	cbnz	r3, 8004d12 <__swsetup_r+0x16>
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 f985 	bl	800501c <__sinit>
 8004d12:	4b2e      	ldr	r3, [pc, #184]	; (8004dcc <__swsetup_r+0xd0>)
 8004d14:	429c      	cmp	r4, r3
 8004d16:	d10f      	bne.n	8004d38 <__swsetup_r+0x3c>
 8004d18:	686c      	ldr	r4, [r5, #4]
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d20:	0719      	lsls	r1, r3, #28
 8004d22:	d42c      	bmi.n	8004d7e <__swsetup_r+0x82>
 8004d24:	06dd      	lsls	r5, r3, #27
 8004d26:	d411      	bmi.n	8004d4c <__swsetup_r+0x50>
 8004d28:	2309      	movs	r3, #9
 8004d2a:	6033      	str	r3, [r6, #0]
 8004d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d30:	81a3      	strh	r3, [r4, #12]
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295
 8004d36:	e03e      	b.n	8004db6 <__swsetup_r+0xba>
 8004d38:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <__swsetup_r+0xd4>)
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	d101      	bne.n	8004d42 <__swsetup_r+0x46>
 8004d3e:	68ac      	ldr	r4, [r5, #8]
 8004d40:	e7eb      	b.n	8004d1a <__swsetup_r+0x1e>
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <__swsetup_r+0xd8>)
 8004d44:	429c      	cmp	r4, r3
 8004d46:	bf08      	it	eq
 8004d48:	68ec      	ldreq	r4, [r5, #12]
 8004d4a:	e7e6      	b.n	8004d1a <__swsetup_r+0x1e>
 8004d4c:	0758      	lsls	r0, r3, #29
 8004d4e:	d512      	bpl.n	8004d76 <__swsetup_r+0x7a>
 8004d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d52:	b141      	cbz	r1, 8004d66 <__swsetup_r+0x6a>
 8004d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	d002      	beq.n	8004d62 <__swsetup_r+0x66>
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f7ff fdc9 	bl	80048f4 <_free_r>
 8004d62:	2300      	movs	r3, #0
 8004d64:	6363      	str	r3, [r4, #52]	; 0x34
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d6c:	81a3      	strh	r3, [r4, #12]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6063      	str	r3, [r4, #4]
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f043 0308 	orr.w	r3, r3, #8
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	6923      	ldr	r3, [r4, #16]
 8004d80:	b94b      	cbnz	r3, 8004d96 <__swsetup_r+0x9a>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d003      	beq.n	8004d96 <__swsetup_r+0x9a>
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4630      	mov	r0, r6
 8004d92:	f000 fa07 	bl	80051a4 <__smakebuf_r>
 8004d96:	89a0      	ldrh	r0, [r4, #12]
 8004d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d9c:	f010 0301 	ands.w	r3, r0, #1
 8004da0:	d00a      	beq.n	8004db8 <__swsetup_r+0xbc>
 8004da2:	2300      	movs	r3, #0
 8004da4:	60a3      	str	r3, [r4, #8]
 8004da6:	6963      	ldr	r3, [r4, #20]
 8004da8:	425b      	negs	r3, r3
 8004daa:	61a3      	str	r3, [r4, #24]
 8004dac:	6923      	ldr	r3, [r4, #16]
 8004dae:	b943      	cbnz	r3, 8004dc2 <__swsetup_r+0xc6>
 8004db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004db4:	d1ba      	bne.n	8004d2c <__swsetup_r+0x30>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	0781      	lsls	r1, r0, #30
 8004dba:	bf58      	it	pl
 8004dbc:	6963      	ldrpl	r3, [r4, #20]
 8004dbe:	60a3      	str	r3, [r4, #8]
 8004dc0:	e7f4      	b.n	8004dac <__swsetup_r+0xb0>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e7f7      	b.n	8004db6 <__swsetup_r+0xba>
 8004dc6:	bf00      	nop
 8004dc8:	20000004 	.word	0x20000004
 8004dcc:	0800571c 	.word	0x0800571c
 8004dd0:	0800573c 	.word	0x0800573c
 8004dd4:	080056fc 	.word	0x080056fc

08004dd8 <abort>:
 8004dd8:	b508      	push	{r3, lr}
 8004dda:	2006      	movs	r0, #6
 8004ddc:	f000 fa4a 	bl	8005274 <raise>
 8004de0:	2001      	movs	r0, #1
 8004de2:	f7fc ffbb 	bl	8001d5c <_exit>
	...

08004de8 <__sflush_r>:
 8004de8:	898a      	ldrh	r2, [r1, #12]
 8004dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dee:	4605      	mov	r5, r0
 8004df0:	0710      	lsls	r0, r2, #28
 8004df2:	460c      	mov	r4, r1
 8004df4:	d458      	bmi.n	8004ea8 <__sflush_r+0xc0>
 8004df6:	684b      	ldr	r3, [r1, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	dc05      	bgt.n	8004e08 <__sflush_r+0x20>
 8004dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dc02      	bgt.n	8004e08 <__sflush_r+0x20>
 8004e02:	2000      	movs	r0, #0
 8004e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e0a:	2e00      	cmp	r6, #0
 8004e0c:	d0f9      	beq.n	8004e02 <__sflush_r+0x1a>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e14:	682f      	ldr	r7, [r5, #0]
 8004e16:	602b      	str	r3, [r5, #0]
 8004e18:	d032      	beq.n	8004e80 <__sflush_r+0x98>
 8004e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	075a      	lsls	r2, r3, #29
 8004e20:	d505      	bpl.n	8004e2e <__sflush_r+0x46>
 8004e22:	6863      	ldr	r3, [r4, #4]
 8004e24:	1ac0      	subs	r0, r0, r3
 8004e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e28:	b10b      	cbz	r3, 8004e2e <__sflush_r+0x46>
 8004e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e2c:	1ac0      	subs	r0, r0, r3
 8004e2e:	2300      	movs	r3, #0
 8004e30:	4602      	mov	r2, r0
 8004e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e34:	6a21      	ldr	r1, [r4, #32]
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b0      	blx	r6
 8004e3a:	1c43      	adds	r3, r0, #1
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	d106      	bne.n	8004e4e <__sflush_r+0x66>
 8004e40:	6829      	ldr	r1, [r5, #0]
 8004e42:	291d      	cmp	r1, #29
 8004e44:	d82c      	bhi.n	8004ea0 <__sflush_r+0xb8>
 8004e46:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <__sflush_r+0x108>)
 8004e48:	40ca      	lsrs	r2, r1
 8004e4a:	07d6      	lsls	r6, r2, #31
 8004e4c:	d528      	bpl.n	8004ea0 <__sflush_r+0xb8>
 8004e4e:	2200      	movs	r2, #0
 8004e50:	6062      	str	r2, [r4, #4]
 8004e52:	04d9      	lsls	r1, r3, #19
 8004e54:	6922      	ldr	r2, [r4, #16]
 8004e56:	6022      	str	r2, [r4, #0]
 8004e58:	d504      	bpl.n	8004e64 <__sflush_r+0x7c>
 8004e5a:	1c42      	adds	r2, r0, #1
 8004e5c:	d101      	bne.n	8004e62 <__sflush_r+0x7a>
 8004e5e:	682b      	ldr	r3, [r5, #0]
 8004e60:	b903      	cbnz	r3, 8004e64 <__sflush_r+0x7c>
 8004e62:	6560      	str	r0, [r4, #84]	; 0x54
 8004e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e66:	602f      	str	r7, [r5, #0]
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	d0ca      	beq.n	8004e02 <__sflush_r+0x1a>
 8004e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e70:	4299      	cmp	r1, r3
 8004e72:	d002      	beq.n	8004e7a <__sflush_r+0x92>
 8004e74:	4628      	mov	r0, r5
 8004e76:	f7ff fd3d 	bl	80048f4 <_free_r>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8004e7e:	e7c1      	b.n	8004e04 <__sflush_r+0x1c>
 8004e80:	6a21      	ldr	r1, [r4, #32]
 8004e82:	2301      	movs	r3, #1
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b0      	blx	r6
 8004e88:	1c41      	adds	r1, r0, #1
 8004e8a:	d1c7      	bne.n	8004e1c <__sflush_r+0x34>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0c4      	beq.n	8004e1c <__sflush_r+0x34>
 8004e92:	2b1d      	cmp	r3, #29
 8004e94:	d001      	beq.n	8004e9a <__sflush_r+0xb2>
 8004e96:	2b16      	cmp	r3, #22
 8004e98:	d101      	bne.n	8004e9e <__sflush_r+0xb6>
 8004e9a:	602f      	str	r7, [r5, #0]
 8004e9c:	e7b1      	b.n	8004e02 <__sflush_r+0x1a>
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea4:	81a3      	strh	r3, [r4, #12]
 8004ea6:	e7ad      	b.n	8004e04 <__sflush_r+0x1c>
 8004ea8:	690f      	ldr	r7, [r1, #16]
 8004eaa:	2f00      	cmp	r7, #0
 8004eac:	d0a9      	beq.n	8004e02 <__sflush_r+0x1a>
 8004eae:	0793      	lsls	r3, r2, #30
 8004eb0:	680e      	ldr	r6, [r1, #0]
 8004eb2:	bf08      	it	eq
 8004eb4:	694b      	ldreq	r3, [r1, #20]
 8004eb6:	600f      	str	r7, [r1, #0]
 8004eb8:	bf18      	it	ne
 8004eba:	2300      	movne	r3, #0
 8004ebc:	eba6 0807 	sub.w	r8, r6, r7
 8004ec0:	608b      	str	r3, [r1, #8]
 8004ec2:	f1b8 0f00 	cmp.w	r8, #0
 8004ec6:	dd9c      	ble.n	8004e02 <__sflush_r+0x1a>
 8004ec8:	6a21      	ldr	r1, [r4, #32]
 8004eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ecc:	4643      	mov	r3, r8
 8004ece:	463a      	mov	r2, r7
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	47b0      	blx	r6
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	dc06      	bgt.n	8004ee6 <__sflush_r+0xfe>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ede:	81a3      	strh	r3, [r4, #12]
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	e78e      	b.n	8004e04 <__sflush_r+0x1c>
 8004ee6:	4407      	add	r7, r0
 8004ee8:	eba8 0800 	sub.w	r8, r8, r0
 8004eec:	e7e9      	b.n	8004ec2 <__sflush_r+0xda>
 8004eee:	bf00      	nop
 8004ef0:	20400001 	.word	0x20400001

08004ef4 <_fflush_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	690b      	ldr	r3, [r1, #16]
 8004ef8:	4605      	mov	r5, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b913      	cbnz	r3, 8004f04 <_fflush_r+0x10>
 8004efe:	2500      	movs	r5, #0
 8004f00:	4628      	mov	r0, r5
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	b118      	cbz	r0, 8004f0e <_fflush_r+0x1a>
 8004f06:	6983      	ldr	r3, [r0, #24]
 8004f08:	b90b      	cbnz	r3, 8004f0e <_fflush_r+0x1a>
 8004f0a:	f000 f887 	bl	800501c <__sinit>
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <_fflush_r+0x6c>)
 8004f10:	429c      	cmp	r4, r3
 8004f12:	d11b      	bne.n	8004f4c <_fflush_r+0x58>
 8004f14:	686c      	ldr	r4, [r5, #4]
 8004f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ef      	beq.n	8004efe <_fflush_r+0xa>
 8004f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f20:	07d0      	lsls	r0, r2, #31
 8004f22:	d404      	bmi.n	8004f2e <_fflush_r+0x3a>
 8004f24:	0599      	lsls	r1, r3, #22
 8004f26:	d402      	bmi.n	8004f2e <_fflush_r+0x3a>
 8004f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2a:	f000 f915 	bl	8005158 <__retarget_lock_acquire_recursive>
 8004f2e:	4628      	mov	r0, r5
 8004f30:	4621      	mov	r1, r4
 8004f32:	f7ff ff59 	bl	8004de8 <__sflush_r>
 8004f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f38:	07da      	lsls	r2, r3, #31
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	d4e0      	bmi.n	8004f00 <_fflush_r+0xc>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	059b      	lsls	r3, r3, #22
 8004f42:	d4dd      	bmi.n	8004f00 <_fflush_r+0xc>
 8004f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f46:	f000 f908 	bl	800515a <__retarget_lock_release_recursive>
 8004f4a:	e7d9      	b.n	8004f00 <_fflush_r+0xc>
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <_fflush_r+0x70>)
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d101      	bne.n	8004f56 <_fflush_r+0x62>
 8004f52:	68ac      	ldr	r4, [r5, #8]
 8004f54:	e7df      	b.n	8004f16 <_fflush_r+0x22>
 8004f56:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <_fflush_r+0x74>)
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	bf08      	it	eq
 8004f5c:	68ec      	ldreq	r4, [r5, #12]
 8004f5e:	e7da      	b.n	8004f16 <_fflush_r+0x22>
 8004f60:	0800571c 	.word	0x0800571c
 8004f64:	0800573c 	.word	0x0800573c
 8004f68:	080056fc 	.word	0x080056fc

08004f6c <std>:
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	b510      	push	{r4, lr}
 8004f70:	4604      	mov	r4, r0
 8004f72:	e9c0 3300 	strd	r3, r3, [r0]
 8004f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f7a:	6083      	str	r3, [r0, #8]
 8004f7c:	8181      	strh	r1, [r0, #12]
 8004f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f80:	81c2      	strh	r2, [r0, #14]
 8004f82:	6183      	str	r3, [r0, #24]
 8004f84:	4619      	mov	r1, r3
 8004f86:	2208      	movs	r2, #8
 8004f88:	305c      	adds	r0, #92	; 0x5c
 8004f8a:	f7fd fd39 	bl	8002a00 <memset>
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <std+0x38>)
 8004f90:	6263      	str	r3, [r4, #36]	; 0x24
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <std+0x3c>)
 8004f94:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <std+0x40>)
 8004f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <std+0x44>)
 8004f9c:	6224      	str	r4, [r4, #32]
 8004f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	bf00      	nop
 8004fa4:	080052ad 	.word	0x080052ad
 8004fa8:	080052cf 	.word	0x080052cf
 8004fac:	08005307 	.word	0x08005307
 8004fb0:	0800532b 	.word	0x0800532b

08004fb4 <_cleanup_r>:
 8004fb4:	4901      	ldr	r1, [pc, #4]	; (8004fbc <_cleanup_r+0x8>)
 8004fb6:	f000 b8af 	b.w	8005118 <_fwalk_reent>
 8004fba:	bf00      	nop
 8004fbc:	08004ef5 	.word	0x08004ef5

08004fc0 <__sfmoreglue>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	1e4a      	subs	r2, r1, #1
 8004fc4:	2568      	movs	r5, #104	; 0x68
 8004fc6:	4355      	muls	r5, r2
 8004fc8:	460e      	mov	r6, r1
 8004fca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fce:	f7fe fa23 	bl	8003418 <_malloc_r>
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	b140      	cbz	r0, 8004fe8 <__sfmoreglue+0x28>
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	e9c0 1600 	strd	r1, r6, [r0]
 8004fdc:	300c      	adds	r0, #12
 8004fde:	60a0      	str	r0, [r4, #8]
 8004fe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fe4:	f7fd fd0c 	bl	8002a00 <memset>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	bd70      	pop	{r4, r5, r6, pc}

08004fec <__sfp_lock_acquire>:
 8004fec:	4801      	ldr	r0, [pc, #4]	; (8004ff4 <__sfp_lock_acquire+0x8>)
 8004fee:	f000 b8b3 	b.w	8005158 <__retarget_lock_acquire_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	200001bc 	.word	0x200001bc

08004ff8 <__sfp_lock_release>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__sfp_lock_release+0x8>)
 8004ffa:	f000 b8ae 	b.w	800515a <__retarget_lock_release_recursive>
 8004ffe:	bf00      	nop
 8005000:	200001bc 	.word	0x200001bc

08005004 <__sinit_lock_acquire>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__sinit_lock_acquire+0x8>)
 8005006:	f000 b8a7 	b.w	8005158 <__retarget_lock_acquire_recursive>
 800500a:	bf00      	nop
 800500c:	200001b7 	.word	0x200001b7

08005010 <__sinit_lock_release>:
 8005010:	4801      	ldr	r0, [pc, #4]	; (8005018 <__sinit_lock_release+0x8>)
 8005012:	f000 b8a2 	b.w	800515a <__retarget_lock_release_recursive>
 8005016:	bf00      	nop
 8005018:	200001b7 	.word	0x200001b7

0800501c <__sinit>:
 800501c:	b510      	push	{r4, lr}
 800501e:	4604      	mov	r4, r0
 8005020:	f7ff fff0 	bl	8005004 <__sinit_lock_acquire>
 8005024:	69a3      	ldr	r3, [r4, #24]
 8005026:	b11b      	cbz	r3, 8005030 <__sinit+0x14>
 8005028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800502c:	f7ff bff0 	b.w	8005010 <__sinit_lock_release>
 8005030:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005034:	6523      	str	r3, [r4, #80]	; 0x50
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <__sinit+0x68>)
 8005038:	4a13      	ldr	r2, [pc, #76]	; (8005088 <__sinit+0x6c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	62a2      	str	r2, [r4, #40]	; 0x28
 800503e:	42a3      	cmp	r3, r4
 8005040:	bf04      	itt	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	61a3      	streq	r3, [r4, #24]
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f820 	bl	800508c <__sfp>
 800504c:	6060      	str	r0, [r4, #4]
 800504e:	4620      	mov	r0, r4
 8005050:	f000 f81c 	bl	800508c <__sfp>
 8005054:	60a0      	str	r0, [r4, #8]
 8005056:	4620      	mov	r0, r4
 8005058:	f000 f818 	bl	800508c <__sfp>
 800505c:	2200      	movs	r2, #0
 800505e:	60e0      	str	r0, [r4, #12]
 8005060:	2104      	movs	r1, #4
 8005062:	6860      	ldr	r0, [r4, #4]
 8005064:	f7ff ff82 	bl	8004f6c <std>
 8005068:	68a0      	ldr	r0, [r4, #8]
 800506a:	2201      	movs	r2, #1
 800506c:	2109      	movs	r1, #9
 800506e:	f7ff ff7d 	bl	8004f6c <std>
 8005072:	68e0      	ldr	r0, [r4, #12]
 8005074:	2202      	movs	r2, #2
 8005076:	2112      	movs	r1, #18
 8005078:	f7ff ff78 	bl	8004f6c <std>
 800507c:	2301      	movs	r3, #1
 800507e:	61a3      	str	r3, [r4, #24]
 8005080:	e7d2      	b.n	8005028 <__sinit+0xc>
 8005082:	bf00      	nop
 8005084:	08005494 	.word	0x08005494
 8005088:	08004fb5 	.word	0x08004fb5

0800508c <__sfp>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	4607      	mov	r7, r0
 8005090:	f7ff ffac 	bl	8004fec <__sfp_lock_acquire>
 8005094:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <__sfp+0x84>)
 8005096:	681e      	ldr	r6, [r3, #0]
 8005098:	69b3      	ldr	r3, [r6, #24]
 800509a:	b913      	cbnz	r3, 80050a2 <__sfp+0x16>
 800509c:	4630      	mov	r0, r6
 800509e:	f7ff ffbd 	bl	800501c <__sinit>
 80050a2:	3648      	adds	r6, #72	; 0x48
 80050a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	d503      	bpl.n	80050b4 <__sfp+0x28>
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	b30b      	cbz	r3, 80050f4 <__sfp+0x68>
 80050b0:	6836      	ldr	r6, [r6, #0]
 80050b2:	e7f7      	b.n	80050a4 <__sfp+0x18>
 80050b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050b8:	b9d5      	cbnz	r5, 80050f0 <__sfp+0x64>
 80050ba:	4b16      	ldr	r3, [pc, #88]	; (8005114 <__sfp+0x88>)
 80050bc:	60e3      	str	r3, [r4, #12]
 80050be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050c2:	6665      	str	r5, [r4, #100]	; 0x64
 80050c4:	f000 f847 	bl	8005156 <__retarget_lock_init_recursive>
 80050c8:	f7ff ff96 	bl	8004ff8 <__sfp_lock_release>
 80050cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050d4:	6025      	str	r5, [r4, #0]
 80050d6:	61a5      	str	r5, [r4, #24]
 80050d8:	2208      	movs	r2, #8
 80050da:	4629      	mov	r1, r5
 80050dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050e0:	f7fd fc8e 	bl	8002a00 <memset>
 80050e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050ec:	4620      	mov	r0, r4
 80050ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f0:	3468      	adds	r4, #104	; 0x68
 80050f2:	e7d9      	b.n	80050a8 <__sfp+0x1c>
 80050f4:	2104      	movs	r1, #4
 80050f6:	4638      	mov	r0, r7
 80050f8:	f7ff ff62 	bl	8004fc0 <__sfmoreglue>
 80050fc:	4604      	mov	r4, r0
 80050fe:	6030      	str	r0, [r6, #0]
 8005100:	2800      	cmp	r0, #0
 8005102:	d1d5      	bne.n	80050b0 <__sfp+0x24>
 8005104:	f7ff ff78 	bl	8004ff8 <__sfp_lock_release>
 8005108:	230c      	movs	r3, #12
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	e7ee      	b.n	80050ec <__sfp+0x60>
 800510e:	bf00      	nop
 8005110:	08005494 	.word	0x08005494
 8005114:	ffff0001 	.word	0xffff0001

08005118 <_fwalk_reent>:
 8005118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800511c:	4606      	mov	r6, r0
 800511e:	4688      	mov	r8, r1
 8005120:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005124:	2700      	movs	r7, #0
 8005126:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800512a:	f1b9 0901 	subs.w	r9, r9, #1
 800512e:	d505      	bpl.n	800513c <_fwalk_reent+0x24>
 8005130:	6824      	ldr	r4, [r4, #0]
 8005132:	2c00      	cmp	r4, #0
 8005134:	d1f7      	bne.n	8005126 <_fwalk_reent+0xe>
 8005136:	4638      	mov	r0, r7
 8005138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800513c:	89ab      	ldrh	r3, [r5, #12]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d907      	bls.n	8005152 <_fwalk_reent+0x3a>
 8005142:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005146:	3301      	adds	r3, #1
 8005148:	d003      	beq.n	8005152 <_fwalk_reent+0x3a>
 800514a:	4629      	mov	r1, r5
 800514c:	4630      	mov	r0, r6
 800514e:	47c0      	blx	r8
 8005150:	4307      	orrs	r7, r0
 8005152:	3568      	adds	r5, #104	; 0x68
 8005154:	e7e9      	b.n	800512a <_fwalk_reent+0x12>

08005156 <__retarget_lock_init_recursive>:
 8005156:	4770      	bx	lr

08005158 <__retarget_lock_acquire_recursive>:
 8005158:	4770      	bx	lr

0800515a <__retarget_lock_release_recursive>:
 800515a:	4770      	bx	lr

0800515c <__swhatbuf_r>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	460e      	mov	r6, r1
 8005160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005164:	2900      	cmp	r1, #0
 8005166:	b096      	sub	sp, #88	; 0x58
 8005168:	4614      	mov	r4, r2
 800516a:	461d      	mov	r5, r3
 800516c:	da07      	bge.n	800517e <__swhatbuf_r+0x22>
 800516e:	2300      	movs	r3, #0
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	89b3      	ldrh	r3, [r6, #12]
 8005174:	061a      	lsls	r2, r3, #24
 8005176:	d410      	bmi.n	800519a <__swhatbuf_r+0x3e>
 8005178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517c:	e00e      	b.n	800519c <__swhatbuf_r+0x40>
 800517e:	466a      	mov	r2, sp
 8005180:	f000 f8fa 	bl	8005378 <_fstat_r>
 8005184:	2800      	cmp	r0, #0
 8005186:	dbf2      	blt.n	800516e <__swhatbuf_r+0x12>
 8005188:	9a01      	ldr	r2, [sp, #4]
 800518a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800518e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005192:	425a      	negs	r2, r3
 8005194:	415a      	adcs	r2, r3
 8005196:	602a      	str	r2, [r5, #0]
 8005198:	e7ee      	b.n	8005178 <__swhatbuf_r+0x1c>
 800519a:	2340      	movs	r3, #64	; 0x40
 800519c:	2000      	movs	r0, #0
 800519e:	6023      	str	r3, [r4, #0]
 80051a0:	b016      	add	sp, #88	; 0x58
 80051a2:	bd70      	pop	{r4, r5, r6, pc}

080051a4 <__smakebuf_r>:
 80051a4:	898b      	ldrh	r3, [r1, #12]
 80051a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051a8:	079d      	lsls	r5, r3, #30
 80051aa:	4606      	mov	r6, r0
 80051ac:	460c      	mov	r4, r1
 80051ae:	d507      	bpl.n	80051c0 <__smakebuf_r+0x1c>
 80051b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	2301      	movs	r3, #1
 80051ba:	6163      	str	r3, [r4, #20]
 80051bc:	b002      	add	sp, #8
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	ab01      	add	r3, sp, #4
 80051c2:	466a      	mov	r2, sp
 80051c4:	f7ff ffca 	bl	800515c <__swhatbuf_r>
 80051c8:	9900      	ldr	r1, [sp, #0]
 80051ca:	4605      	mov	r5, r0
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7fe f923 	bl	8003418 <_malloc_r>
 80051d2:	b948      	cbnz	r0, 80051e8 <__smakebuf_r+0x44>
 80051d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d8:	059a      	lsls	r2, r3, #22
 80051da:	d4ef      	bmi.n	80051bc <__smakebuf_r+0x18>
 80051dc:	f023 0303 	bic.w	r3, r3, #3
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	e7e3      	b.n	80051b0 <__smakebuf_r+0xc>
 80051e8:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <__smakebuf_r+0x7c>)
 80051ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	6020      	str	r0, [r4, #0]
 80051f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f4:	81a3      	strh	r3, [r4, #12]
 80051f6:	9b00      	ldr	r3, [sp, #0]
 80051f8:	6163      	str	r3, [r4, #20]
 80051fa:	9b01      	ldr	r3, [sp, #4]
 80051fc:	6120      	str	r0, [r4, #16]
 80051fe:	b15b      	cbz	r3, 8005218 <__smakebuf_r+0x74>
 8005200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005204:	4630      	mov	r0, r6
 8005206:	f000 f8c9 	bl	800539c <_isatty_r>
 800520a:	b128      	cbz	r0, 8005218 <__smakebuf_r+0x74>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	89a0      	ldrh	r0, [r4, #12]
 800521a:	4305      	orrs	r5, r0
 800521c:	81a5      	strh	r5, [r4, #12]
 800521e:	e7cd      	b.n	80051bc <__smakebuf_r+0x18>
 8005220:	08004fb5 	.word	0x08004fb5

08005224 <_raise_r>:
 8005224:	291f      	cmp	r1, #31
 8005226:	b538      	push	{r3, r4, r5, lr}
 8005228:	4604      	mov	r4, r0
 800522a:	460d      	mov	r5, r1
 800522c:	d904      	bls.n	8005238 <_raise_r+0x14>
 800522e:	2316      	movs	r3, #22
 8005230:	6003      	str	r3, [r0, #0]
 8005232:	f04f 30ff 	mov.w	r0, #4294967295
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800523a:	b112      	cbz	r2, 8005242 <_raise_r+0x1e>
 800523c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005240:	b94b      	cbnz	r3, 8005256 <_raise_r+0x32>
 8005242:	4620      	mov	r0, r4
 8005244:	f000 f830 	bl	80052a8 <_getpid_r>
 8005248:	462a      	mov	r2, r5
 800524a:	4601      	mov	r1, r0
 800524c:	4620      	mov	r0, r4
 800524e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005252:	f000 b817 	b.w	8005284 <_kill_r>
 8005256:	2b01      	cmp	r3, #1
 8005258:	d00a      	beq.n	8005270 <_raise_r+0x4c>
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	d103      	bne.n	8005266 <_raise_r+0x42>
 800525e:	2316      	movs	r3, #22
 8005260:	6003      	str	r3, [r0, #0]
 8005262:	2001      	movs	r0, #1
 8005264:	e7e7      	b.n	8005236 <_raise_r+0x12>
 8005266:	2400      	movs	r4, #0
 8005268:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800526c:	4628      	mov	r0, r5
 800526e:	4798      	blx	r3
 8005270:	2000      	movs	r0, #0
 8005272:	e7e0      	b.n	8005236 <_raise_r+0x12>

08005274 <raise>:
 8005274:	4b02      	ldr	r3, [pc, #8]	; (8005280 <raise+0xc>)
 8005276:	4601      	mov	r1, r0
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	f7ff bfd3 	b.w	8005224 <_raise_r>
 800527e:	bf00      	nop
 8005280:	20000004 	.word	0x20000004

08005284 <_kill_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d07      	ldr	r5, [pc, #28]	; (80052a4 <_kill_r+0x20>)
 8005288:	2300      	movs	r3, #0
 800528a:	4604      	mov	r4, r0
 800528c:	4608      	mov	r0, r1
 800528e:	4611      	mov	r1, r2
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	f7fc fd53 	bl	8001d3c <_kill>
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	d102      	bne.n	80052a0 <_kill_r+0x1c>
 800529a:	682b      	ldr	r3, [r5, #0]
 800529c:	b103      	cbz	r3, 80052a0 <_kill_r+0x1c>
 800529e:	6023      	str	r3, [r4, #0]
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
 80052a2:	bf00      	nop
 80052a4:	200001b0 	.word	0x200001b0

080052a8 <_getpid_r>:
 80052a8:	f7fc bd40 	b.w	8001d2c <_getpid>

080052ac <__sread>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	460c      	mov	r4, r1
 80052b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b4:	f000 f894 	bl	80053e0 <_read_r>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	bfab      	itete	ge
 80052bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052be:	89a3      	ldrhlt	r3, [r4, #12]
 80052c0:	181b      	addge	r3, r3, r0
 80052c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052c6:	bfac      	ite	ge
 80052c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80052ca:	81a3      	strhlt	r3, [r4, #12]
 80052cc:	bd10      	pop	{r4, pc}

080052ce <__swrite>:
 80052ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d2:	461f      	mov	r7, r3
 80052d4:	898b      	ldrh	r3, [r1, #12]
 80052d6:	05db      	lsls	r3, r3, #23
 80052d8:	4605      	mov	r5, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	4616      	mov	r6, r2
 80052de:	d505      	bpl.n	80052ec <__swrite+0x1e>
 80052e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e4:	2302      	movs	r3, #2
 80052e6:	2200      	movs	r2, #0
 80052e8:	f000 f868 	bl	80053bc <_lseek_r>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	4632      	mov	r2, r6
 80052fa:	463b      	mov	r3, r7
 80052fc:	4628      	mov	r0, r5
 80052fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005302:	f000 b817 	b.w	8005334 <_write_r>

08005306 <__sseek>:
 8005306:	b510      	push	{r4, lr}
 8005308:	460c      	mov	r4, r1
 800530a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530e:	f000 f855 	bl	80053bc <_lseek_r>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	bf15      	itete	ne
 8005318:	6560      	strne	r0, [r4, #84]	; 0x54
 800531a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800531e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005322:	81a3      	strheq	r3, [r4, #12]
 8005324:	bf18      	it	ne
 8005326:	81a3      	strhne	r3, [r4, #12]
 8005328:	bd10      	pop	{r4, pc}

0800532a <__sclose>:
 800532a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532e:	f000 b813 	b.w	8005358 <_close_r>
	...

08005334 <_write_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d07      	ldr	r5, [pc, #28]	; (8005354 <_write_r+0x20>)
 8005338:	4604      	mov	r4, r0
 800533a:	4608      	mov	r0, r1
 800533c:	4611      	mov	r1, r2
 800533e:	2200      	movs	r2, #0
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f7fc fd31 	bl	8001daa <_write>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_write_r+0x1e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_write_r+0x1e>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	200001b0 	.word	0x200001b0

08005358 <_close_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d06      	ldr	r5, [pc, #24]	; (8005374 <_close_r+0x1c>)
 800535c:	2300      	movs	r3, #0
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f7fc fd3d 	bl	8001de2 <_close>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_close_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_close_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	200001b0 	.word	0x200001b0

08005378 <_fstat_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4d07      	ldr	r5, [pc, #28]	; (8005398 <_fstat_r+0x20>)
 800537c:	2300      	movs	r3, #0
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	4611      	mov	r1, r2
 8005384:	602b      	str	r3, [r5, #0]
 8005386:	f7fc fd38 	bl	8001dfa <_fstat>
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	d102      	bne.n	8005394 <_fstat_r+0x1c>
 800538e:	682b      	ldr	r3, [r5, #0]
 8005390:	b103      	cbz	r3, 8005394 <_fstat_r+0x1c>
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	bd38      	pop	{r3, r4, r5, pc}
 8005396:	bf00      	nop
 8005398:	200001b0 	.word	0x200001b0

0800539c <_isatty_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4d06      	ldr	r5, [pc, #24]	; (80053b8 <_isatty_r+0x1c>)
 80053a0:	2300      	movs	r3, #0
 80053a2:	4604      	mov	r4, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	602b      	str	r3, [r5, #0]
 80053a8:	f7fc fd37 	bl	8001e1a <_isatty>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_isatty_r+0x1a>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_isatty_r+0x1a>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	200001b0 	.word	0x200001b0

080053bc <_lseek_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d07      	ldr	r5, [pc, #28]	; (80053dc <_lseek_r+0x20>)
 80053c0:	4604      	mov	r4, r0
 80053c2:	4608      	mov	r0, r1
 80053c4:	4611      	mov	r1, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	602a      	str	r2, [r5, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	f7fc fd30 	bl	8001e30 <_lseek>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_lseek_r+0x1e>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_lseek_r+0x1e>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	200001b0 	.word	0x200001b0

080053e0 <_read_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d07      	ldr	r5, [pc, #28]	; (8005400 <_read_r+0x20>)
 80053e4:	4604      	mov	r4, r0
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	2200      	movs	r2, #0
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fc fcbe 	bl	8001d70 <_read>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_read_r+0x1e>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_read_r+0x1e>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	200001b0 	.word	0x200001b0

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
